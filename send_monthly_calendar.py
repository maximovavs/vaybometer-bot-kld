#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
send_monthly_calendar.py

–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –ª—É–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞-—Ä–µ–∑—é–º–µ –≤ Telegram-–∫–∞–Ω–∞–ª.

‚Ä¢ —á–∏—Ç–∞–µ—Ç lunar_calendar.json
‚Ä¢ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π HTML-—Ç–µ–∫—Å—Ç
‚Ä¢ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ ¬´—Ä–æ–≤–Ω—ã–µ¬ª (–≤—Å–µ –¥–Ω–∏ –≤ –æ–¥–Ω—É —Ñ–∞–∑—É/–ø—É—Å—Ç—ã–µ) ‚Äî –≤–∫–ª—é—á–∞–µ—Ç –∞–≤–∞—Ä–∏–π–Ω–æ–µ
  —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ 9 –æ—Ç—Ä–µ–∑–∫–æ–≤ —Å –º—è–≥–∫–∏–º–∏ —Ñ–æ–ª–±—ç–∫–∞–º–∏, –Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –≤—Å—Ç–∞–≤–ª—è–µ—Ç
  long_desc –∏–∑ Gemini, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å;
‚Ä¢ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç Void-of-Course –∫–æ—Ä–æ—á–µ MIN_VOC_MINUTES.
"""

from __future__ import annotations

import os
import json
import asyncio
import html
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple

import pendulum
from telegram import Bot, constants

# ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

TZ = pendulum.timezone("Asia/Nicosia")
CAL_FILE = "lunar_calendar.json"
MIN_VOC_MINUTES = 15
MOON_EMOJI = "üåô"

TOKEN = os.getenv("TELEGRAM_TOKEN_KLG", "")
CHAT_ID = os.getenv("CHANNEL_ID_KLG", "")
if not TOKEN or not CHAT_ID:
    raise RuntimeError("TELEGRAM_TOKEN_KLG / CHANNEL_ID_KLG –Ω–µ –∑–∞–¥–∞–Ω—ã")

try:
    CHAT_ID_INT = int(CHAT_ID)
except ValueError:
    raise RuntimeError("CHANNEL_ID_KLG –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# ‚îÄ‚îÄ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏/—Ñ–æ–ª–±—ç–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# 9-–æ—Ç—Ä–µ–∑–∫–æ–≤–∞—è ¬´—Å–µ—Ç–∫–∞¬ª –º–µ—Å—è—Ü–∞ (–∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º)
FALLBACK_EMOJI = ["üåì", "üåî", "üåï", "üåñ", "üåó", "üåò", "üåë", "üåí", "üåì"]
FALLBACK_TEXTS = [
    "–í –ø–µ—Ä–∏–æ–¥ –ø–µ—Ä–≤–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏ —ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Ç—ë—Ç: —Ö–æ—Ä–æ—à–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.",
    "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ ‚Äî –≤—Ä–µ–º—è –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å —Ç–µ–º–ø, —É–∫—Ä–µ–ø–ª—è—Ç—å –ø–ª–∞–Ω—ã –∏ —Å–≤—è–∑–∏.",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ ‚Äî –∫—É–ª—å–º–∏–Ω–∞—Ü–∏—è —ç–º–æ—Ü–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤; –ø–æ–¥–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–∏ –∏ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ.",
    "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞ ‚Äî –º—è–≥–∫–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–∞–π—Ç–µ –ª–∏—à–Ω–µ–µ –∏ –Ω–∞–≤–æ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫.",
    "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.",
    "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø ‚Äî –æ—Ç–¥—ã—Ö, —Ä–µ—Ç—Ä–∏—Ç—ã, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–º—É —Ü–∏–∫–ª—É.",
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ ‚Äî –Ω—É–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ —Ü–∏–∫–ª–∞; –∑–∞—Å–µ–≤–∞–π—Ç–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –º–µ—á—Ç—ã.",
    "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø ‚Äî —ç–Ω–µ—Ä–≥–∏—è –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è, –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.",
    "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å ‚Äî —Å–Ω–æ–≤–∞ –∏–º–ø—É–ª—å—Å –∫ —Ä–æ—Å—Ç—É –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–º —à–∞–≥–∞–º –≤–ø–µ—Ä—ë–¥.",
]

ZODIAC_ORDER = [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
    "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]
LUNAR_EMOJIS = set("üåëüåíüåìüåîüåïüåñüåóüåò")


# ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _parse_dt(s: str, year: int) -> Optional[pendulum.DateTime]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "DD.MM HH:mm" –∏–ª–∏ ISO-—Å—Ç—Ä–æ–∫—É,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç pendulum.DateTime –≤ —Ç–∞–π–º–∑–æ–Ω–µ TZ.
    """
    if not s:
        return None
    try:
        # –ø—Ä–æ–±—É–µ–º ISO
        return pendulum.parse(s).in_tz(TZ)
    except Exception:
        try:
            # —Ñ–æ—Ä–º–∞—Ç "DD.MM HH:mm"
            parts = s.strip().split()
            if len(parts) != 2:
                return None
            dmy, hm = parts
            day, mon = map(int, dmy.split("."))
            hh, mm = map(int, hm.split(":"))
            return pendulum.datetime(year, mon, day, hh, mm, tz=TZ)
        except Exception:
            return None


def _phase_emoji_from_text(phase_text: str) -> Optional[str]:
    """
    –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ª—É–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏ –∏–∑ 'phase', –µ—Å–ª–∏ –µ—Å—Ç—å.
    """
    if not isinstance(phase_text, str):
        return None
    for ch in phase_text.strip():
        if ch in LUNAR_EMOJIS:
            return ch
    return None


def _derive_phase_name_and_sign(rec: Dict[str, Any]) -> Tuple[Optional[str], Optional[str]]:
    """
    –î–æ—Å—Ç–∞—ë–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–∑—ã –∏ –∑–Ω–∞–∫.
    –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä—ë–º 'phase_name', –∏–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å 'phase' –≤–∏–¥–∞
    'üåî –†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ , –í–æ–¥–æ–ª–µ–π'.
    """
    name = rec.get("phase_name")
    sign = rec.get("sign")
    if isinstance(name, str) and name.strip():
        name = name.strip()
    else:
        # –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑ 'phase'
        ph = rec.get("phase")
        if isinstance(ph, str) and ph.strip():
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É ¬´–Ω–∞–∑–≤–∞–Ω–∏–µ–º¬ª –∏ ¬´–∑–Ω–∞–∫–æ–º¬ª —á–∞—Å—Ç–æ –∑–∞–ø—è—Ç–∞—è
            # –£–±–µ—Ä—ë–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
            em = _phase_emoji_from_text(ph) or ""
            ph_clean = ph.strip()
            if em and ph_clean.startswith(em):
                ph_clean = ph_clean[len(em):].strip()
            # –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–¥–µ–ª–∏—Ç—å –ø–æ –∑–∞–ø—è—Ç–æ–π
            parts = [p.strip() for p in ph_clean.split(",")]
            if parts:
                name = parts[0] or None
            if len(parts) > 1 and not sign:
                sign = parts[1] or None
        else:
            name = None

    if not isinstance(sign, str) or not sign.strip():
        # –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑ rec['sign']
        sign = rec.get("sign") if isinstance(rec.get("sign"), str) else None

    return (name, sign)


def _format_span(days: List[str], si: int, ei: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç ¬´1‚Äì3 —Å–µ–Ω—Ç.¬ª –∏–ª–∏ ¬´1 —Å–µ–Ω—Ç.¬ª."""
    d1 = pendulum.parse(days[si]).format("D MMM", locale="ru")
    d2 = pendulum.parse(days[ei]).format("D MMM", locale="ru")
    return d1 if si == ei else f"{d1}‚Äì{d2}"


def _fallback_segments(days: List[str]) -> List[Tuple[int, int]]:
    """
    –î–µ–ª–∏–º –º–µ—Å—è—Ü –Ω–∞ 9 –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º.
    """
    if not days:
        return []
    n = len(days)
    # –∏–Ω–¥–µ–∫—Å—ã —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ 9 —á–∞—Å—Ç–µ–π
    cuts = [round(n * x / 9) for x in range(10)]
    segs: List[Tuple[int, int]] = []
    for i in range(9):
        si = max(0, min(n - 1, cuts[i]))
        ei = max(0, min(n - 1, cuts[i + 1] - 1))
        if ei < si:
            ei = si
        # —Å–∫–ª–µ–π–∫–∞ –ø—É—Å—Ç—ã—Ö
        if segs and si <= segs[-1][1]:
            si = segs[-1][1] + 1
            if si > ei:
                si = ei
        segs.append((si, ei))
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
    segs[-1] = (segs[-1][0], n - 1)
    return segs


def _looks_collapsed(data: Dict[str, Any]) -> bool:
    """
    –°—á–∏—Ç–∞–µ–º –º–µ—Å—è—Ü ¬´–∫–æ–ª–ª–∞–ø—Å–Ω—ã–º¬ª, –µ—Å–ª–∏ —É –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –¥–Ω–µ–π –Ω–µ—Ç phase_name,
    –∏–ª–∏ –≤—Å–µ —Ñ–∞–∑—ã –ø–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã, –∏–ª–∏ –∑–Ω–∞–∫–æ–≤ –ø–æ—á—Ç–∏ –Ω–µ—Ç.
    """
    names: set[str] = set()
    emojis: set[str] = set()
    signs: set[str] = set()
    total = 0
    empty_name = 0

    for _, rec in data.items():
        total += 1
        nm, sg = _derive_phase_name_and_sign(rec)
        if nm:
            names.add(nm.strip().lower())
        else:
            empty_name += 1
        em = _phase_emoji_from_text(rec.get("phase") or "")
        if em:
            emojis.add(em)
        if sg:
            signs.add(sg)

    if total == 0:
        return True
    if empty_name / total >= 0.60:
        return True
    if len(names) <= 1 and len(emojis) <= 1:
        return True
    if len(names) <= 2 and len(signs) <= 1:
        return True
    return False


def _produces_single_span(data: Dict[str, Any]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ –º–µ—Å—è—Ü –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –±–ª–æ–∫.
    """
    days = sorted(data.keys())
    if not days:
        return True
    first = days[0]
    name0, _ = _derive_phase_name_and_sign(data[first])
    em0 = _phase_emoji_from_text(data[first].get("phase") or "") or "üåô"
    key0 = (name0 or "__single__", em0)
    for d in days[1:]:
        nm, _ = _derive_phase_name_and_sign(data[d])
        em = _phase_emoji_from_text(data[d].get("phase") or "") or "üåô"
        if (nm or "__single__", em) != key0:
            return False
    return True


# ‚îÄ‚îÄ –±–ª–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def build_phase_blocks(data: Dict[str, Any]) -> str:
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –¥–Ω–∏ –æ–¥–Ω–æ–π —Ñ–∞–∑—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ HTML-—Å—Ç—Ä–æ–∫:
    <b>üåí 1‚Äì3 —Å–µ–Ω—Ç.</b> <i>(–õ–µ–≤, –î–µ–≤–∞)</i>\n<i>–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞‚Ä¶</i>\n
    """
    days = sorted(data.keys())
    lines: List[str] = []
    i = 0
    while i < len(days):
        start = days[i]
        rec = data[start]

        name, sign = _derive_phase_name_and_sign(rec)
        emoji = _phase_emoji_from_text(rec.get("phase") or "") or "üåô"
        signs = set([sign]) if sign else set()

        j = i
        while j + 1 < len(days):
            n2, s2 = _derive_phase_name_and_sign(data[days[j + 1]])
            if (n2 or "").strip().lower() != (name or "").strip().lower():
                break
            j += 1
            if s2:
                signs.add(s2)

        span = _format_span(days, i, j)
        # –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∑–æ–¥–∏–∞–∫–∞
        sorted_signs = [s for s in ZODIAC_ORDER if s in signs]
        signs_str = ", ".join(sorted_signs)

        # –û–ø–∏—Å–∞–Ω–∏–µ ‚Äî long_desc –æ—Ç Gemini, –µ—Å–ª–∏ –µ—Å—Ç—å
        desc_raw = (rec.get("long_desc") or "").strip()
        desc = html.escape(desc_raw) if desc_raw else ""

        header = f"<b>{emoji} {span}</b>"
        if signs_str:
            header += f" <i>({signs_str})</i>"

        if desc:
            lines.append(f"{header}\n<i>{desc}</i>\n")
        else:
            lines.append(f"{header}\n")

        i = j + 1

    return "\n".join(lines)


def build_phase_blocks_with_fallback(data: Dict[str, Any]) -> str:
    """
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É. –ï—Å–ª–∏ –≤–∏–¥–∏–º ¬´–∫–æ–ª–ª–∞–ø—Å¬ª –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏
    –æ–Ω–∞ –¥–∞–ª–∞ –±—ã –æ–¥–∏–Ω-–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –±–ª–æ–∫ –Ω–∞ –≤–µ—Å—å –º–µ—Å—è—Ü ‚Äî –¥–µ–ª–∏–º –Ω–∞ 9 –æ—Ç—Ä–µ–∑–∫–æ–≤
    –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –º—è–≥–∫–∏–µ —Ñ–æ–ª–±—ç–∫–∏, –∞ —Ç–µ–∫—Å—Ç—ã Gemini (long_desc) ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã.
    """
    if not (_looks_collapsed(data) or _produces_single_span(data)):
        return build_phase_blocks(data)

    # –ê–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    days = sorted(data.keys())
    segs = _fallback_segments(days)
    lines: List[str] = []
    for idx, (si, ei) in enumerate(segs):
        span = _format_span(days, si, ei)
        emoji = FALLBACK_EMOJI[idx] if idx < len(FALLBACK_EMOJI) else "üåô"

        # –≤–Ω—É—Ç—Ä–∏ –æ—Ç—Ä–µ–∑–∫–∞ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π long_desc –æ—Ç Gemini; –∏–Ω–∞—á–µ –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫
        desc = ""
        for k in range(si, ei + 1):
            drec = data[days[k]]
            cand = (drec.get("long_desc") or "").strip()
            if cand:
                desc = cand
                break
        if not desc:
            desc = FALLBACK_TEXTS[idx] if idx < len(FALLBACK_TEXTS) else ""

        desc = html.escape(desc) if desc else ""
        header = f"<b>{emoji} {span}</b>"
        lines.append(f"{header}\n<i>{desc}</i>\n" if desc else f"{header}\n")

    return "\n".join(lines)


def _merge_first_favorable(rec_map: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ò—â–µ–º –ø–µ—Ä–≤—ã–π –≤—Å—Ç—Ä–µ—Ç–∏–≤—à–∏–π—Å—è –≤ –º–µ—Å—è—Ü–µ –±–ª–æ–∫ favorable_days –∏ –µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º.
    –ï—Å–ª–∏ –≤–æ –≤—Å—ë–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç ‚Äî –æ—Ç–¥–∞—ë–º –ø—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω.
    """
    for key in sorted(rec_map.keys()):
        fav = rec_map[key].get("favorable_days")
        if isinstance(fav, dict) and fav:
            return fav
    return {
        "general": {"favorable": [], "unfavorable": []},
        "haircut": {"favorable": []},
        "travel": {"favorable": []},
        "shopping": {"favorable": []},
        "health": {"favorable": []},
    }


def build_fav_blocks(rec_map: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ ¬´–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π¬ª.
    –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π ¬´–æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π¬ª –±–ª–æ–∫ favorable_days –∑–∞ –º–µ—Å—è—Ü.
    """
    fav = _merge_first_favorable(rec_map)
    general = fav.get("general", {}) or {}

    def fmt_main(key: str) -> str:
        vals = general.get(key) or []
        return ", ".join(map(str, vals)) if vals else "‚Äî"

    def fmt_sub(key: str) -> str:
        vals = (fav.get(key) or {}).get("favorable") or []
        return ", ".join(map(str, vals)) if vals else "‚Äî"

    parts = [
        f"‚úÖ <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {fmt_main('favorable')}",
        f"‚ùå <b>–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {fmt_main('unfavorable')}",
        f"‚úÇÔ∏è <b>–°—Ç—Ä–∏–∂–∫–∞:</b> {fmt_sub('haircut')}",
        f"‚úàÔ∏è <b>–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:</b> {fmt_sub('travel')}",
        f"üõçÔ∏è <b>–ü–æ–∫—É–ø–∫–∏:</b> {fmt_sub('shopping')}",
        f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {fmt_sub('health')}",
    ]
    return "\n".join(parts)


def build_voc_list(data: Dict[str, Any], year: int) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ VoC –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ‚â• MIN_VOC_MINUTES:
    02.06 14:30 ‚Üí 02.06 15:10
    """
    items: List[str] = []
    for d in sorted(data):
        voc = data[d].get("void_of_course")
        if not isinstance(voc, dict):
            continue
        start_s = voc.get("start")
        end_s = voc.get("end")
        if not start_s or not end_s:
            continue
        t1 = _parse_dt(start_s, year)
        t2 = _parse_dt(end_s, year)
        if not t1 or not t2:
            continue
        if (t2 - t1).in_minutes() < MIN_VOC_MINUTES:
            continue
        items.append(f"{t1.format('DD.MM HH:mm')}  ‚Üí  {t2.format('DD.MM HH:mm')}")

    if not items:
        return ""
    return "<b>‚ö´Ô∏è Void-of-Course:</b>\n" + "\n".join(items)


def build_message(data: Dict[str, Any]) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞:
    1) –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    2) –ë–ª–æ–∫ —Ñ–∞–∑ (—Å –∞–≤–∞—Ä–∏–π–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –ø—Ä–∏ ¬´–∫–æ–ª–ª–∞–ø—Å–µ¬ª)
    3) –ë–ª–æ–∫ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π
    4) –ë–ª–æ–∫ VoC (–µ—Å–ª–∏ –µ—Å—Ç—å)
    5) –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ VoC
    """
    # –ø–µ—Ä–≤–∞—è –¥–∞—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    first_key = sorted(data.keys())[0]
    first_day = pendulum.parse(first_key)
    header = f"{MOON_EMOJI} <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å {first_day.format('MMMM YYYY', locale='ru').upper()}</b>\n"

    phases_block = build_phase_blocks_with_fallback(data)
    fav_block = build_fav_blocks(data)
    voc_block = build_voc_list(data, first_day.year)

    footer = (
        "\n<i>‚ö´Ô∏è Void-of-Course ‚Äî –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã "
        "–≤ –∑–Ω–∞–∫–µ –∏ –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π; —ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å–µ—è–Ω–∞, –Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è "
        "–ª—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å.</i>"
    )

    parts = [header, phases_block, fav_block]
    if voc_block:
        parts.append(voc_block)
    parts.append(footer)
    return "\n\n".join(parts)


# ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def main():
    # —á–∏—Ç–∞–µ–º lunar_calendar.json
    raw = Path(CAL_FILE).read_text("utf-8")
    data = json.loads(raw)  # –æ–∂–∏–¥–∞–µ–º { "2025-09-01": { ... }, ... }

    text = build_message(data)

    bot = Bot(TOKEN)
    await bot.send_message(
        chat_id=CHAT_ID_INT,
        text=text,
        parse_mode=constants.ParseMode.HTML,
        disable_web_page_preview=True
    )


if __name__ == "__main__":
    asyncio.run(main())