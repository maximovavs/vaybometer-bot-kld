#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
send_monthly_calendar.py

–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –ª—É–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞-—Ä–µ–∑—é–º–µ –≤ Telegram-–∫–∞–Ω–∞–ª.

‚Ä¢ —á–∏—Ç–∞–µ—Ç lunar_calendar.json (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç {"days": ..., "month_voc": ...}
  –∏–ª–∏ —Å—Ç–∞—Ä—ã–π ‚Äî –¥–∞—Ç—ã –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ)
‚Ä¢ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π HTML-—Ç–µ–∫—Å—Ç
‚Ä¢ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç/—Å–∫–ª–µ–∏–≤–∞–µ—Ç Void-of-Course –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–æ—Ä–æ—á–µ MIN_VOC_MINUTES
"""

import os
import json
import asyncio
import html
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple
from collections import OrderedDict

import pendulum
from telegram import Bot, constants

# ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

TZ = pendulum.timezone("Asia/Nicosia")
CAL_FILE = "lunar_calendar.json"
MIN_VOC_MINUTES = 15
MOON_EMOJI = "üåô"

TOKEN = os.getenv("TELEGRAM_TOKEN_KLG", "")
CHAT_ID = os.getenv("CHANNEL_ID_KLG", "")
if not TOKEN or not CHAT_ID:
    raise RuntimeError("TELEGRAM_TOKEN_KLG / CHANNEL_ID_KLG –Ω–µ –∑–∞–¥–∞–Ω—ã")

try:
    CHAT_ID_INT = int(CHAT_ID)
except ValueError:
    raise RuntimeError("CHANNEL_ID_KLG –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")


# ‚îÄ‚îÄ helpers (–æ–±—â–∏–µ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _parse_dt(s: str, year: int) -> Optional[pendulum.DateTime]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "DD.MM HH:mm" –∏–ª–∏ ISO-—Å—Ç—Ä–æ–∫—É,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç pendulum.DateTime –≤ —Ç–∞–π–º–∑–æ–Ω–µ TZ.
    """
    try:
        # –ø—Ä–æ–±—É–µ–º ISO
        return pendulum.parse(s).in_tz(TZ)
    except Exception:
        try:
            # —Ñ–æ—Ä–º–∞—Ç "DD.MM HH:mm"
            dmy, hm = s.split()
            day, mon = map(int, dmy.split("."))
            hh, mm = map(int, hm.split(":"))
            return pendulum.datetime(year, mon, day, hh, mm, tz=TZ)
        except Exception:
            return None


def _merge_intervals(
    intervals: List[Tuple[pendulum.DateTime, pendulum.DateTime]],
    tol_min: int = 1
) -> List[Tuple[pendulum.DateTime, pendulum.DateTime]]:
    """–°–∫–ª–µ–π–∫–∞ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è/—Å–º–µ–∂–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–¥–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—ã–∫ ¬±tol_min)."""
    if not intervals:
        return []
    intervals = sorted(intervals, key=lambda ab: ab[0])
    out = [intervals[0]]
    tol = pendulum.duration(minutes=tol_min)
    for s, e in intervals[1:]:
        ps, pe = out[-1]
        if s <= pe + tol:  # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∏–ª–∏ –ø–æ—á—Ç–∏ —Å—Ç—ã–∫
            out[-1] = (ps, max(pe, e))
        else:
            out.append((s, e))
    return out


def _parse_voc_entry_local(obj: Dict[str, Any]) -> Tuple[Optional[pendulum.DateTime], Optional[pendulum.DateTime]]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–Ω–µ–≤–Ω–æ–≥–æ VoC –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ 'DD.MM HH:mm' ‚Üí pendulum –≤ TZ."""
    if not obj or not obj.get("start") or not obj.get("end"):
        return None, None
    try:
        s = pendulum.from_format(obj["start"], "DD.MM HH:mm", tz=TZ)
        e = pendulum.from_format(obj["end"],   "DD.MM HH:mm", tz=TZ)
    except Exception:
        return None, None
    if e <= s:
        return None, None
    return s, e


def _format_voc_interval(start: pendulum.DateTime, end: pendulum.DateTime) -> str:
    """
    –ï–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è VoC:
      ‚Ä¢ –µ—Å–ª–∏ –≤ –æ–¥–Ω–∏ —Å—É—Ç–∫–∏:  02.06 09:10‚Äì13:25
      ‚Ä¢ –µ—Å–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏: 02.06 23:10‚Äì03.06 01:05
    """
    same_day = (start.date() == end.date())
    if same_day:
        return f"{start.format('DD.MM')} {start.format('HH:mm')}‚Äì{end.format('HH:mm')}"
    return f"{start.format('DD.MM HH:mm')}‚Äì{end.format('DD.MM HH:mm')}"


def load_calendar(src: Any = None
) -> Tuple[OrderedDict[str, Dict[str, Any]], List[Tuple[pendulum.DateTime, pendulum.DateTime]], Dict[str, Any]]:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.

    –í—Ö–æ–¥: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, Path, –ª–∏–±–æ —É–∂–µ —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π dict.
    –í—ã—Ö–æ–¥:
      days_map  ‚Äî OrderedDict[YYYY-MM-DD] -> –∑–∞–ø–∏—Å—å –¥–Ω—è
      month_voc ‚Äî —Å–ø–∏—Å–æ–∫ (start_dt, end_dt) –≤ TZ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã/–≤—Ä–µ–º—è)
      cats      ‚Äî —Å–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Å—è—Ü–∞
    """
    if src is None:
        obj = json.loads(Path(CAL_FILE).read_text("utf-8"))
    elif isinstance(src, (str, Path)):
        obj = json.loads(Path(src).read_text("utf-8"))
    else:
        obj = src  # —É–∂–µ dict

    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    if isinstance(obj, dict) and "days" in obj:
        days_map: OrderedDict[str, Dict[str, Any]] = OrderedDict(sorted(obj["days"].items()))
        first_day = next(iter(days_map.values()), {})
        cats = first_day.get("favorable_days") or {}

        # month_voc –∏–∑ –∫–æ—Ä–Ω—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        voc_list: List[Tuple[pendulum.DateTime, pendulum.DateTime]] = []
        for it in obj.get("month_voc") or []:
            try:
                s = pendulum.from_format(it["start"], "DD.MM HH:mm", tz=TZ)
                e = pendulum.from_format(it["end"],   "DD.MM HH:mm", tz=TZ)
                if e > s:
                    voc_list.append((s, e))
            except Exception:
                continue

        # –ï—Å–ª–∏ month_voc –Ω–µ—Ç ‚Äî —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ –¥–Ω–µ–≤–Ω—ã—Ö –∫—É—Å–∫–æ–≤
        if not voc_list:
            pieces: List[Tuple[pendulum.DateTime, pendulum.DateTime]] = []
            for rec in days_map.values():
                s, e = _parse_voc_entry_local(rec.get("void_of_course"))
                if s and e:
                    pieces.append((s, e))
            voc_list = _merge_intervals(pieces)

    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
    else:
        days_map = OrderedDict(sorted(obj.items()))
        first_day = next(iter(days_map.values()), {})
        cats = first_day.get("favorable_days") or {}

        pieces: List[Tuple[pendulum.DateTime, pendulum.DateTime]] = []
        for rec in days_map.values():
            s, e = _parse_voc_entry_local(rec.get("void_of_course"))
            if s and e:
                pieces.append((s, e))
        voc_list = _merge_intervals(pieces)

    # –û–±—Ä–µ–∂–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã VoC —Ä–∞–º–∫–∞–º–∏ –º–µ—Å—è—Ü–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    y, m = map(int, next(iter(days_map.keys())).split("-")[:2])
    month_start = pendulum.datetime(y, m, 1, 0, 0, tz=TZ)
    month_end   = month_start.end_of("month")
    clipped: List[Tuple[pendulum.DateTime, pendulum.DateTime]] = []
    for s, e in voc_list:
        if s < month_end and e > month_start:
            s2 = max(s, month_start)
            e2 = min(e, month_end)
            if e2 > s2:
                clipped.append((s2, e2))
    voc_list = _merge_intervals(clipped)

    return days_map, voc_list, cats


# ‚îÄ‚îÄ —Ä–µ–Ω–¥–µ—Ä –±–ª–æ–∫–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def build_phase_blocks(data: Dict[str, Any]) -> str:
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –¥–Ω–∏ –æ–¥–Ω–æ–π —Ñ–∞–∑—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ HTML-—Å—Ç—Ä–æ–∫:
    <b>üåí 1‚Äì3</b> <i>(–õ–µ–≤, –î–µ–≤–∞)</i>\n<i>–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞‚Ä¶</i>\n
    """
    zodiac_order = [
        "–û–≤–µ–Ω","–¢–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã","–†–∞–∫","–õ–µ–≤","–î–µ–≤–∞",
        "–í–µ—Å—ã","–°–∫–æ—Ä–ø–∏–æ–Ω","–°—Ç—Ä–µ–ª–µ—Ü","–ö–æ–∑–µ—Ä–æ–≥","–í–æ–¥–æ–ª–µ–π","–†—ã–±—ã"
    ]

    days = sorted(data.keys())
    lines: List[str] = []
    i = 0
    while i < len(days):
        start = days[i]
        rec = data[start]
        name = rec.get("phase_name", "")
        # "phase" —Ö—Ä–∞–Ω–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "üåí –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å , –î–µ–≤–∞"
        emoji = rec.get("phase", "").split()[0]
        signs = {rec.get("sign", "")}

        # –∏—â–µ–º, –ø–æ–∫–∞ —Ñ–∞–∑–∞ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–π –∂–µ
        j = i
        while j + 1 < len(days) and data[days[j + 1]].get("phase_name") == name:
            j += 1
            signs.add(data[days[j]].get("sign", ""))

        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        d1 = pendulum.parse(start).format("D")
        d2 = pendulum.parse(days[j]).format("D MMM", locale="ru")
        span = f"{d1}‚Äì{d2}" if i != j else d2

        # —Å–ø–∏—Å–æ–∫ –∑–Ω–∞–∫–æ–≤ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        sorted_signs = sorted(signs, key=lambda x: zodiac_order.index(x) if x in zodiac_order else 0)
        signs_str = ", ".join(sorted_signs)

        # –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (long_desc) –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML
        desc = html.escape(rec.get("long_desc", "").strip())

        lines.append(f"<b>{emoji} {span}</b> <i>({signs_str})</i>\n<i>{desc}</i>\n")
        i = j + 1

    return "\n".join(lines)


def build_fav_blocks(rec_or_cats: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ ¬´–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π¬ª.
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏–±–æ –∑–∞–ø–∏—Å—å –¥–Ω—è —Å –∫–ª—é—á–æ–º 'favorable_days', –ª–∏–±–æ —Å–∞–º —Å–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    fav = rec_or_cats.get("favorable_days") if "favorable_days" in rec_or_cats else rec_or_cats
    fav = fav or {}
    general = fav.get("general", {})

    def fmt_list(key: str) -> str:
        lst = fav.get(key, {}).get("favorable", [])
        return ", ".join(map(str, lst)) if lst else "‚Äî"

    parts = [
        f"‚úÖ <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {', '.join(map(str, general.get('favorable', [])) or ['‚Äî'])}",
        f"‚ùå <b>–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {', '.join(map(str, general.get('unfavorable', [])) or ['‚Äî'])}",
        f"‚úÇÔ∏è <b>–°—Ç—Ä–∏–∂–∫–∞:</b> {fmt_list('haircut')}",
        f"‚úàÔ∏è <b>–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:</b> {fmt_list('travel')}",
        f"üõçÔ∏è <b>–ü–æ–∫—É–ø–∫–∏:</b> {fmt_list('shopping')}",
        f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {fmt_list('health')}",
    ]
    return "\n".join(parts)


def build_voc_block(voc_list: List[Tuple[pendulum.DateTime, pendulum.DateTime]]) -> str:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –º–µ—Å—è—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ VoC –∏–∑ —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ—Ä–æ–≥ MIN_VOC_MINUTES –∏ –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    items: List[str] = []
    for s, e in voc_list:
        if (e - s).in_minutes() < MIN_VOC_MINUTES:
            continue
        items.append(_format_voc_interval(s, e))

    if not items:
        return ""
    return "<b>‚ö´Ô∏è VoC (Void-of-Course):</b>\n" + "\n".join(items)


# ‚îÄ‚îÄ —Å–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def build_message(days_map: Dict[str, Any],
                  month_voc: List[Tuple[pendulum.DateTime, pendulum.DateTime]],
                  cats: Dict[str, Any]) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞:
    1) –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    2) –ë–ª–æ–∫ —Ñ–∞–∑
    3) –ë–ª–æ–∫ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π
    4) –ë–ª–æ–∫ VoC (–µ—Å–ª–∏ –µ—Å—Ç—å)
    5) –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ VoC
    """
    first_key = next(iter(days_map.keys()))
    first_day = pendulum.parse(first_key)
    header = f"{MOON_EMOJI} <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å {first_day.format('MMMM YYYY', locale='ru').upper()}</b>\n"

    phases_block = build_phase_blocks(days_map)
    fav_block = build_fav_blocks(cats)
    voc_block = build_voc_block(month_voc)

    footer = (
        "\n<i>‚ö´Ô∏è Void-of-Course ‚Äî –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã "
        "–≤ –∑–Ω–∞–∫–µ –∏ –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π; —ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å–µ—è–Ω–∞, –Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è "
        "–ª—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å.</i>"
    )

    parts = [header, phases_block, fav_block]
    if voc_block:
        parts.append(voc_block)
    parts.append(footer)
    return "\n\n".join(parts)


# ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def main():
    # —á–∏—Ç–∞–µ–º lunar_calendar.json
    raw = Path(CAL_FILE).read_text("utf-8")
    obj = json.loads(raw)

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å –Ω–æ–≤—ã–º, –∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º)
    days_map, month_voc, cats = load_calendar(obj)

    text = build_message(days_map, month_voc, cats)

    bot = Bot(TOKEN)
    await bot.send_message(
        chat_id=CHAT_ID_INT,
        text=text,
        parse_mode=constants.ParseMode.HTML,
        disable_web_page_preview=True
    )


if __name__ == "__main__":
    asyncio.run(main())