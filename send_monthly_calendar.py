#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
send_monthly_calendar.py

–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –ª—É–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞-—Ä–µ–∑—é–º–µ –≤ Telegram-–∫–∞–Ω–∞–ª.

‚Ä¢ —á–∏—Ç–∞–µ—Ç lunar_calendar.json
‚Ä¢ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π HTML-—Ç–µ–∫—Å—Ç
‚Ä¢ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç Void-of-Course –∫–æ—Ä–æ—á–µ MIN_VOC_MINUTES
"""

import os
import json
import asyncio
import html
from pathlib import Path
from typing import Dict, Any, List, Optional

import pendulum
from telegram import Bot, constants

# ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

TZ = pendulum.timezone("Asia/Nicosia")
CAL_FILE = "lunar_calendar.json"
MIN_VOC_MINUTES = 15
MOON_EMOJI = "üåô"

TOKEN = os.getenv("TELEGRAM_TOKEN_KLG", "")
CHAT_ID = os.getenv("CHANNEL_ID_KLG", "")
if not TOKEN or not CHAT_ID:
    raise RuntimeError("TELEGRAM_TOKEN_KLG / CHANNEL_ID_KLG –Ω–µ –∑–∞–¥–∞–Ω—ã")

try:
    CHAT_ID_INT = int(CHAT_ID)
except ValueError:
    raise RuntimeError("CHANNEL_ID_KLG –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")


# ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _parse_dt(s: str, year: int) -> Optional[pendulum.DateTime]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "DD.MM HH:mm" –∏–ª–∏ ISO-—Å—Ç—Ä–æ–∫—É,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç pendulum.DateTime –≤ —Ç–∞–π–º–∑–æ–Ω–µ TZ.
    """
    try:
        # –ø—Ä–æ–±—É–µ–º ISO
        return pendulum.parse(s).in_tz(TZ)
    except Exception:
        try:
            # —Ñ–æ—Ä–º–∞—Ç "DD.MM HH:mm"
            dmy, hm = s.split()
            day, mon = map(int, dmy.split("."))
            hh, mm = map(int, hm.split(":"))
            return pendulum.datetime(year, mon, day, hh, mm, tz=TZ)
        except Exception:
            return None


def build_phase_blocks(data: Dict[str, Any]) -> str:
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –¥–Ω–∏ –æ–¥–Ω–æ–π —Ñ–∞–∑—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ HTML-—Å—Ç—Ä–æ–∫:
    <b>üåí 1‚Äì3</b> <i>(–õ–µ–≤, –î–µ–≤–∞)</i>\n<i>–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞‚Ä¶</i>\n
    """
    zodiac_order = [
        "–û–≤–µ–Ω","–¢–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã","–†–∞–∫","–õ–µ–≤","–î–µ–≤–∞",
        "–í–µ—Å—ã","–°–∫–æ—Ä–ø–∏–æ–Ω","–°—Ç—Ä–µ–ª–µ—Ü","–ö–æ–∑–µ—Ä–æ–≥","–í–æ–¥–æ–ª–µ–π","–†—ã–±—ã"
    ]

    days = sorted(data.keys())
    lines: List[str] = []
    i = 0
    while i < len(days):
        start = days[i]
        rec = data[start]
        name = rec.get("phase_name", "")
        # "phase" —Ö—Ä–∞–Ω–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "üåí –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å , –î–µ–≤–∞"
        emoji = rec.get("phase", "").split()[0]
        signs = {rec.get("sign", "")}

        # –∏—â–µ–º, –ø–æ–∫–∞ —Ñ–∞–∑–∞ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–π –∂–µ
        j = i
        while j + 1 < len(days) and data[days[j + 1]].get("phase_name") == name:
            j += 1
            signs.add(data[days[j]].get("sign", ""))

        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        d1 = pendulum.parse(start).format("D")
        d2 = pendulum.parse(days[j]).format("D MMM", locale="ru")
        span = f"{d1}‚Äì{d2}" if i != j else d2

        # —Å–ø–∏—Å–æ–∫ –∑–Ω–∞–∫–æ–≤ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        sorted_signs = sorted(signs, key=lambda x: zodiac_order.index(x) if x in zodiac_order else 0)
        signs_str = ", ".join(sorted_signs)

        # –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (long_desc) –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML
        desc = html.escape(rec.get("long_desc", "").strip())

        lines.append(f"<b>{emoji} {span}</b> <i>({signs_str})</i>\n<i>{desc}</i>\n")
        i = j + 1

    return "\n".join(lines)


def build_fav_blocks(rec: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ ¬´–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π¬ª:
    ‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ: 2, 3, 9, 27
    ‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ: 13, 14, 24
    ‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∞: 2, 3, 9
    ‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: 4, 5
    üõçÔ∏è –ü–æ–∫—É–ø–∫–∏: 1, 2, 7
    ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: 20, 21, 27
    """
    fav = rec.get("favorable_days", {})
    general = fav.get("general", {})
    def fmt_list(key: str) -> str:
        lst = fav.get(key, {}).get("favorable", [])
        return ", ".join(map(str, lst)) if lst else "‚Äî"

    parts = [
        f"‚úÖ <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {', '.join(map(str, general.get('favorable', [])) or ['‚Äî'])}",
        f"‚ùå <b>–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {', '.join(map(str, general.get('unfavorable', [])) or ['‚Äî'])}",
        f"‚úÇÔ∏è <b>–°—Ç—Ä–∏–∂–∫–∞:</b> {fmt_list('haircut')}",
        f"‚úàÔ∏è <b>–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:</b> {fmt_list('travel')}",
        f"üõçÔ∏è <b>–ü–æ–∫—É–ø–∫–∏:</b> {fmt_list('shopping')}",
        f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {fmt_list('health')}",
    ]
    return "\n".join(parts)


def build_voc_list(data: Dict[str, Any], year: int) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ VoC –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ‚â• MIN_VOC_MINUTES:
    02.06 14:30 ‚Üí 02.06 15:10
    """
    items: List[str] = []
    for d in sorted(data):
        voc = data[d].get("void_of_course", {})
        start_s = voc.get("start")
        end_s = voc.get("end")
        if not start_s or not end_s:
            continue
        t1 = _parse_dt(start_s, year)
        t2 = _parse_dt(end_s, year)
        if not t1 or not t2:
            continue
        if (t2 - t1).in_minutes() < MIN_VOC_MINUTES:
            continue
        items.append(f"{t1.format('DD.MM HH:mm')}  ‚Üí  {t2.format('DD.MM HH:mm')}")

    if not items:
        return ""
    return "<b>‚ö´Ô∏è Void-of-Course:</b>\n" + "\n".join(items)


def build_message(data: Dict[str, Any]) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞:
    1) –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    2) –ë–ª–æ–∫ —Ñ–∞–∑
    3) –ë–ª–æ–∫ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π
    4) –ë–ª–æ–∫ VoC (–µ—Å–ª–∏ –µ—Å—Ç—å)
    5) –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ VoC
    """
    # –ø–µ—Ä–≤–∞—è –¥–∞—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    first_key = sorted(data.keys())[0]
    first_day = pendulum.parse(first_key)
    header = f"{MOON_EMOJI} <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å {first_day.format('MMMM YYYY', locale='ru').upper()}</b>\n"

    phases_block = build_phase_blocks(data)

    # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞—Ä—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ favorable_days
    example_rec = next(iter(data.values()), {})
    fav_block = build_fav_blocks(example_rec)

    voc_block = build_voc_list(data, first_day.year)

    footer = (
        "\n<i>‚ö´Ô∏è Void-of-Course ‚Äî –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã "
        "–≤ –∑–Ω–∞–∫–µ –∏ –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π; —ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å–µ—è–Ω–∞, –Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è "
        "–ª—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å.</i>"
    )

    parts = [header, phases_block, fav_block]
    if voc_block:
        parts.append(voc_block)
    parts.append(footer)
    return "\n\n".join(parts)


# ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def main():
    # —á–∏—Ç–∞–µ–º lunar_calendar.json
    raw = Path(CAL_FILE).read_text("utf-8")
    data = json.loads(raw)  # –æ–∂–∏–¥–∞–µ–º { "2025-06-01": { ... }, ... }

    text = build_message(data)

    bot = Bot(TOKEN)
    await bot.send_message(
        chat_id=CHAT_ID_INT,
        text=text,
        parse_mode=constants.ParseMode.HTML,
        disable_web_page_preview=True
    )


if __name__ == "__main__":
    asyncio.run(main())
