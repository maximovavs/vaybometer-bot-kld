#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
send_monthly_calendar.py

–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –ª—É–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞-—Ä–µ–∑—é–º–µ –≤ Telegram-–∫–∞–Ω–∞–ª.

‚Ä¢ —á–∏—Ç–∞–µ—Ç lunar_calendar.json
‚Ä¢ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π HTML-—Ç–µ–∫—Å—Ç
‚Ä¢ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç Void-of-Course –∫–æ—Ä–æ—á–µ MIN_VOC_MINUTES
‚Ä¢ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–∑–∞–º ¬´–ø—É—Å—Ç—ã–µ/–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ¬ª ‚Äî –¥–µ–ª–∏—Ç –º–µ—Å—è—Ü –Ω–∞ 9 –ø—Ä–∏–≤—ã—á–Ω—ã—Ö
  –æ—Ç—Ä–µ–∑–∫–æ–≤ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –º—è–≥–∫–∏–µ —Ñ–æ–ª–±—ç–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–µ–∫—Å—Ç—ã Gemini, –≥–¥–µ –æ–Ω–∏ –µ—Å—Ç—å
"""

from __future__ import annotations
import os
import json
import asyncio
import html
import re
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple

import pendulum
from telegram import Bot, constants

# ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

TZ = pendulum.timezone("Asia/Nicosia")
CAL_FILE = "lunar_calendar.json"
MIN_VOC_MINUTES = 15
MOON_EMOJI = "üåô"

TOKEN = os.getenv("TELEGRAM_TOKEN_KLG", "")
CHAT_ID = os.getenv("CHANNEL_ID_KLG", "")
if not TOKEN or not CHAT_ID:
    raise RuntimeError("TELEGRAM_TOKEN_KLG / CHANNEL_ID_KLG –Ω–µ –∑–∞–¥–∞–Ω—ã")

try:
    CHAT_ID_INT = int(CHAT_ID)
except ValueError:
    raise RuntimeError("CHANNEL_ID_KLG –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# –≠–º–æ–¥–∑–∏ —Ñ–∞–∑ (–¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –≤—ã—Ç–∞—â–∏—Ç—å —Å–∏–º–≤–æ–ª –∏–∑ –ø–æ–ª—è phase)
PHASE_EMOJI = {"üåë","üåí","üåì","üåî","üåï","üåñ","üåó","üåò"}

# –ú—è–≥–∫–∏–µ —Ñ–æ–ª–±—ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏–ª–∏—Å—å
FALLBACK_TEXTS = [
    "–ü–µ—Ä–≤—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ—è–≤–∏–ª–∏—Å—å, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∫—É—Ä—Å –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ.",
    "–£—Å–∫–æ—Ä–µ–Ω–∏–µ: —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã, —É–∫—Ä–µ–ø–ª—è–π—Ç–µ —Å–≤—è–∑–∏.",
    "–ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è: –º–∞–∫—Å–∏–º—É–º —ç–º–æ—Ü–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
    "–û—Ç–ø—É—Å–∫–∞–µ–º –ª–∏—à–Ω–µ–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–ª–∞, –Ω–∞–≤–æ–¥–∏–º –ø–æ—Ä—è–¥–æ–∫.",
    "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞, —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.",
    "–û—Ç–¥—ã—Ö, —Ä–µ—Ç—Ä–∏—Ç—ã, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–º—É —Ü–∏–∫–ª—É.",
    "–ù—É–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ —Ü–∏–∫–ª–∞ ‚Äî –∑–∞–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –º–µ—á—Ç—ã –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.",
    "–≠–Ω–µ—Ä–≥–∏—è –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è ‚Äî –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.",
    "–ü–µ—Ä–≤—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ—è–≤–∏–ª–∏—Å—å, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∫—É—Ä—Å –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ."
]
FALLBACK_EMOJI = ["üåì","üåî","üåï","üåñ","üåó","üåò","üåë","üåí","üåì"]  # –ø–æ–¥ —Ç–µ–∫—Å—Ç—ã –≤—ã—à–µ


# ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _parse_dt(s: str, year: int) -> Optional[pendulum.DateTime]:
    """–ü–∞—Ä—Å–∏—Ç 'DD.MM HH:mm' –∏–ª–∏ ISO-—Å—Ç—Ä–æ–∫—É ‚Üí pendulum.DateTime –≤ TZ."""
    try:
        return pendulum.parse(s).in_tz(TZ)
    except Exception:
        try:
            dmy, hm = s.split()
            day, mon = map(int, dmy.split("."))
            hh, mm = map(int, hm.split(":"))
            return pendulum.datetime(year, mon, day, hh, mm, tz=TZ)
        except Exception:
            return None


def _phase_emoji_from_text(phase_text: str) -> Optional[str]:
    if not phase_text:
        return None
    first = phase_text.strip().split()[0]
    return first if first in PHASE_EMOJI else None


def _derive_phase_name_and_sign(rec: Dict[str, Any]) -> tuple[str, Optional[str]]:
    """
    –î–æ—Å—Ç–∞—ë–º –∏–º—è —Ñ–∞–∑—ã –∏ –∑–Ω–∞–∫. –ï—Å–ª–∏ phase_name –ø—É—Å—Ç ‚Äî –±–µ—Ä—ë–º –∏–∑ 'phase' (—á–∞—Å—Ç—å –¥–æ –∑–∞–ø—è—Ç–æ–π,
    –±–µ–∑ —ç–º–æ–¥–∑–∏). –ï—Å–ª–∏ sign –ø—É—Å—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ 'phase' (—á–∞—Å—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π).
    """
    name = (rec.get("phase_name") or "").strip()
    if not name:
        phase_text = (rec.get("phase") or "").strip()
        tmp = re.sub(r"^\W+", "", phase_text)  # —Å—Ä–µ–∑–∞–µ–º —ç–º–æ–¥–∑–∏/—Å–∏–º–≤–æ–ª—ã
        name = tmp.split(",")[0].strip() if tmp else ""
    sign = rec.get("sign")
    if not sign:
        phase_text = (rec.get("phase") or "")
        if "," in phase_text:
            sign = phase_text.split(",")[-1].strip() or None
    return name or "", sign


def _month_span(days_sorted: List[str]) -> Tuple[pendulum.Date, pendulum.Date]:
    d1 = pendulum.parse(days_sorted[0]).date()
    d2 = pendulum.parse(days_sorted[-1]).date()
    return d1, d2


def _looks_collapsed(data: Dict[str, Any]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ¬´—Ñ–∞–∑–∞¬ª —É –≤—Å–µ—Ö –¥–Ω–µ–π –ø–æ —Å—É—Ç–∏ –æ–¥–Ω–∞/–ø—É—Å—Ç–∞—è ‚Üí –≤–µ—Ä–æ—è—Ç–Ω–æ,
    –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–¥–∞–ª –º–µ—Å—è—Ü –±–µ–∑ —Ñ–∞–∑ (–≤—Å—ë —Å–∫–ª–µ–∏—Ç—Å—è –≤ 1 –±–ª–æ–∫).
    """
    tokens = set()
    for d in data:
        rec = data[d]
        name, _ = _derive_phase_name_and_sign(rec)
        emoji = _phase_emoji_from_text(rec.get("phase") or "")
        tokens.add((name or "", emoji or ""))
        if len(tokens) > 3:
            return False
    # –ï—Å–ª–∏ ‚â§ 1‚Äì2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –≤–µ—Å—å –º–µ—Å—è—Ü ‚Äî —Å—á–∏—Ç–∞–µ–º ¬´–∫–æ–ª–ª–∞–ø—Å–æ–º¬ª
    return len(tokens) <= 2


def _fallback_segments(days_sorted: List[str]) -> List[Tuple[int,int]]:
    """
    –î–µ–ª–∏–º –º–µ—Å—è—Ü –Ω–∞ 9 –æ—Ç—Ä–µ–∑–∫–æ–≤ ¬´–∫–∞–∫ —Ä–∞–Ω—å—à–µ¬ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ (start_idx, end_idx) –ø–æ days_sorted (–≤–∫–ª.).
    """
    n = len(days_sorted)
    # –ì—Ä–∞–Ω–∏—Ü—ã –ø–æ –¥–Ω—é –º–µ—Å—è—Ü–∞: [1], [2-5], [6-8], [9-12], [13-15], [16-19], [20-23], [24-27], [28-31]
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å—ã
    day_of = [pendulum.parse(d).day for d in days_sorted]
    borders = [(1,1),(2,5),(6,8),(9,12),(13,15),(16,19),(20,23),(24,27),(28,31)]
    segs: List[Tuple[int,int]] = []
    for a,b in borders:
        # –Ω–∞–π–¥—ë–º –ø–µ—Ä–≤—ã–π/–ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å, –ø–æ–ø–∞–¥–∞—é—â–∏–π –≤ —ç—Ç–æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω
        si = next((i for i,dd in enumerate(day_of) if a <= dd <= b), None)
        ei = None
        if si is not None:
            for j in range(n-1, -1, -1):
                if a <= day_of[j] <= b:
                    ei = j
                    break
        if si is not None and ei is not None and si <= ei:
            segs.append((si, ei))
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–∫–ª–µ–∏–º –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è/–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ
    merged: List[Tuple[int,int]] = []
    for s,e in segs:
        if not merged or s > merged[-1][1] + 1:
            merged.append((s,e))
        else:
            merged[-1] = (merged[-1][0], max(merged[-1][1], e))
    return merged


def _format_span(days_sorted: List[str], i: int, j: int) -> str:
    d1 = pendulum.parse(days_sorted[i])
    d2 = pendulum.parse(days_sorted[j])
    if i == j:
        return d2.format("D MMM", locale="ru")
    return f"{d1.format('D')}‚Äì{d2.format('D MMM', locale='ru')}"


def build_phase_blocks(data: Dict[str, Any]) -> str:
    """
    –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–∑–∞–º (–∏ —É–º–Ω–∞—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –µ—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –ø–æ–ª–µ–π –Ω–µ—Ç).
    –ï—Å–ª–∏ –≤—Å—ë ¬´–æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ¬ª, –Ω–∏–∂–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ñ–æ–ª–±—ç–∫.
    """
    zodiac_order = [
        "–û–≤–µ–Ω","–¢–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã","–†–∞–∫","–õ–µ–≤","–î–µ–≤–∞",
        "–í–µ—Å—ã","–°–∫–æ—Ä–ø–∏–æ–Ω","–°—Ç—Ä–µ–ª–µ—Ü","–ö–æ–∑–µ—Ä–æ–≥","–í–æ–¥–æ–ª–µ–π","–†—ã–±—ã"
    ]
    days = sorted(data.keys())
    lines: List[str] = []
    i = 0
    while i < len(days):
        start = days[i]
        rec = data[start]
        emoji = _phase_emoji_from_text(rec.get("phase") or "") or "üåô"
        name, sign_first = _derive_phase_name_and_sign(rec)
        group_key = (name or f"__day_{start}__", emoji)

        signs = set()
        if sign_first:
            signs.add(sign_first)

        j = i
        while j + 1 < len(days):
            next_rec = data[days[j+1]]
            nm, sg = _derive_phase_name_and_sign(next_rec)
            em = _phase_emoji_from_text(next_rec.get("phase") or "") or "üåô"
            next_key = (nm or f"__day_{days[j+1]}__", em)
            if next_key != group_key:
                break
            if sg:
                signs.add(sg)
            j += 1

        # –®–∞–ø–∫–∞ –±–ª–æ–∫–∞
        span = _format_span(days, i, j)
        signs_str = ", ".join([s for s in sorted(
            signs, key=lambda x: zodiac_order.index(x) if x in zodiac_order else 99
        ) if s])

        desc = (rec.get("long_desc") or "").strip()
        desc = html.escape(desc) if desc else ""

        header = f"<b>{emoji} {span}</b>"
        if signs_str:
            header += f" <i>({signs_str})</i>"

        if desc:
            lines.append(f"{header}\n<i>{desc}</i>\n")
        else:
            lines.append(f"{header}\n")

        i = j + 1
    return "\n".join(lines)


def build_phase_blocks_with_fallback(data: Dict[str, Any]) -> str:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –æ–±—ã—á–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É. –ï—Å–ª–∏ –≤–∏–¥–∏–º ¬´–∫–æ–ª–ª–∞–ø—Å¬ª –¥–∞–Ω–Ω—ã—Ö ‚Äî –¥–µ–ª–∏–º –º–µ—Å—è—Ü
    –Ω–∞ 9 –ø—Ä–∏–≤—ã—á–Ω—ã—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –º—è–≥–∫–∏–µ —Ñ–æ–ª–±—ç–∫–∏, –Ω–æ —Ç–µ–∫—Å—Ç—ã Gemini
    (long_desc) ‚Äî –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å ‚Äî –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ —Å–≤–æ–∏—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤.
    """
    # 1) –°–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–π –ø—É—Ç—å
    if not _looks_collapsed(data):
        return build_phase_blocks(data)

    # 2) –ê–≤–∞—Ä–∏–π–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    days = sorted(data.keys())
    segs = _fallback_segments(days)
    lines: List[str] = []

    for idx, (si, ei) in enumerate(segs):
        # –∑–∞–≥–æ–ª–æ–≤–æ–∫
        span = _format_span(days, si, ei)
        emoji = FALLBACK_EMOJI[idx] if idx < len(FALLBACK_EMOJI) else "üåô"

        # –æ–ø–∏—Å–∞–Ω–∏–µ: –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π long_desc –≤–Ω—É—Ç—Ä–∏ —Å–µ–≥–º–µ–Ω—Ç–∞; –∏–Ω–∞—á–µ —Ñ–æ–ª–±—ç–∫
        desc = ""
        for k in range(si, ei+1):
            drec = data[days[k]]
            cand = (drec.get("long_desc") or "").strip()
            if cand:
                desc = cand
                break
        if not desc:
            desc = FALLBACK_TEXTS[idx] if idx < len(FALLBACK_TEXTS) else ""

        desc = html.escape(desc) if desc else ""
        header = f"<b>{emoji} {span}</b>"
        if desc:
            lines.append(f"{header}\n<i>{desc}</i>\n")
        else:
            lines.append(f"{header}\n")

    return "\n".join(lines)


def build_fav_blocks(rec: Dict[str, Any]) -> str:
    """–ë–ª–æ–∫ ¬´–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö¬ª —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
    fav = rec.get("favorable_days", {}) or {}
    general = fav.get("general", {}) or {}

    def fmt_list(key: str) -> str:
        lst = (fav.get(key, {}) or {}).get("favorable", []) or []
        return ", ".join(map(str, lst)) if lst else "‚Äî"

    def fmt_main(key: str) -> str:
        lst = (general.get(key, []) or [])
        return ", ".join(map(str, lst)) if lst else "‚Äî"

    parts = [
        f"‚úÖ <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {fmt_main('favorable')}",
        f"‚ùå <b>–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {fmt_main('unfavorable')}",
        f"‚úÇÔ∏è <b>–°—Ç—Ä–∏–∂–∫–∞:</b> {fmt_list('haircut')}",
        f"‚úàÔ∏è <b>–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:</b> {fmt_list('travel')}",
        f"üõçÔ∏è <b>–ü–æ–∫—É–ø–∫–∏:</b> {fmt_list('shopping')}",
        f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {fmt_list('health')}",
    ]
    return "\n".join(parts)


def build_voc_list(data: Dict[str, Any], year: int) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç VoC –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ‚â• MIN_VOC_MINUTES."""
    items: List[str] = []
    for d in sorted(data):
        voc = data[d].get("void_of_course") or {}
        start_s = voc.get("start")
        end_s = voc.get("end")
        if not start_s or not end_s:
            continue
        t1 = _parse_dt(start_s, year)
        t2 = _parse_dt(end_s, year)
        if not t1 or not t2:
            continue
        if (t2 - t1).in_minutes() < MIN_VOC_MINUTES:
            continue
        items.append(f"{t1.format('DD.MM HH:mm')}  ‚Üí  {t2.format('DD.MM HH:mm')}")
    if not items:
        return ""
    return "<b>‚ö´Ô∏è Void-of-Course:</b>\n" + "\n".join(items)


def build_message(data: Dict[str, Any]) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞."""
    if not data:
        raise RuntimeError("lunar_calendar.json –ø—É—Å—Ç")

    first_key = sorted(data.keys())[0]
    first_day = pendulum.parse(first_key)
    header = f"{MOON_EMOJI} <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å {first_day.format('MMMM YYYY', locale='ru').upper()}</b>\n"

    # –§–∞–∑—ã (—Å —Ñ–æ–ª–±—ç–∫–æ–º –ø—Ä–∏ ¬´–∫–æ–ª–ª–∞–ø—Å–µ¬ª)
    phases_block = build_phase_blocks_with_fallback(data)

    # –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ (–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è)
    example_rec = next(iter(data.values()), {})
    fav_block = build_fav_blocks(example_rec)

    # VoC
    voc_block = build_voc_list(data, first_day.year)

    footer = (
        "\n<i>‚ö´Ô∏è Void-of-Course ‚Äî –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã "
        "–≤ –∑–Ω–∞–∫–µ –∏ –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π; —ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å–µ—è–Ω–∞, –Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è "
        "–ª—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å.</i>"
    )

    parts = [header, phases_block, fav_block]
    if voc_block:
        parts.append(voc_block)
    parts.append(footer)
    return "\n\n".join(parts)


# ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def main():
    raw = Path(CAL_FILE).read_text("utf-8")
    data = json.loads(raw)
    text = build_message(data)

    bot = Bot(TOKEN)
    await bot.send_message(
        chat_id=CHAT_ID_INT,
        text=text,
        parse_mode=constants.ParseMode.HTML,
        disable_web_page_preview=True
    )


if __name__ == "__main__":
    asyncio.run(main())