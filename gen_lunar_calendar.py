#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
gen_lunar_calendar.py

–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–º–µ—Å—è—á–Ω–æ–≥–æ –ª—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ lunar_calendar.json.

–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é:
- phase_name   : "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞" / "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ" –∏ —Ç.–¥.
- phase        : "üåî –†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞" (—ç–º–æ–¥–∑–∏ + –∫—Ä–∞—Ç–∫–æ–µ –∏–º—è)
- sign         : –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (ru)
- long_desc    : –î–í–ê –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ Gemini ‚Üí –¥–æ—Å–ø—Ä–æ—Å ‚Üí —Ñ–æ–ª–±—ç–∫)
- void_of_course: {"start": ISO, "end": ISO} ‚Äî –µ—Å–ª–∏ VoC —Å—Ç–∞—Ä—Ç—É–µ—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
- favorable_days: –±–ª–æ–∫ —Å ¬´–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ/‚Ä¶¬ª (–æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π)

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ø–æ VoC:
send_monthly_calendar.py —Å–æ–±–∏—Ä–∞–µ—Ç –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫, –ø—Ä–æ—Ö–æ–¥—è –ø–æ –¥–Ω—è–º –∏ —á–∏—Ç–∞—è
void_of_course. –ú—ã –∫–ª–∞–¥—ë–º –∑–∞–ø–∏—Å—å –≤ —Ç–æ—Ç –¥–µ–Ω—å, –∫–æ–≥–¥–∞ VoC –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø.
"""

from __future__ import annotations
import os
import re
import json
import time
import calendar
from dataclasses import dataclass
from typing import Dict, Any, List, Optional

import pendulum

# --- –≤–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å) ---------------------------
try:
    import yaml  # –¥–ª—è monthly_calendar.yml
except Exception:
    yaml = None

try:
    import lunar as LUN  # —Ç–≤–æ–π –º–æ–¥—É–ª—å —Å —Ñ–∞–∑–∞–º–∏/–∑–Ω–∞–∫–∞–º–∏/VoC
except Exception:
    LUN = None

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ --------------------------------------------------------------

TZ = pendulum.timezone(os.getenv("LUNAR_TZ", "Asia/Nicosia"))
OUT_FILE = os.getenv("LUNAR_OUT", "lunar_calendar.json")

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-1.5-flash")
GEMINI_ROUND_PAUSE = float(os.getenv("GEMINI_ROUND_PAUSE", "1.5"))
GEMINI_RETRY_ATTEMPTS = int(os.getenv("GEMINI_RETRY_ATTEMPTS", "3"))

# --- –†—É—Å—Å–∫–∏–µ –º–µ—Å—è—Ü—ã –≤ –ü–†–ï–î–õ–û–ñ–ù–û–ú –ø–∞–¥–µ–∂–µ (–¥–ª—è —Ñ–æ–ª–±—ç–∫–æ–≤) ---------------------

MONTH_IN_RU_PREP = {
    1: "—è–Ω–≤–∞—Ä–µ", 2: "—Ñ–µ–≤—Ä–∞–ª–µ", 3: "–º–∞—Ä—Ç–µ", 4: "–∞–ø—Ä–µ–ª–µ",
    5: "–º–∞–µ", 6: "–∏—é–Ω–µ", 7: "–∏—é–ª–µ", 8: "–∞–≤–≥—É—Å—Ç–µ",
    9: "—Å–µ–Ω—Ç—è–±—Ä–µ", 10: "–æ–∫—Ç—è–±—Ä–µ", 11: "–Ω–æ—è–±—Ä–µ", 12: "–¥–µ–∫–∞–±—Ä–µ",
}

# --- –£—Ç–∏–ª–∏—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å lunar.py ---------------------------------------

def moon_phase_name(dt: pendulum.DateTime) -> str:
    for name in ("phase_name", "moon_phase_name", "get_moon_phase_name"):
        if LUN and hasattr(LUN, name):
            try:
                return str(getattr(LUN, name)(dt))
            except Exception:
                pass
    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç
    return "–§–∞–∑–∞ –õ—É–Ω—ã"

def moon_phase_emoji(dt: pendulum.DateTime) -> str:
    for name in ("phase_emoji", "moon_phase_emoji", "get_moon_phase_emoji"):
        if LUN and hasattr(LUN, name):
            try:
                s = str(getattr(LUN, name)(dt))
                if s.strip():
                    return s.strip()
            except Exception:
                pass
    return "üåô"

def moon_sign(dt: pendulum.DateTime, tz: pendulum.Timezone) -> str:
    for name in ("sign_name", "moon_sign", "zodiac_sign", "get_sign"):
        if LUN and hasattr(LUN, name):
            try:
                return str(getattr(LUN, name)(dt, tz))
            except Exception:
                pass
    return ""

def voc_for_day(dt: pendulum.DateTime, tz: pendulum.Timezone) -> Optional[Dict[str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"start": ISO, "end": ISO} –µ—Å–ª–∏ –≤ –≠–¢–û–¢ –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è VoC.
    """
    if not LUN:
        return None
    for name in ("void_of_course", "get_voc", "voc_for_day", "compute_voc"):
        if hasattr(LUN, name):
            try:
                res = getattr(LUN, name)(dt, tz)
                if not res:
                    return None
                # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—Ç–∞
                if isinstance(res, dict):
                    s, e = res.get("start"), res.get("end")
                elif isinstance(res, (list, tuple)) and len(res) >= 2:
                    s, e = res[0], res[1]
                else:
                    s = e = None
                if s and e:
                    ss = pendulum.instance(s, tz=tz) if not isinstance(s, pendulum.DateTime) else s.in_tz(tz)
                    ee = pendulum.instance(e, tz=tz) if not isinstance(e, pendulum.DateTime) else e.in_tz(tz)
                    return {"start": ss.to_datetime_string(), "end": ee.to_datetime_string()}
            except Exception:
                pass
    return None

# --- –ó–∞–≥—Ä—É–∑–∫–∞ ¬´–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö¬ª –∏–∑ monthly_calendar.yml -----------------------

def load_favorables_for(month: int, year: int) -> Dict[str, Any]:
    """
    –ß–∏—Ç–∞–µ—Ç ./monthly_calendar.yml. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏.
    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
      <YYYY-MM>:
        general: {favorable: [...], unfavorable: [...]}
        haircut: {favorable: [...]}
        travel : {favorable: [...]}
        shopping:{favorable: [...]}
        health : {favorable: [...]}
    """
    blank = {
        "general": {"favorable": [], "unfavorable": []},
        "haircut": {"favorable": []},
        "travel": {"favorable": []},
        "shopping": {"favorable": []},
        "health": {"favorable": []},
    }
    path = "monthly_calendar.yml"
    if not yaml:
        return blank
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = yaml.safe_load(f) or {}
        key = f"{year:04d}-{month:02d}"
        return data.get(key) or blank
    except Exception:
        return blank

# --- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–∑–∞–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini ------------------------------

@dataclass
class Group:
    id: int
    start: str  # YYYY-MM-DD
    end: str
    phase: str
    signs: List[str]

def _group_month_by_phase(days: Dict[str, Dict[str, Any]]) -> List[Group]:
    keys = sorted(days.keys())
    groups: List[Group] = []
    i = 0
    gid = 1
    while i < len(keys):
        j = i
        phase = (days[keys[i]].get("phase_name") or "").strip()
        signs: set[str] = set()
        while j + 1 < len(keys) and (days[keys[j + 1]].get("phase_name") or "").strip() == phase:
            j += 1
        for k in keys[i:j+1]:
            s = (days[k].get("sign") or "").strip()
            if s:
                signs.add(s)
        groups.append(Group(gid, keys[i], keys[j], phase, sorted(signs)))
        gid += 1
        i = j + 1
    return groups

def _human_span(start: str, end: str) -> str:
    d1 = pendulum.parse(start)
    d2 = pendulum.parse(end)
    if d1.date() == d2.date():
        return d2.format("D MMM", locale="ru")
    if d1.month == d2.month:
        return f"{d1.format('D', locale='ru')}‚Äì{d2.format('D MMM', locale='ru')}"
    return f"{d1.format('D MMM', locale='ru')}‚Äì{d2.format('D MMM', locale='ru')}"

def _ru_month(dt: pendulum.DateTime) -> str:
    return dt.format("MMMM YYYY", locale="ru")

# --- Gemini JSON helper -----------------------------------------------------

def _gemini_json(prompt: str,
                 *,
                 model: str = GEMINI_MODEL,
                 temperature: float = 0.7,
                 max_output_tokens: int = 2048,
                 retry: int = 2,
                 backoff: float = 1.5) -> Optional[dict]:
    if not GEMINI_API_KEY:
        return None
    try:
        import google.generativeai as genai
    except Exception:
        return None

    genai.configure(api_key=GEMINI_API_KEY)

    schema = {
        "type": "object",
        "properties": {
            "segments": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {"type": "integer"},
                        "desc": {"type": "string"}
                    },
                    "required": ["id", "desc"]
                }
            }
        },
        "required": ["segments"]
    }

    last_err = None
    for attempt in range(retry + 1):
        try:
            model_obj = genai.GenerativeModel(
                model_name=model,
                generation_config={
                    "temperature": temperature,
                    "max_output_tokens": max_output_tokens,
                    "response_mime_type": "application/json",
                    "response_schema": schema,
                },
            )
            resp = model_obj.generate_content(prompt)
            txt = (resp.text or "").strip()
            if txt:
                return json.loads(txt)
        except Exception as e:
            last_err = e
            # –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–¥—Ä–∞—Ç—å JSON –∏–∑ ¬´—Å–≤–æ–±–æ–¥–Ω–æ–≥–æ¬ª –æ—Ç–≤–µ—Ç–∞
            try:
                model_obj2 = genai.GenerativeModel(model_name=model)
                resp2 = model_obj2.generate_content(prompt)
                raw = (resp2.text or "")
                m = re.search(r"\{.*\}", raw, re.S)
                if m:
                    return json.loads(m.group(0))
            except Exception as e2:
                last_err = e2

        if attempt < retry:
            time.sleep(backoff ** attempt)

    return None

# --- –§–æ–ª–±—ç–∫–∏ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–∞—Ö, —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–µ—Å—è—Ü–µ–º) -------------------

def fallback_two_sentences(phase: str, month_num: int) -> str:
    m = MONTH_IN_RU_PREP.get(month_num, "")
    # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∑—ã
    ph = (phase or "").lower()
    # –ú–∞–ø–ø–∏–Ω–≥ ‚Üí —Ç–µ–∫—Å—Ç—ã (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    if "–ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å" in ph or "1-—è —á–µ—Ç–≤–µ—Ä—Ç—å" in ph or "–ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å –ª—É–Ω—ã" in ph:
        return (f"–í –ø–µ—Ä–≤—É—é —á–µ—Ç–≤–µ—Ä—Ç—å –≤ {m} —ç–Ω–µ—Ä–≥–∏—è –õ—É–Ω—ã –ø–æ–±—É–∂–¥–∞–µ—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—é –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥—É–º–∞–Ω–Ω–æ–≥–æ. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–≥–æ–≤ –∫ –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é.")
    if "—Ä–∞—Å—Ç—É—â" in ph:
        return (f"–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ –≤ {m} –Ω–∞–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—Å —ç–Ω–µ—Ä–≥–∏–µ–π —Ä–æ—Å—Ç–∞ –∏ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–∏—Ö –º–µ—á—Ç –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–µ–±–µ.")
    if "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ" in ph or "–ø–æ–ª–Ω–æ–ª—É–Ω–∏—è" in ph:
        return (f"–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ –≤ {m} –ø—Ä–∏–Ω–æ—Å–∏—Ç –º–æ—â–Ω–æ–µ –æ—á–∏—â–µ–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
                "–≠—Ç–æ —É–¥–∞—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–µ–ª –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ.")
    if "—É–±—ã–≤–∞—é—â" in ph and "—Å–µ—Ä–ø" not in ph:
        return (f"–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞ –≤ {m} –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–µ—Ç –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∏ –º—è–≥–∫–æ–º—É –æ—Ç–ø—É—Å–∫–∞–Ω–∏—é –ª–∏—à–Ω–µ–≥–æ. "
                "–ü–æ–¥–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–æ—á–≤—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞.")
    if "–ø–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å" in ph or "3-—è —á–µ—Ç–≤–µ—Ä—Ç—å" in ph:
        return (f"–í –ø–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏ –≤ {m} —Å–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞. "
                "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ.")
    if "—É–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø" in ph or ("—É–±—ã–≤–∞—é—â" in ph and "—Å–µ—Ä–ø" in ph):
        return (f"–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø –≤ {m} –ø–æ–º–æ–≥–∞–µ—Ç –º—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—á–∞—Ç–æ–µ –∏ –æ—Ç–ø—É—Å—Ç–∏—Ç—å –ª–∏—à–Ω–µ–µ. "
                "–ü–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–µ–±–µ –∏ –Ω–∞–∫–æ–ø–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞.")
    if "–Ω–æ–≤–æ–ª—É–Ω–∏–µ" in ph:
        return (f"–í –Ω–æ–≤–æ–ª—É–Ω–∏–µ –≤ {m} –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –≤–æ—Ä–æ—Ç–∞ –∫ –Ω–æ–≤—ã–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É. "
                "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∂–µ–ª–∞–Ω–∏—è, –æ—á–∏—Å—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –ø–æ—Å–µ–π—Ç–µ —Å–µ–º–µ–Ω–∞ –±—É–¥—É—â–∏—Ö –¥–µ–ª.")
    if "—Ä–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø" in ph or ("—Ä–∞—Å—Ç—É—â" in ph and "—Å–µ—Ä–ø" in ph):
        return (f"–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø –≤ {m} –ø—Ä–∏–Ω–æ—Å–∏—Ç –∏–º–ø—É–ª—å—Å –∫ –Ω–∞—á–∞–ª—É –¥–µ–ª –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—é —Å–≤—è–∑–µ–π. "
                "–î–≤–∏–≥–∞–π—Ç–µ—Å—å —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è —É—Å–ø–µ—Ö–∞.")
    # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
    return (f"–≠–Ω–µ—Ä–≥–∏–∏ {m} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –Ω–µ—Å–ø–µ—à–Ω—ã–π, –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å. "
            "–î–æ–≤–µ—Ä—è–π—Ç–µ —Ü–∏–∫–ª–∞–º –∏ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –ø–ª–∞–Ω—ã —Å –æ–≥–ª—è–¥–∫–æ–π –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç–º.")

# --- –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ —á–µ—Ä–µ–∑ Gemini + –¥–æ—Å–ø—Ä–æ—Å ---------------------------

def describe_month_via_gemini(days: Dict[str, Dict[str, Any]]) -> Dict[int, str]:
    groups = _group_month_by_phase(days)
    if not groups:
        return {}
    first = pendulum.parse(sorted(days.keys())[0])
    month_title = _ru_month(first)

    def mk_list(gs: List[Group]) -> str:
        lines = []
        for g in gs:
            span = _human_span(g.start, g.end)
            signs = ", ".join(g.signs) if g.signs else "‚Äî"
            # –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ (–ª–µ–≥–∫–æ –ø–∞—Ä—Å–∏—Ç—Å—è –º–æ–¥–µ–ª—å—é)
            lines.append(f'- {{"id": {g.id}, "span": "{span}", "phase": "{g.phase}", "signs": "{signs}"}}')
        return "\n".join(lines)

    base_prompt = f"""–¢—ã ‚Äî –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä-–∞—Å—Ç—Ä–æ–ª–æ–≥.
–ù–∞–ø–∏—à–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –º–µ—Å—è—Ü–∞ (—Å–º. —Å–ø–∏—Å–æ–∫) –î–í–ê –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –º—è–≥–∫–∞—è, –æ–±–æ–¥—Ä—è—é—â–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∞.
–ë–µ–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤. –ë–µ–∑ —ç–º–æ–¥–∑–∏. –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
–í –∫–∞–∂–¥–æ–º —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ —Ñ–∞–∑—É –∏ –Ω–∞–±–æ—Ä –∑–Ω–∞–∫–æ–≤; –∏–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–∞ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ —Ñ—Ä–∞–∑ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏.

–û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –≤ JSON:
{{"segments":[{{"id":1,"desc":"—Ç–µ–∫—Å—Ç"}}, ...]}}
–ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON.

–ú–µ—Å—è—Ü: {month_title}
–ü–µ—Ä–∏–æ–¥—ã:
{mk_list(groups)}
"""
    result: Dict[int, str] = {}
    got = _gemini_json(base_prompt, retry=GEMINI_RETRY_ATTEMPTS)
    if got and isinstance(got.get("segments"), list):
        for seg in got["segments"]:
            try:
                sid = int(seg.get("id"))
                desc = (seg.get("desc") or "").strip()
                if sid and desc:
                    result[sid] = desc
            except Exception:
                pass

    # –¥–æ—Å–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö
    missing = [g for g in groups if g.id not in result]
    rounds = 0
    while missing and rounds < GEMINI_RETRY_ATTEMPTS:
        rounds += 1
        time.sleep(GEMINI_ROUND_PAUSE)
        sub_prompt = f"""–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è. –í–µ—Ä–Ω–∏ –û–ü–ò–°–ê–ù–ò–Ø —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –°–¢–†–û–ì–û —Ç–æ—Ç –∂–µ JSON (–±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –±–µ–∑ Markdown):
{{"segments":[{{"id":<id>,"desc":"–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"}}, ...]}}

–ü–µ—Ä–∏–æ–¥—ã:
{mk_list(missing)}
"""
        got2 = _gemini_json(sub_prompt, retry=1)
        if got2 and isinstance(got2.get("segments"), list):
            for seg in got2["segments"]:
                try:
                    sid = int(seg.get("id"))
                    desc = (seg.get("desc") or "").strip()
                    if sid and desc:
                        result[sid] = desc
                except Exception:
                    pass
        missing = [g for g in groups if g.id not in result]

    return result

# --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–∞ ----------------------------------------------

def build_month(year: int, month: int) -> Dict[str, Dict[str, Any]]:
    last_day = calendar.monthrange(year, month)[1]
    days: Dict[str, Dict[str, Any]] = {}

    favorables = load_favorables_for(month, year)

    for d in range(1, last_day + 1):
        dt = pendulum.datetime(year, month, d, tz=TZ)
        key = dt.to_date_string()  # YYYY-MM-DD

        ph_name = moon_phase_name(dt)
        ph_emoji = moon_phase_emoji(dt)
        sign = moon_sign(dt, TZ)

        # VoC: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –°–¢–ê–†–¢ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
        voc = voc_for_day(dt, TZ)

        days[key] = {
            "phase_name": ph_name,
            "phase": f"{ph_emoji} {ph_name}".strip(),
            "sign": sign,
            "long_desc": "",                  # –∑–∞–ø–æ–ª–Ω–∏–º –Ω–∏–∂–µ
            "void_of_course": voc,            # –ª–∏–±–æ None
            "favorable_days": favorables,     # –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –º–µ—Å—è—Ü–∞
        }

    # 1) –û–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ Gemini (–≤—Å–µ –±–ª–æ–∫–∏ —Å—Ä–∞–∑—É + –¥–æ—Å–ø—Ä–æ—Å)
    by_id = describe_month_via_gemini(days)

    # 2) –†–∞–∑–¥–∞—ë–º –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ñ–æ–ª–±—ç–∫ –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
    groups = _group_month_by_phase(days)
    for g in groups:
        text = (by_id.get(g.id) or "").strip()
        if not text:
            # —Å—Ç–∞—Ä—ã–π –ª—é–±–∏–º—ã–π —Ñ–æ–ª–±—ç–∫
            text = fallback_two_sentences(g.phase, month)

        cursor = pendulum.parse(g.start)
        end_dt = pendulum.parse(g.end).date()
        while cursor.date() <= end_dt:
            key = cursor.to_date_string()
            if key in days:
                days[key]["long_desc"] = text
            cursor = cursor.add(days=1)

    return days

# --- main -------------------------------------------------------------------

def main() -> int:
    # –î–∞—Ç–∞ ¬´—Å–µ–≥–æ–¥–Ω—è¬ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ workflow (—Å–º. WORK_DATE)
    today = pendulum.today(TZ)
    year, month = today.year, today.month

    data = build_month(year, month)

    with open(OUT_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    print(f"Wrote {OUT_FILE}: {len(data)} days, TZ={TZ.name}")
    return 0

if __name__ == "__main__":
    raise SystemExit(main())