#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
gen_lunar_calendar.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∞–π–ª lunar_calendar.json —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏, –Ω—É–∂–Ω—ã–º–∏ –∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö
–ø–æ—Å—Ç–æ–≤ (–∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–≤–µ—Ç—ã) –∏ –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ (–¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–∑ + VoC).

‚Ä¢ phase, percent, sign, phase_time
‚Ä¢ advice      ‚Äì 3 —Å—Ç—Ä–æ–∫–∏ ¬´üíº ‚Ä¶¬ª, ¬´‚õî ‚Ä¶¬ª, ¬´ü™Ñ ‚Ä¶¬ª
‚Ä¢ long_desc   ‚Äì 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ñ–∞–∑—É (—Ä–∞–∑–æ–≤–æ –Ω–∞ –º–µ—Å—è—Ü)
‚Ä¢ void_of_course: {start, end}  (UTC ‚Üí Asia/Nicosia –≤ JSON)
‚Ä¢ favorable_days / unfavorable_days ‚Äì —Å–ª–æ–≤–∞—Ä–∏ CATS

ENV:
  GEN_SKIP_SHORT = "1"  ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ (–¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞)
"""

import os, json, math, asyncio, random, re
from pathlib import Path
from typing  import Dict, Any, List, Tuple

import pendulum, swisseph as swe
from gpt import gpt_complete  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –æ–±—ë—Ä—Ç–∫—É

TZ = pendulum.timezone("Asia/Nicosia")
SKIP_SHORT = os.getenv("GEN_SKIP_SHORT", "0") == "1"

EMO = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ":"üåë","–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":"üåí","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåì","–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞":"üåî",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":"üåï","–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞":"üåñ","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåó","–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":"üåò",
}

FALLBACK_LONG: Dict[str,str] = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ"        :"–ù—É–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ —Ü–∏–∫–ª–∞ ‚Äî –∑–∞–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –º–µ—á—Ç—ã –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.",
    "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø"    :"–≠–Ω–µ—Ä–≥–∏—è –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è ‚Äî –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.",
    "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"  :"–ü–µ—Ä–≤—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ—è–≤–∏–ª–∏—Å—å, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∫—É—Ä—Å –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ.",
    "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"    :"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã, —É–∫—Ä–µ–ø–ª—è–π—Ç–µ —Å–≤—è–∑–∏.",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"       :"–ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è: –º–∞–∫—Å–∏–º—É–º —ç–º–æ—Ü–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
    "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"   :"–û—Ç–ø—É—Å–∫–∞–µ–º –ª–∏—à–Ω–µ–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–ª–∞, –Ω–∞–≤–æ–¥–∏–º –ø–æ—Ä—è–¥–æ–∫.",
    "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞, —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.",
    "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø"   :"–û—Ç–¥—ã—Ö, —Ä–µ—Ç—Ä–∏—Ç—ã, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–º—É —Ü–∏–∫–ª—É.",
}

# ¬´–∫–∞—Ä–º–∞–Ω–Ω—ã–µ¬ª –¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–≤–æ–∏ —Ç–∞–±–ª–∏—Ü—ã)
CATS = {
    "general" :{"favorable":[2,3,9,27],   "unfavorable":[13,14,24]},
    "haircut" :{"favorable":[2,3,9],      "unfavorable":[]},
    "travel"  :{"favorable":[4,5],        "unfavorable":[]},
    "shopping":{"favorable":[1,2,7],      "unfavorable":[]},
    "health"  :{"favorable":[20,21,27],   "unfavorable":[]},
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def jd2dt(jd: float) -> pendulum.DateTime:
    """JD ‚Üí pendulum UTC"""
    return pendulum.from_timestamp((jd - 2440587.5) * 86400, tz="UTC")

def phase_name(angle: float) -> str:
    idx = int(((angle + 22.5) % 360) // 45)
    return [
        "–ù–æ–≤–æ–ª—É–Ω–∏–µ","–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å","–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞",
        "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ","–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å","–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø"
    ][idx]

def compute_phase(jd: float) -> Tuple[str,int,str]:
    lon_s = swe.calc_ut(jd, swe.SUN)[0][0]
    lon_m = swe.calc_ut(jd, swe.MOON)[0][0]
    ang   = (lon_m - lon_s) % 360
    illum = int(round((1 - math.cos(math.radians(ang))) / 2 * 100))
    name  = phase_name(ang)
    sign  = ["–û–≤–µ–Ω","–¢–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã","–†–∞–∫","–õ–µ–≤","–î–µ–≤–∞",
             "–í–µ—Å—ã","–°–∫–æ—Ä–ø–∏–æ–Ω","–°—Ç—Ä–µ–ª–µ—Ü","–ö–æ–∑–µ—Ä–æ–≥","–í–æ–¥–æ–ª–µ–π","–†—ã–±—ã"][int(lon_m // 30) % 12]
    return name, illum, sign

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Void-of-Course (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ASPECTS = {0,60,90,120,180}          # –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞–∂–æ—Ä—ã
ORBIS   = 1.5                        # ¬±–≥—Ä–∞–¥—É—Å—ã –¥–ª—è –∞—Å–ø–µ–∫—Ç–∞
PLANETS = [swe.SUN,swe.MERCURY,swe.VENUS,swe.MARS,
           swe.JUPITER,swe.SATURN,swe.URANUS,swe.NEPTUNE,swe.PLUTO]

def _has_major_lunar_aspect(jd: float) -> bool:
    """–ï—Å—Ç—å –ª–∏ —Ç–æ—á–Ω—ã–π –ª—É–Ω–Ω—ã–π –º–∞–∂–æ—Ä–Ω—ã–π –∞—Å–ø–µ–∫—Ç –∫ –ø–ª–∞–Ω–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?"""
    lon_m = swe.calc_ut(jd, swe.MOON)[0][0]
    for p in PLANETS:
        lon_p = swe.calc_ut(jd, p)[0][0]
        a = abs((lon_m - lon_p + 180) % 360 - 180)
        for asp in ASPECTS:
            if abs(a - asp) <= ORBIS:
                return True
    return False

def compute_voc_for_day(jd_start: float) -> Dict[str,str]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª Void-of-Course –≤–Ω—É—Ç—Ä–∏ —Å—É—Ç–æ–∫ jd_start (00:00 UT).
    –ê–ª–≥–æ—Ä–∏—Ç–º:
      1) –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –õ—É–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–Ω–∞–∫ (sign_change_jd) –≤–ø–ª–æ—Ç—å –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—É—Ç–æ–∫ –≤–ø–µ—Ä—ë–¥,
         —Å –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º —à–∞–≥–æ–º –∏ —É—Ç–æ—á–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º;
      2) –æ—Ç –Ω–µ–≥–æ –∏–¥—ë–º –Ω–∞–∑–∞–¥ —Å —à–∞–≥–æ–º 10 –º–∏–Ω, –ø–æ–∫–∞ —Å–Ω–æ–≤–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º –∞—Å–ø–µ–∫—Ç ‚Äî
         —ç—Ç–æ –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Å–ø–µ–∫—Ç–∞ ‚Üí –Ω–∞—á–∞–ª–æ VoC.
    –ï—Å–ª–∏ –æ–±–∞ –∫—Ä–∞—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ç–µ–∫—É—â–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å—É—Ç–∫–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–µ), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º start/end = None.
    """
    # 1) –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∑–Ω–∞–∫–∞ (—Å–∫–∞–Ω –≤–ø–µ—Ä—ë–¥ –¥–æ 3 —Å—É—Ç–æ–∫, —à–∞–≥ 5 –º–∏–Ω—É—Ç)
    sign0 = int(swe.calc_ut(jd_start, swe.MOON)[0][0] // 30)
    step = 5 / 1440.0          # 5 –º–∏–Ω—É—Ç –≤ –¥–Ω—è—Ö
    max_ahead_days = 3.0       # –∑–∞—â–∏—Ç–Ω—ã–π –ø—Ä–µ–¥–µ–ª
    jd = jd_start
    sign_change = None
    while True:
        jd += step
        if jd - jd_start > max_ahead_days:
            return {"start": None, "end": None}
        if int(swe.calc_ut(jd, swe.MOON)[0][0] // 30) != sign0:
            # —É—Ç–æ—á–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É —Å–º–µ–Ω—ã –∑–Ω–∞–∫–∞ –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –¥–æ ~1 –º–∏–Ω—É—Ç—ã
            lo, hi = jd - step, jd
            for _ in range(10):
                mid = (lo + hi) / 2
                if int(swe.calc_ut(mid, swe.MOON)[0][0] // 30) != sign0:
                    hi = mid
                else:
                    lo = mid
            sign_change = hi
            break

    # 2) –∏–¥—ë–º –Ω–∞–∑–∞–¥ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Å–ø–µ–∫—Ç–∞
    jd_back = sign_change
    step_b  = 10 / 1440.0      # 10 –º–∏–Ω—É—Ç
    limit_back = sign_change - 1.5  # –Ω–µ –¥–∞–ª—å—à–µ 1.5 —Å—É—Ç–æ–∫ –Ω–∞–∑–∞–¥
    while jd_back > max(jd_start, limit_back) and not _has_major_lunar_aspect(jd_back):
        jd_back -= step_b
    voc_start = jd_back
    voc_end   = sign_change

    start_dt = jd2dt(voc_start).in_tz(TZ)
    end_dt   = jd2dt(voc_end).in_tz(TZ)

    cur_day = jd2dt(jd_start).in_tz(TZ).date()
    if start_dt.date() != cur_day and end_dt.date() != cur_day:
        return {"start": None, "end": None}

    return {
        "start": start_dt.format("DD.MM HH:mm"),
        "end"  : end_dt.format("DD.MM HH:mm")
    }

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_LATIN = re.compile(r"[A-Za-z]+")
def _sanitize_ru(s: str) -> str:
    # –≤—ã—á–∏—â–∞–µ–º –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    s = _LATIN.sub("", s)
    s = re.sub(r"\s+", " ", s).strip()
    return s

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GPT-helpers (—á–µ—Ä–µ–∑ –æ–±—ë—Ä—Ç–∫—É) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def gpt_short(date: str, phase: str) -> List[str]:
    """3 –æ–¥–Ω–æ-—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ —Å emoji –∏–ª–∏ fallback"""
    system = (
        "–¢—ã –ø–∏—à–µ—à—å –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–∏–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–ë–µ–∑ –∞–Ω–≥–ª–∏—Ü–∏–∑–º–æ–≤ –∏ —à—Ç–∞–º–ø–æ–≤. –ö–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ä–æ–≤–Ω–æ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, "
        "–Ω–∞—á–∏–Ω–∞–π —Å –Ω—É–∂–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Ç–∏–ø–∞ '–°–æ–≤–µ—Ç:'."
    )
    prompt = (
        f"–î–∞—Ç–∞ {date}, —Ñ–∞–∑–∞ {phase}. "
        "–î–∞–π 3 –ª–∞–∫–æ–Ω–∏—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–∞–∂–¥–∞—è ‚Äî –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Å emoji: "
        "üíº (—Ä–∞–±–æ—Ç–∞), ‚õî (–æ—Ç–ª–æ–∂–∏—Ç—å), ü™Ñ (—Ä–∏—Ç—É–∞–ª). "
        "–ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞."
    )
    try:
        txt = gpt_complete(prompt=prompt, system=system, temperature=0.65, max_tokens=300)
        lines = [ _sanitize_ru(l).strip() for l in (txt or "").splitlines() if _sanitize_ru(l).strip() ]
        if len(lines) >= 2:
            return lines[:3]
    except Exception:
        pass
    # fallback
    return [
        "üíº –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º.",
        "‚õî –û—Ç–ª–æ–∂–∏ –∫—Ä—É–ø–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.",
        "ü™Ñ 5-–º–∏–Ω—É—Ç–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è.",
    ]

async def gpt_long(name: str, month: str) -> str:
    """–û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"""
    system = (
        "–¢—ã –ø–∏—à–µ—à—å –∫—Ä–∞—Ç–∫–∏–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ø–æ—è—Å–Ω–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
        "–ë–µ–∑ –∞–Ω–≥–ª–∏—Ü–∏–∑–º–æ–≤, –±–µ–∑ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ ¬´—ç–Ω–µ—Ä–≥–∏—è –í—Å–µ–ª–µ–Ω–Ω–æ–π¬ª. "
        "–ù–µ —É–ø–æ–º–∏–Ω–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞; –≥–æ–≤–æ—Ä–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ: ¬´–≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥¬ª, ¬´—ç—Ç–∞ —Ñ–∞–∑–∞¬ª."
    )
    prompt = (
        f"–§–∞–∑–∞: {name}. "
        "–î–∞–π 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–ø–∏—Å—ã–≤–∞—é—â–∏—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É –ø–µ—Ä–∏–æ–¥–∞. "
        "–¢–æ–Ω —Å–ø–æ–∫–æ–π–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π. –ë–µ–∑ –∫–ª–∏—à–µ, –≤—Å—ë –ø–æ-—Ä—É—Å—Å–∫–∏."
    )
    try:
        txt = gpt_complete(prompt=prompt, system=system, temperature=0.7, max_tokens=400)
        if txt:
            return _sanitize_ru(txt.strip())
    except Exception:
        pass
    return FALLBACK_LONG[name]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def generate(year: int, month: int) -> Dict[str,Any]:
    swe.set_ephe_path(".")                      # –≥–¥–µ –ª–µ–∂–∞—Ç efemeris
    first = pendulum.date(year, month, 1)
    last  = first.end_of('month')

    cal: Dict[str,Any] = {}
    long_tasks, short_tasks = {}, []

    d = first
    while d <= last:
        jd = swe.julday(d.year, d.month, d.day, 0.0)

        # –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        name, illum, sign = compute_phase(jd)
        emoji       = EMO[name]
        phase_time  = jd2dt(jd).in_tz(TZ).to_iso8601_string()

        # GPT async-–∑–∞–¥–∞—á–∏
        if not SKIP_SHORT:
            short_tasks.append(asyncio.create_task(gpt_short(d.to_date_string(), name)))
        if name not in long_tasks:
            # –º–µ—Å—è—Ü –≤ –ø–æ–¥—Å–∫–∞–∑–∫—É –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º (—á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞–ª –∞–Ω–≥–ª–∏—Ü–∏–∑–º—ã)
            long_tasks[name] = asyncio.create_task(gpt_long(name, ""))

        # Void-of-Course (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ, –≤–Ω—É—Ç—Ä–∏ –¥–∞—Ç—ã d)
        voc = compute_voc_for_day(jd)

        cal[d.to_date_string()] = {
            "phase_name"     : name,
            "phase"          : f"{emoji} {name} , {sign}",  # –ø—Ä–µ–∂–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
            "percent"        : illum,
            "sign"           : sign,
            "phase_time"     : phase_time,
            "advice"         : [],          # –ø–æ–∑–∂–µ (–∏–ª–∏ –ø—É—Å—Ç–æ –ø—Ä–∏ SKIP_SHORT)
            "long_desc"      : "",          # –ø–æ–∑–∂–µ
            "void_of_course" : voc,
            "favorable_days" : CATS,
            "unfavorable_days": CATS,
        }
        d = d.add(days=1)

    # –∂–¥—ë–º GPT (–∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–≤–µ—Ç—ã) ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–∞–ª–∏
    if not SKIP_SHORT and short_tasks:
        short_ready = await asyncio.gather(*short_tasks)
        for idx, day in enumerate(sorted(cal)):
            cal[day]["advice"] = short_ready[idx]

    # –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ –Ω–∞ —Ñ–∞–∑—É
    for ph_name, tsk in long_tasks.items():
        try:
            long_txt = await tsk
        except Exception:
            long_txt = FALLBACK_LONG[ph_name]
        for rec in cal.values():
            if rec["phase_name"] == ph_name:
                rec["long_desc"] = long_txt

    return cal

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ entry-point ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _main():
    today = pendulum.today()
    data  = await generate(today.year, today.month)
    Path("lunar_calendar.json").write_text(
        json.dumps(data, ensure_ascii=False, indent=2), 'utf-8')
    print("‚úÖ lunar_calendar.json —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")

if __name__ == "__main__":
    asyncio.run(_main())