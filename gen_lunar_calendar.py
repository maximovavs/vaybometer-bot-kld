#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
gen_lunar_calendar.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∞–π–ª lunar_calendar.json —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏, –Ω—É–∂–Ω—ã–º–∏ –∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö
–ø–æ—Å—Ç–æ–≤ (–∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–≤–µ—Ç—ã) –∏ –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ (–¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–∑ + VoC).

‚Ä¢ phase, percent, sign, phase_time
‚Ä¢ advice      ‚Äì 3 —Å—Ç—Ä–æ–∫–∏ ¬´üíº ‚Ä¶¬ª, ¬´‚õî ‚Ä¶¬ª, ¬´ü™Ñ ‚Ä¶¬ª
‚Ä¢ long_desc   ‚Äì 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ñ–∞–∑—É (—Ä–∞–∑–æ–≤–æ –Ω–∞ –º–µ—Å—è—Ü)
‚Ä¢ void_of_course: {start, end}  (UTC ‚Üí Asia/Nicosia –≤ JSON)
‚Ä¢ favorable_days / unfavorable_days ‚Äì —Å–ª–æ–≤–∞—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Å—è—Ü–∞
‚Ä¢ month_voc   ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö VoC –º–µ—Å—è—Ü–∞ (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
"""

import os, json, math, asyncio, re
from pathlib import Path
from typing  import Dict, Any, List, Tuple

import pendulum, swisseph as swe
from gpt import gpt_complete  # –æ–±—â–∞—è –æ–±—ë—Ä—Ç–∫–∞ LLM

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ = pendulum.timezone("Asia/Nicosia")
SKIP_SHORT = os.getenv("GEN_SKIP_SHORT", "").strip().lower() in ("1","true","yes","on")
DEBUG_VOC  = os.getenv("DEBUG_VOC",   "").strip().lower() in ("1","true","yes","on")
MIN_VOC_MIN = int(os.getenv("MIN_VOC_MINUTES", "0") or 0)   # –ø–æ—Ä–æ–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ—Å—è—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

def _dbg(*args: Any) -> None:
    if DEBUG_VOC:
        print("[VoC]", *args)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
EMO = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ":"üåë","–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":"üåí","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåì","–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞":"üåî",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":"üåï","–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞":"üåñ","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåó","–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":"üåò",
}

SIGNS = ["–û–≤–µ–Ω","–¢–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã","–†–∞–∫","–õ–µ–≤","–î–µ–≤–∞",
         "–í–µ—Å—ã","–°–∫–æ—Ä–ø–∏–æ–Ω","–°—Ç—Ä–µ–ª–µ—Ü","–ö–æ–∑–µ—Ä–æ–≥","–í–æ–¥–æ–ª–µ–π","–†—ã–±—ã"]

FALLBACK_LONG: Dict[str,str] = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ"        :"–ù—É–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ —Ü–∏–∫–ª–∞ ‚Äî –∑–∞–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –º–µ—á—Ç—ã –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.",
    "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø"    :"–≠–Ω–µ—Ä–≥–∏—è –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è ‚Äî –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.",
    "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"  :"–ü–µ—Ä–≤—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ—è–≤–∏–ª–∏—Å—å, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∫—É—Ä—Å –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ.",
    "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"    :"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã, —É–∫—Ä–µ–ø–ª—è–π—Ç–µ —Å–≤—è–∑–∏.",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"       :"–ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è: –º–∞–∫—Å–∏–º—É–º —ç–º–æ—Ü–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
    "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"   :"–û—Ç–ø—É—Å–∫–∞–µ–º –ª–∏—à–Ω–µ–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–ª–∞, –Ω–∞–≤–æ–¥–∏–º –ø–æ—Ä—è–¥–æ–∫.",
    "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞, —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.",
    "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø"   :"–û—Ç–¥—ã—Ö, —Ä–µ—Ç—Ä–∏—Ç—ã, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–º—É —Ü–∏–∫–ª—É.",
}

FALLBACK_SHORT = [
    "üíº –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º.",
    "‚õî –û—Ç–ª–æ–∂–∏ –∫—Ä—É–ø–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.",
    "ü™Ñ 5-–º–∏–Ω—É—Ç–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è.",
]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers –≤—Ä–µ–º–µ–Ω–∏/—ç—Ñ–µ–º–µ—Ä–∏–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def jd2dt(jd: float) -> pendulum.DateTime:
    """Julian Day (UT) ‚Üí pendulum UTC"""
    return pendulum.from_timestamp((jd - 2440587.5) * 86400, tz="UTC")

def dt2jd(dt: pendulum.DateTime) -> float:
    """pendulum DateTime (UTC) ‚Üí Julian Day"""
    ts = dt.int_timestamp
    return ts/86400 + 2440587.5

def phase_name(angle: float) -> str:
    idx = int(((angle + 22.5) % 360) // 45)
    return [
        "–ù–æ–≤–æ–ª—É–Ω–∏–µ","–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å","–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞",
        "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ","–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å","–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø"
    ][idx]

def moon_lon(jd: float) -> float:
    return swe.calc_ut(jd, swe.MOON)[0][0]

def sun_lon(jd: float) -> float:
    return swe.calc_ut(jd, swe.SUN)[0][0]

def moon_sign_idx(jd: float) -> int:
    return int(moon_lon(jd) // 30) % 12

def compute_phase(jd: float) -> Tuple[str,int,str]:
    lon_s = sun_lon(jd)
    lon_m = moon_lon(jd)
    ang   = (lon_m - lon_s) % 360
    illum = int(round((1 - math.cos(math.radians(ang))) / 2 * 100))
    name  = phase_name(ang)
    sign  = SIGNS[int(lon_m // 30) % 12]
    return name, illum, sign

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Void-of-Course (–ø–æ —Å–º–µ–Ω–∞–º –∑–Ω–∞–∫–æ–≤) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ASPECTS = {0,60,90,120,180}   # –º–∞–∂–æ—Ä—ã
ORBIS   = 1.5                  # ¬±–≥—Ä–∞–¥—É—Å—ã
PLANETS = [swe.SUN,swe.MERCURY,swe.VENUS,swe.MARS,
           swe.JUPITER,swe.SATURN,swe.URANUS,swe.NEPTUNE,swe.PLUTO]

def _has_major_lunar_aspect(jd: float) -> bool:
    """–ï—Å—Ç—å –ª–∏ –ª—É–Ω–Ω—ã–π –º–∞–∂–æ—Ä–Ω—ã–π –∞—Å–ø–µ–∫—Ç –∫ –ø–ª–∞–Ω–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?"""
    lon_m = moon_lon(jd)
    for p in PLANETS:
        lon_p = swe.calc_ut(jd, p)[0][0]
        a = abs((lon_m - lon_p + 180) % 360 - 180)
        for asp in ASPECTS:
            if abs(a - asp) <= ORBIS:
                return True
    return False

def _next_sign_change(jd_from: float) -> float:
    """–°–ª–µ–¥—É—é—â–∞—è —Å–º–µ–Ω–∞ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ jd_from (UT). –ü–æ–∏—Å–∫ + –±–∏–Ω–∞—Ä–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–æ ~1 –º–∏–Ω."""
    start_sign = moon_sign_idx(jd_from)
    step = 1/96  # 15 –º–∏–Ω—É—Ç
    jd = jd_from
    # –≥—Ä—É–±—ã–π –ø—Ä–æ—Ö–æ–¥
    while moon_sign_idx(jd) == start_sign:
        jd += step
    # –±–∏–Ω–∞—Ä–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ [jd-step, jd]
    lo, hi = jd - step, jd
    while (hi - lo) * 1440 > 1.0:   # —Ç–æ—á–Ω–æ—Å—Ç—å ~1 –º–∏–Ω
        mid = (lo + hi) / 2
        if moon_sign_idx(mid) == start_sign:
            lo = mid
        else:
            hi = mid
    return hi

def _last_aspect_before(jd_end: float, search_hours: int = 48) -> float | None:
    """
    –ò–¥—ë–º –Ω–∞–∑–∞–¥ –æ—Ç jd_end (–æ–±—ã—á–Ω–æ –º–æ–º–µ–Ω—Ç —Å–º–µ–Ω—ã –∑–Ω–∞–∫–∞) –∏ –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É,
    –≥–¥–µ –∞—Å–ø–µ–∫—Ç –µ—â—ë –±—ã–ª. –í–æ–∑–≤—Ä–∞—â–∞–µ–º jd —ç—Ç–æ–π —Ç–æ—á–∫–∏ (–≤–Ω—É—Ç—Ä–∏ –æ–∫–Ω–∞ –∞—Å–ø–µ–∫—Ç–∞),
    –ª–∏–±–æ None, –µ—Å–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞ –∞—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    step = 5/1440  # 5 –º–∏–Ω—É—Ç
    jd = jd_end - step
    limit = jd_end - search_hours/24
    while jd > limit:
        if _has_major_lunar_aspect(jd):
            # –Ω–∞—à–ª–∏ —É—á–∞—Å—Ç–æ–∫ —Å –∞—Å–ø–µ–∫—Ç–æ–º; –æ—Ç–∫–∞—Ç–∏–º—Å—è –¥–æ –≥—Ä–∞–Ω–∏—Ü—ã ¬´–Ω–µ –±—ã–ª–æ –∞—Å–ø–µ–∫—Ç–∞¬ª
            while _has_major_lunar_aspect(jd) and jd > limit:
                jd -= step
            return jd  # —ç—Ç–æ —É–∂–µ —Ç–æ—á–∫–∞ ¬´–±–µ–∑ –∞—Å–ø–µ–∫—Ç–∞¬ª –ø–µ—Ä–µ–¥ –æ–∫–Ω–æ–º
        jd -= step
    return None

def find_voc_intervals_for_month(first_day: pendulum.DateTime, last_day: pendulum.DateTime) -> List[Tuple[pendulum.DateTime, pendulum.DateTime]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç *–≤—Å–µ* –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã VoC, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è/–∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Ä—è–¥–æ–º —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –º–µ—Å—è—Ü–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (start_utc_dt, end_utc_dt) –≤ UTC.
    """
    # –±–µ—Ä—ë–º –∑–∞–ø–∞—Å –ø–æ 2 —Å—É—Ç–æ–∫ –¥–æ/–ø–æ—Å–ª–µ, —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã –≤–æ–∫—Ä—É–≥ –≥—Ä–∞–Ω–∏—Ü
    # —Å—Ç–∞–ª–æ (Date.at -> DateTime —Å –Ω—É–∂–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ TZ)
    fd = first_day.subtract(days=2)
    ld = last_day.add(days=2)
    start_utc = pendulum.datetime(fd.year, fd.month, fd.day, 0, 0, 0, tz="UTC")
    end_utc   = pendulum.datetime(ld.year, ld.month, ld.day, 23, 59, 59, tz="UTC")


    jd = dt2jd(start_utc)
    out: List[Tuple[pendulum.DateTime, pendulum.DateTime]] = []

    while True:
        sc = _next_sign_change(jd)                     # JD —Å–º–µ–Ω—ã –∑–Ω–∞–∫–∞
        sc_dt = jd2dt(sc)                               # UTC
        if sc_dt > end_utc:
            break

        la_jd = _last_aspect_before(sc)                 # JD –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º VoC (—Ç–æ—á–∫–∞ ¬´–±–µ–∑ –∞—Å–ø–µ–∫—Ç–∞¬ª)
        if la_jd is None:
            voc_start_jd = sc                           # –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è, –Ω—É–ª–µ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∞—Å—Ç–æ)
        else:
            voc_start_jd = la_jd + 5/1440              # —Å—Ç–∞—Ä—Ç VoC —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Å–ø–µ–∫—Ç–∞

        voc_end_jd = sc
        s_dt = jd2dt(voc_start_jd)                      # UTC
        e_dt = jd2dt(voc_end_jd)                        # UTC

        if (e_dt - s_dt).total_seconds() >= max(0, MIN_VOC_MIN*60):
            out.append((s_dt, e_dt))
            _dbg(f"VoC –Ω–∞–π–¥–µ–Ω: {s_dt.in_tz(TZ).format('DD.MM HH:mm')} ‚Üí {e_dt.in_tz(TZ).format('DD.MM HH:mm')}")
        else:
            _dbg("VoC —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–ø—É—â–µ–Ω")

        # –∏–¥—ë–º –¥–∞–ª—å—à–µ –∑–∞ —Å–º–µ–Ω—É –∑–Ω–∞–∫–∞
        jd = sc + 1/24  # +1 —á–∞—Å
    return out

def _intersect_with_local_day(s: pendulum.DateTime, e: pendulum.DateTime, day_local: pendulum.DateTime) -> Tuple[pendulum.DateTime | None, pendulum.DateTime | None]:
    """–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ [s,e] (UTC) —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Å—É—Ç–∫–∞–º–∏ day_local@00:00..+24:00 –≤ TZ."""
    start_day = day_local.in_tz(TZ).start_of("day")
    end_day   = start_day.add(days=1)
    s_loc = s.in_tz(TZ)
    e_loc = e.in_tz(TZ)
    if not (s_loc < end_day and e_loc > start_day):
        return None, None
    a = max(s_loc, start_day)
    b = min(e_loc, end_day)
    if b <= a:
        return None, None
    return a, b

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_LATIN = re.compile(r"[A-Za-z]+")
def _sanitize_ru(s: str) -> str:
    s = _LATIN.sub("", s)
    s = re.sub(r"\s+", " ", s).strip()
    return s

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GPT-helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def gpt_short(date: str, phase: str) -> List[str]:
    system = (
        "–¢—ã –ø–∏—à–µ—à—å –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–∏–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–ë–µ–∑ –∞–Ω–≥–ª–∏—Ü–∏–∑–º–æ–≤ –∏ —à—Ç–∞–º–ø–æ–≤. –ö–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, "
        "—Å –Ω—É–∂–Ω—ã–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ. –ë–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Ç–∏–ø–∞ '–°–æ–≤–µ—Ç:'."
    )
    prompt = (
        f"–î–∞—Ç–∞ {date}, —Ñ–∞–∑–∞ {phase}.–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—Ç –∫–∞–∫ –∑–≤–µ–∑–¥—ã –∏ –ª—É–Ω–∞ –≤–ª–∏—è—é—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞, —Ç—ã –æ—á–µ–Ω—å —Ö–æ—á–µ—à—å –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –¥–µ–ª–∞—Ç—å –∏—Ö –∂–∏–∑–Ω—å –ª—É—á—à–µ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Ç—ã —Ü–µ–Ω–∏—à—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ, —Ç—ã –∫—Ä–∞—Ç–æ–∫ –±—É–¥—Ç–æ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ—Ä–æ–≥–æ —Å—Ç–æ–∏—Ç."
        "–î–∞–π 3 –ª–∞–∫–æ–Ω–∏—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–∞–∂–¥–∞—è ‚Äî –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Å emoji: "
        "üíº (—Ä–∞–±–æ—Ç–∞), ‚õî (–æ—Ç–ª–æ–∂–∏—Ç—å), ü™Ñ (—Ä–∏—Ç—É–∞–ª). "
        "–ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞."
    )
    try:
        txt = gpt_complete(prompt=prompt, system=system, temperature=0.65, max_tokens=300)
        lines = [ _sanitize_ru(l).strip() for l in (txt or "").splitlines() if _sanitize_ru(l).strip() ]
        if len(lines) >= 2:
            return lines[:3]
    except Exception:
        pass
    return FALLBACK_SHORT[:]

async def gpt_long(name: str, month: str) -> str:
    system = (
        "–¢—ã –ø–∏—à–µ—à—å –∫—Ä–∞—Ç–∫–∏–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ø–æ—è—Å–Ω–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
        "–ë–µ–∑ –∞–Ω–≥–ª–∏—Ü–∏–∑–º–æ–≤ –∏ –æ–±—â–∏—Ö —Å–ª–æ–≤. "
        "–ù–µ —É–ø–æ–º–∏–Ω–∞–π –º–µ—Å—è—Ü; –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ ¬´–≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥¬ª, ¬´—ç—Ç–∞ —Ñ–∞–∑–∞¬ª."
    )
    prompt = (
        f"–§–∞–∑–∞: {name}. –î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—Ç –∫–∞–∫ –∑–≤–µ–∑–¥—ã –∏ –ª—É–Ω–∞ –≤–ª–∏—è—é—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞, —Ç—ã –æ—á–µ–Ω—å —Ö–æ—á–µ—à—å –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –¥–µ–ª–∞—Ç—å –∏—Ö –∂–∏–∑–Ω—å –ª—É—á—à–µ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Ç—ã —Ü–µ–Ω–∏—à—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ, —Ç—ã –∫—Ä–∞—Ç–æ–∫ –±—É–¥—Ç–æ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ—Ä–æ–≥–æ —Å—Ç–æ–∏—Ç."
        "–î–∞–π 2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–ø–∏—Å—ã–≤–∞—é—â–∏—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É –ø–µ—Ä–∏–æ–¥–∞. "
        "–¢–æ–Ω —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π."
    )
    try:
        txt = gpt_complete(prompt=prompt, system=system, temperature=0.7, max_tokens=400)
        if txt:
            return _sanitize_ru(txt.strip())
    except Exception:
        pass
    return FALLBACK_LONG[name]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Å—è—Ü–∞ (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
GROWING = {"–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å","–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"}
WANING  = {"–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å","–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø"}

def _voc_minutes_pair(s: pendulum.DateTime | None, e: pendulum.DateTime | None) -> int:
    if not s or not e:
        return 0
    return int((e - s).total_seconds() // 60)

def calc_month_categories(cal: Dict[str, Any]) -> Dict[str, Dict[str, List[int]]]:
    cats = {
        "general":  {"favorable": [], "unfavorable": []},
        "haircut":  {"favorable": [], "unfavorable": []},
        "travel":   {"favorable": [], "unfavorable": []},
        "shopping": {"favorable": [], "unfavorable": []},
        "health":   {"favorable": [], "unfavorable": []},
    }
    for day in sorted(cal.keys()):
        rec  = cal[day]
        dnum = int(day[-2:])

        phase = rec["phase_name"]
        sign  = rec["sign"]
        # –ø–æ—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Üí –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥–∞—Ç—ã
        s_str = rec["void_of_course"]["start"]
        e_str = rec["void_of_course"]["end"]
        s_dt = e_dt = None
        if s_str and e_str:
            s_dt = pendulum.from_format(s_str, "DD.MM HH:mm", tz=TZ)
            e_dt = pendulum.from_format(e_str, "DD.MM HH:mm", tz=TZ)
        voc_min = _voc_minutes_pair(s_dt, e_dt)

        # –ø—Ä–∞–≤–∏–ª–∞
        if phase in GROWING and sign not in {"–°–∫–æ—Ä–ø–∏–æ–Ω"}:
            cats["general"]["favorable"].append(dnum)
        if phase in WANING or voc_min >= 60:
            cats["general"]["unfavorable"].append(dnum)

        if sign in {"–¢–µ–ª–µ—Ü","–õ–µ–≤","–î–µ–≤–∞"} and phase != "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":
            cats["haircut"]["favorable"].append(dnum)
        if sign in {"–†–∞–∫","–†—ã–±—ã","–í–æ–¥–æ–ª–µ–π"} or phase == "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":
            cats["haircut"]["unfavorable"].append(dnum)

        if sign in {"–°—Ç—Ä–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã"} and voc_min < 120:
            cats["travel"]["favorable"].append(dnum)
        if sign in {"–°–∫–æ—Ä–ø–∏–æ–Ω","–¢–µ–ª–µ—Ü"} or voc_min >= 180:
            cats["travel"]["unfavorable"].append(dnum)

        if sign in {"–í–µ—Å—ã","–¢–µ–ª–µ—Ü"} and voc_min < 120:
            cats["shopping"]["favorable"].append(dnum)
        if sign in {"–û–≤–µ–Ω","–°–∫–æ—Ä–ø–∏–æ–Ω"} or voc_min >= 180:
            cats["shopping"]["unfavorable"].append(dnum)

        if sign in {"–î–µ–≤–∞","–ö–æ–∑–µ—Ä–æ–≥"} and phase in GROWING:
            cats["health"]["favorable"].append(dnum)
        if sign == "–†—ã–±—ã" and phase in WANING:
            cats["health"]["unfavorable"].append(dnum)

    # —É–¥–∞–ª–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã/–æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º
    for c in cats.values():
        for k in ("favorable","unfavorable"):
            c[k] = sorted(sorted(set(c[k])))
    return cats

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def generate(year: int, month: int) -> Dict[str,Any]:
    swe.set_ephe_path(".")   # –≥–¥–µ –ª–µ–∂–∞—Ç efemeris
    first = pendulum.date(year, month, 1)
    last  = first.end_of('month')

    # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö VoC (UTC), –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    all_voc = find_voc_intervals_for_month(first, last)

    cal: Dict[str,Any] = {}
    long_tasks, short_tasks = {}, []

    d = first
    while d <= last:
        # UT-–ø–æ–ª–Ω–æ—á—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        jd = swe.julday(d.year, d.month, d.day, 0.0)

        # –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        name, illum, sign = compute_phase(jd)
        emoji      = EMO[name]
        phase_time = jd2dt(jd).in_tz(TZ).to_iso8601_string()

        # —Å–æ–≤–µ—Ç—ã
        short = FALLBACK_SHORT[:] if SKIP_SHORT else []
        if not SKIP_SHORT:
            short_tasks.append(asyncio.create_task(gpt_short(d.to_date_string(), name)))
        if name not in long_tasks:
            long_tasks[name] = asyncio.create_task(gpt_long(name, ""))

        # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ VoC —Å —Å—É—Ç–∫–∞–º–∏ –¥–∞—Ç—ã d
        day_local = pendulum.datetime(d.year, d.month, d.day, 0, 0, tz=TZ)
        voc_s = voc_e = None
        for s_utc, e_utc in all_voc:
            s, e = _intersect_with_local_day(s_utc, e_utc, day_local)
            if s and e:
                voc_s, voc_e = s, e
                break
        voc_obj = {
            "start": voc_s.format("DD.MM HH:mm") if voc_s else None,
            "end"  : voc_e.format("DD.MM HH:mm") if voc_e else None
        }

        cal[d.to_date_string()] = {
            "phase_name"     : name,
            "phase"          : f"{emoji} {name} , {sign}",
            "percent"        : illum,
            "sign"           : sign,
            "phase_time"     : phase_time,
            "advice"         : short,       # –ª–∏–±–æ LLM –ø–æ–∑–∂–µ, –ª–∏–±–æ —Ñ–æ–ª–±—ç–∫
            "long_desc"      : "",          # –ø–æ–∑–∂–µ
            "void_of_course" : voc_obj,
            # –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–º, –ø–æ–∑–∂–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º calc_month_categories
            "favorable_days" : {},
            "unfavorable_days": {},
        }
        d = d.add(days=1)

    # —Å–æ–±—Ä–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–≤–µ—Ç—ã (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã)
    if not SKIP_SHORT and short_tasks:
        short_ready = await asyncio.gather(*short_tasks)
        for idx, day in enumerate(sorted(cal)):
            cal[day]["advice"] = short_ready[idx]

    # —Ä–∞–∑–¥–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ –≤—Å–µ–º –¥–Ω—è–º –æ–¥–Ω–æ–π —Ñ–∞–∑—ã
    for ph_name, tsk in long_tasks.items():
        try:
            long_txt = await tsk
        except Exception:
            long_txt = FALLBACK_LONG[ph_name]
        for rec in cal.values():
            if rec["phase_name"] == ph_name:
                rec["long_desc"] = long_txt

    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Å—è—Ü–∞
    cats = calc_month_categories(cal)
    for rec in cal.values():
        rec["favorable_days"]   = cats
        rec["unfavorable_days"] = cats  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏

    # –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–π —Å–ø–∏—Å–æ–∫ VoC –∑–∞ –º–µ—Å—è—Ü (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
    month_voc = [
        {
            "start": s.in_tz(TZ).format("DD.MM HH:mm"),
            "end"  : e.in_tz(TZ).format("DD.MM HH:mm"),
        }
        for (s, e) in all_voc
        if (e - s).total_seconds() >= max(0, MIN_VOC_MIN*60)
    ]

    return {"days": cal, "month_voc": month_voc}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ entry-point ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _main():
    today = pendulum.today()
    data  = await generate(today.year, today.month)
    Path("lunar_calendar.json").write_text(
        json.dumps(data, ensure_ascii=False, indent=2), 'utf-8')
    print("‚úÖ lunar_calendar.json —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")

if __name__ == "__main__":
    asyncio.run(_main())
