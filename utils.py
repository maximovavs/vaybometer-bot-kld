#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
utils.py  • вспомогательные функции и константы VayboMeter-бота

 - compass(deg)          — возвращает направление ветра по углу deg (0–360)
 - clouds_word(pc)       — возвращает «ясно/переменная/пасмурно» по проценту облачности
 - wind_phrase(km_h)     — возвращает «штиль/слабый/умеренный/сильный» по скорости ветра
 - safe(v, unit)         — None → «—», число → «X.Х{unit}»
 - aqi_color(aqi)        — эмодзи уровня AQI
 - pm_color(pm, unit?)   — эмодзи + показ PM₂.₅/PM₁₀
 - kp_emoji(kp)          — эмодзи по индексу Kp
 - pressure_trend(w)     — тренд давления («↑», «↓» или «→»)
 - HTTP-обёртки: _get / _get_retry
 - get_fact(date, region) — «факт дня» в зависимости от региона
"""

from __future__ import annotations
import logging
import time
import random
import requests
import pendulum
from typing import Any, Dict, Optional, List

# ──────────────────────── Компас, облака, ветер ──────────────────────────

COMPASS = [
    "С",   # Север
    "ССВ", # Северо-северо-восток
    "СВ",  # Северо-восток
    "ВСВ", # Восток-северо-восток
    "В",   # Восток
    "ВЮВ", # Восток-юго-восток
    "ЮВ",  # Юго-восток
    "ЮЮВ", # Юго-юго-восток
    "Ю",   # Юг
    "ЮЮЗ", # Юго-юго-запад
    "ЮЗ",  # Юго-запад
    "ЗЮЗ", # Запад-юго-запад
    "З",   # Запад
    "ЗСЗ", # Запад-северо-запад
    "СЗ",  # Северо-запад
    "ССЗ", # Северо-северо-запад
]

def compass(deg: float) -> str:
    """
    Возвращает одну из 16 сторон света по углу deg (0–360).
    """
    return COMPASS[int((deg / 22.5) + 0.5) % 16]

def clouds_word(pc: int) -> str:
    """
    Возвращает слово по проценту облачности:
      <25% → «ясно»
      <70% → «переменная»
      иначе → «пасмурно»
    """
    if pc < 25:
        return "ясно"
    if pc < 70:
        return "переменная"
    return "пасмурно"

def wind_phrase(km_h: float) -> str:
    """
    Возвращает фразу по скорости ветра (км/ч):
      < 2 → «штиль»
      < 8 → «слабый»
      <14 → «умеренный»
      иначе → «сильный»
    """
    if km_h < 2:
        return "штиль"
    if km_h < 8:
        return "слабый"
    if km_h < 14:
        return "умеренный"
    return "сильный"

def safe(v: Any, unit: str = "") -> str:
    """
    None / 'None' / '—' → «—»
    Число → форматированная строка с единицей:
      safe(5.237, "°C") → «5.2°C»
      safe("10", "мм") → «10мм»
    """
    if v in (None, "None", "—"):
        return "—"
    return f"{v:.1f}{unit}" if isinstance(v, (int, float)) else f"{v}{unit}"


# ──────────────────────── AQI & PM раскраска ─────────────────────────────

def aqi_color(aqi: int | float | str) -> str:
    """
    Возвращает эмодзи уровня AQI:
      ≤50   → 🟢
      ≤100  → 🟡
      ≤150  → 🟠
      ≤200  → 🔴
      ≤300  → 🟣
      >300  → 🟤
      «—»/«н/д» → ⚪
    """
    if aqi in ("—", "н/д"):
        return "⚪"
    aqi = float(aqi)
    if aqi <=  50:
        return "🟢"
    if aqi <= 100:
        return "🟡"
    if aqi <= 150:
        return "🟠"
    if aqi <= 200:
        return "🔴"
    if aqi <= 300:
        return "🟣"
    return "🟤"

def pm_color(pm: Optional[float | int | str], with_unit: bool = False) -> str:
    """
    Быстрая цветовая индикация концентраций PM₂.₅ / PM₁₀:
      ≤12   → 🟢
      ≤35   → 🟡
      ≤55   → 🟠
      ≤150  → 🔴
      ≤250  → 🟣
      >250  → 🟤
      None/«—»/«н/д» → ⚪ н/д

    Если with_unit=True, к числу добавит « µg/м³».
    """
    if pm in (None, "—", "н/д"):
        return "⚪ н/д"
    try:
        val = float(pm)
    except (TypeError, ValueError):
        return "⚪ н/д"

    if val <= 12:
        col = "🟢"
    elif val <= 35:
        col = "🟡"
    elif val <= 55:
        col = "🟠"
    elif val <= 150:
        col = "🔴"
    elif val <= 250:
        col = "🟣"
    else:
        col = "🟤"

    txt = str(int(round(val)))
    if with_unit:
        txt += " µg/м³"
    return f"{col}{txt}"


# ──────────────────────── «Факт дня» по региону ────────────────────────────

# 1) Факты для Калининградской области
FACTS_KLGD: List[str] = [
    "Калининград — единственный населённый регион России без сухопутной границы с остальной частью страны.",
    "Калининградский зоопарк основан в 1896 году и считается одним из старейших в России.",
    "В Янтарном (Калининградская обл.) находится крупнейший в мире янтарный комбинат.",
    "Самая западная точка России расположена на Балтийской косе в Калининградской области.",
    "Куршская коса — национальный парк и объект Всемирного наследия ЮНЕСКО.",
    "Калининградская область — единственный регион РФ, имеющий статус «Свободная экономическая зона»."
]

# 2) Словарь дат «MM-DD» → событие/факт для Кипра
FACTS_CY: Dict[str, str] = {
    "01-03": "3 января — Фестиваль гранатов в Ормидии: дегустации и танцы под звездами, а в 1960 году Кипр стал республикой 🍎",
    "01-07": "7 января — День святого Иоанна Крестителя: службы в монастырях и пироги с оливками, а оливковые рощи начинают цвести 🥖🌳",
    "01-20": "20 января — День святого Неофита: паломничества к пещерному монастырю в Пафосе и сбор первого миндаля 🌰",
    "02-03": "3 февраля — Фестиваль апельсинов в Лефкаре: ярмарки с цитрусовыми и вышивкой, а фламинго прилетают в Ларнакское озеро 🦩",
    "02-25": "25 февраля — Чистый понедельник (Катаклизмос): народ отмечает праздник вод и весны, а в 1974 году начались миротворческие переговоры 🌊🕊️",
    "03-03": "3 марта — Фестиваль цветов в Платресе: горы Троодоса утопают в цветах, а в 1878 году Кипр перешел под британское управление 🌸📜",
    "03-20": "20 марта — Весеннее равноденствие: кипрские поля покрываются маками, а в Лимассоле стартуют винные туры 🌺🍷",
    "04-02": "2 апреля — День кипрских ремесел в Лефкаре: мастер-классы по кружеву и серебру, а в 1191 году Ричард Львиное Сердце захватил Кипр ⚔️",
    "04-20": "20 апреля — Пасхальная неделя начинается: в деревне Калавасос пекут флауну, а черепахи выходят на пляжи Лары 🐢",
    "05-06": "6 мая — Фестиваль роз в Агросе: деревня утопает в розовых лепестках, а в 2004 году Кипр стал членом ЕС 🍯🇪🇺",
    "05-11": "11 мая — День морского бриза и черешни: в Кирении собирают первый урожай черешни 🍒🌬️",
    "06-02": "2 июня — Фестиваль меда в Лимассоле: дегустации меда и сладостей, а в 2004 году Кипр стал членом ЕС 🍯🇪🇺",
    "06-20": "20 июня — Фестиваль лаванды в Платресе: поля Троодоса пахнут лавандой, а в 1571 году Кипр перешел к Османам 🌿📜",
    "07-02": "2 июля — День святого Прокопия: в деревне Писсури пекут лепешки и отмечают сбор инжира 🍈",
    "07-20": "20 июля — На Кипре собирают первый урожай винограда, а в 1974 году началась турецкая интервенция 🍇⚔️",
    "08-02": "2 августа — Фестиваль оливок в Килани: ярмарки и танцы, а оливковые рощи в разгаре плодоношения 🫒",
    "08-20": "20 августа — День святого Стефана: в Ларнаке украшают лодки, а в 1960 году Кипр провозгласил независимость 🚤🇨🇾",
    "09-02": "2 сентября — Фестиваль винограда в Лания: дегустации вина и танцы, а в 1974 году завершилась активная фаза конфликта 🍇🕊️",
    "09-15": "15 сентября — День археологии: в Пафосе открыты раскопки, а миндальные рощи готовятся к новому сезону 🏛️🌳",
    "10-02": "2 октября — Фестиваль хлеба в Какопетрии: пекут деревенский хлеб, а в 1878 году британцы начали строить порт Лимассола 🥖⚓",
    "10-10": "10 октября — День святого Павла: службы в Пафосе, а в 1983 году провозгласили ТРСК 🕍📜",
    "10-28": "28 октября — День «Охи» и сбора оливок: греческое «нет» с парадами и начало оливкового сезона 🇬🇷🫒",
    "11-03": "3 ноября — Фестиваль каштанов в Троодосе: жарят каштаны, а в 1192 году Кипр стал королевством крестоносцев 🌰⚔️",
    "11-15": "15 ноября — День святого Филиппа: в деревнях пекут постные пироги, а в Ларнаке собирают последние апельсины 🍊",
    "12-01": "1 декабря — Фестиваль зиваны в Омодосе: готовят мясо с рисом, а в 2003 году открыли КПП в Никосии 🍲",
    "12-15": "15 декабря — День святого Елевферия: службы в церквях, а фламинго возвращаются на соленое озеро 🦩",
    "01-10": "10 января — День странного: в Айя-Напе устраивают необычные вечеринки, а море сияет биолюминесценцией 🌊✨",
    "02-20": "20 февраля — День кипрских котов: котики в монастыре Святого Николая получают угощения 😺",
    "03-10": "10 марта — День кипрских орхидей: в горах цветут дикие орхидеи, а в Лимассоле пьют фраппе 🌸☕",
    "04-10": "10 апреля — День братьев и сестер: на Кипре дарят сувлу, а в 1489 году Кипр стал венецианским 🥙📜",
    "05-20": "20 мая — Всемирный день пчел: в деревне Пера пекут медовые сладости, а поля цветут маками 🐝🌺",
    "06-10": "10 июня — День мороженого: в Пафосе едят мороженое с инжиром, а море теплое, как суп 🍦🌊",
    "07-30": "30 июля — День дружбы: в Ларнаке пьют коктейли, а в 1974 году ООН вмешалась в кипрский конфликт 🍹🕊️",
    "08-25": "25 августа — День звездопада: на пляжах Кипра смотрят на Персеиды, а в Омодосе пьют вино 🌠🍷",
    "09-25": "25 сентября — День туризма: в Айя-Напе устраивают вечеринки, а в 1960 году открыли аэропорт Ларнаки 🛫",
    "10-20": "20 октября — День кипрских птиц: в Троодосе наблюдают за перелетными птицами, а в Пафосе пекут питту 🐦🥖",
    "11-25": "25 ноября — День без покупок: на Кипре гуляют по набережной и едят халлуми вместо шопинга 🧀🌊",
    "12-20": "20 декабря — День сангрии: в Никосии пьют сангрию, а в 1974 году начались переговоры по Кипру 🍷🕊️",
    # … (можно дописать ещё даты/события)
}

# 3) Если для Кипра события на конкретную дату нет, берём случайный факт из этого списка:
DEFAULT_FACTS_CY: List[str] = [
    "На Кипре более 1 800 видов растений — весна тут цветёт ярче любого Instagram-поста 🌸",
    "Общая длина побережья острова — 985 км: хватит кататься на байке по пляжам 🏍️",
    "Летом вода в Средиземном море прогревается до 27 °C — купаться комфортно почти весь июнь–сентябрь 🌊",
    "В Лимассоле около 360 солнечных дней в году — бери солнечные очки и вперёд ☀️",
    "Кипр — дом для четырёх видов морских черепах: они тоже любят побережье нашей любимой бухты 🐢",
    "Средняя годовая норма осадков — всего 350 мм; зонт здесь здесь аксессуар 😉 ☂️",
    "На острове 12 природных заповедников — если захочешь уйти в тишину лесов 🌲",
    "Первое упоминание Ноева ковчега связано с горами Кипра — не удивлюсь, если там Шуман-шум просыпается раньше 😉",
    "Ежегодно в марте–апреле цветёт более 50 000 миндальных деревьев — рай для фотографов 📸",
    "Никосия — последняя «зелёная линия» Европы, где история встречается с современностью 🏰",
    "Здесь производится знаменитый сыр халлуми — если ещё не пробовали, самое время 🧀",
    "В Пафосе находится древнее гробница Королей — наслаждайтесь архитектурой под открытым небом 🏛️",
    "На Кипре растут кипарисы, возраст некоторых более 500 лет 🌳",
    "В горах Троодос можно найти заброшенные византийские монастыри XII века ⛪️",
    "Каждую весну остров покрывается полем маков и васильков — рай для фотографов 📸",
    "На Кипре около 60 пляжей получили «Синий флаг» за чистоту воды и сервиса 🏖️",
    "Местные апельсины считаются одними из сладчайших в мире — попробуйте их ранним утром 🍊",
    "Зимой горы Троодос покрываются снегом, и киприоты катаются на лыжах 🎿",
    "Кипр — родина поэта Клеоба, чьи стихи посвящены красоте Средиземноморья 📜",
    "В Ларнаке находится старейшая соборная мечеть XIII века, действующая по сей день 🕌"
]

# 4) Универсальные (общие) факты на случай, если region не «калининград» и не «кипр»
DEFAULT_FACTS_UNI: List[str] = [
    "Луна удаляется от Земли на 3.8 см каждый год.",
    "Человеческий мозг генерирует достаточно энергии, чтобы осветить лампочку.",
    "В космосе звуки не распространяются, потому что там нет атмосферы.",
    "Солнце составляет 99.86% массы Солнечной системы.",
    "Молния может быть горячее поверхности Солнца (до 30 000 °C).",
    "Планета Венера вращается в обратном направлении (ретроградно)."
]


def get_fact(date: pendulum.Date, region: str = "") -> str:
    """
    Возвращает «факт дня» для заданной даты date и региона region.

    Логика выбора:
     1) Если region содержит «калининград» (независимо от регистра) → факт из FACTS_KLGD
     2) Иначе, если region содержит «кипр» → сначала ищем дату в словаре FACTS_CY,
        если там нет соответствия, возвращаем случайный элемент из DEFAULT_FACTS_CY.
     3) В любом другом случае (region не «калининград» и не «кипр») возвращаем
        факт из DEFAULT_FACTS_UNI (универсальный).

    Пример:
        get_fact(pendulum.date(2025, 6, 2), "Калининградская область") → 
            «Калининград — единственный населённый регион ...»
        get_fact(pendulum.date(2025, 6, 2), "Кипр") →
            «2 июня — Фестиваль меда в Лимассоле ...»
        get_fact(pendulum.date(2025, 6, 99), "Кипр") →
            случайный факт из DEFAULT_FACTS_CY
        get_fact(pendulum.date(2025, 6, 2), "Москва") →
            факт из DEFAULT_FACTS_UNI
    """
    r = region.lower()

    # 1) Факт для Калининграда
    if "калининград" in r:
        idx = date.day % len(FACTS_KLGD)
        return FACTS_KLGD[idx]

    # 2) Факт для Кипра
    if "кипр" in r:
        key = date.format("MM-DD")
        if key in FACTS_CY:
            return FACTS_CY[key]
        return random.choice(DEFAULT_FACTS_CY)

    # 3) Во всех остальных случаях — общий факт
    idx = date.day % len(DEFAULT_FACTS_UNI)
    return DEFAULT_FACTS_UNI[idx]


# ──────────────────────── Иконки & цвета ────────────────────────────────

WEATHER_ICONS = {
    "ясно":     "☀️",
    "переменная":"🌤️",
    "пасмурно": "☁️",
    "дождь":    "🌧️",
    "туман":    "🌁"
}

AIR_EMOJI = {
    "хороший":    "🟢",
    "умеренный":  "🟡",
    "вредный":    "🟠",
    "оч. вредный":"🔴",
    "опасный":    "🟣",
    "н/д":       "⚪"
}


# ──────────────────────── Функция kp_emoji ───────────────────────────────

K_COLOR = {
    "green":  range(0, 4),
    "yellow": range(4, 6),
    "red":    range(6, 10),
}

def kp_emoji(kp: float) -> str:
    """
    Возвращает эмодзи по индексу Kp:
      k < 3   → ⚪
      3 ≤ k < 5 → 🟢
      k ≥ 5   → 🔴
    """
    if kp is None:
        return "⚪"
    k = int(round(kp))
    if k in K_COLOR["green"]:
        return "⚪"
    if k in K_COLOR["yellow"]:
        return "🟢"
    return "🔴"


# ──────────────────────── Тренд давления ────────────────────────────────

def pressure_trend(w: Dict[str, Any]) -> str:
    """
    ↑ если ближайший час > +2 гПа, ↓ если < −2, иначе →.
    w — объект, полученный из get_weather().
    """
    hp = w.get("hourly", {}).get("surface_pressure", [])
    if len(hp) < 2:
        return "→"
    diff = hp[1] - hp[0]
    if diff >= 2:
        return "↑"
    if diff <= -2:
        return "↓"
    return "→"


# ──────────────────────── HTTP-обёртки ───────────────────────────────────

_HEADERS = {
    "User-Agent": "VayboMeter/1.0 (+https://github.com/)",
    "Accept":     "application/json",
}

def _get_retry(url: str, retries: int = 2, **params) -> Optional[dict]:
    """
    Повторяет запрос до retries раз (с экспоненциальным бэкофом 0.5, 1, 2 секунды).
    Возвращает JSON-словарь или None.
    """
    attempt = 0
    while attempt <= retries:
        try:
            r = requests.get(
                url,
                params=params,
                timeout=15,
                headers=_HEADERS
            )
            r.raise_for_status()
            return r.json()
        except Exception as e:
            attempt += 1
            if attempt > retries:
                logging.warning(
                    "%s – %s (attempts=%d)",
                    url.split("/")[2], e, attempt
                )
                return None
            time.sleep(0.5 * attempt)

def _get(url: str, **params) -> Optional[dict]:
    """
    Старый интерфейс для совместимости: делает 2 попытки (_get_retry).
    """
    return _get_retry(url, retries=2, **params)


# ──────────────────────── module self-test ──────────────────────────────

if __name__ == "__main__":
    print("pm_color demo:", pm_color(8), pm_color(27), pm_color(78, True), pm_color(None))
    print("AQI demo:", aqi_color(42), aqi_color(160), aqi_color("—"))
    today = pendulum.today()
    print("Fact Kaliningrad:", get_fact(today, "Калининградская область"))
    print("Fact Cyprus:", get_fact(today, "Кипр"))
    print("Fact Default:", get_fact(today, "Москва"))  # пример «универсального» факта
