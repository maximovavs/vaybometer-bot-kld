#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
astro.py  ‚Ä¢ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
–¢–µ–ø–µ—Ä—å —É–º–µ–µ—Ç:
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –∏ –Ω–∞ offset_days (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å).
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å Void-of-Course, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä–∫–µ—Ä ¬´–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å¬ª (–ø–æ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É).
‚Ä¢ –£–±—Ä–∞—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å–æ–≤–µ—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
"""

from __future__ import annotations
import pendulum
from typing import Any, Dict, List, Optional
from lunar import get_day_lunar_info  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ lunar_calendar.json

TZ = pendulum.timezone("Asia/Nicosia")


def _format_voc(rec: Dict[str, Any]) -> Optional[str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Void-of-Course (VoC) –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏:
    ‚ö´Ô∏è VoC HH:mm‚ÄìHH:mm
    –ï—Å–ª–∏ VoC –º–µ–Ω–µ–µ 15 –º–∏–Ω—É—Ç –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª–µ–π start/end ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    voc = rec.get("void_of_course", {})
    start = voc.get("start")
    end = voc.get("end")
    if not start or not end:
        return None

    try:
        t1 = pendulum.parse(start).in_tz(TZ)
        t2 = pendulum.parse(end).in_tz(TZ)
    except Exception:
        return None

    # –°—á–∏—Ç–∞–µ–º ¬´–º–∏–∫—Ä–æ-VoC¬ª (<15 –º–∏–Ω—É—Ç) –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º
    if (t2 - t1).in_minutes() < 15:
        return None

    return f"‚ö´Ô∏è VoC {t1.format('HH:mm')}‚Äì{t2.format('HH:mm')}"


def _format_general_day(rec: Dict[str, Any], date_obj: pendulum.Date) -> Optional[str]:
    """
    –ü–æ–º–µ—Ç–∫–∞, –µ—Å–ª–∏ –¥–∞—Ç–∞ (—Å offset) ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å:
    ‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
    ‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
    """
    day = date_obj.day
    fav_general = rec.get("favorable_days", {}).get("general", {}).get("favorable", [])
    unf_general = rec.get("favorable_days", {}).get("general", {}).get("unfavorable", [])
    if day in fav_general:
        return "‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    if day in unf_general:
        return "‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    return None


CAT_EMOJI = {
    "–°—Ç—Ä–∏–∂–∫–∞":  "‚úÇÔ∏è",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è":   "‚úàÔ∏è",
    "–ü–æ–∫—É–ø–∫–∏": "üõçÔ∏è",
    "–ó–¥–æ—Ä–æ–≤—å–µ":   "‚ù§Ô∏è",
}


def _format_categories(rec: Dict[str, Any], date_obj: pendulum.Date) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞:
    ‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∞ ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
    ‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
    –∏ —Ç.–¥., –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.
    """
    day = date_obj.day
    lines: List[str] = []
    fav = rec.get("favorable_days", {})

    for cat, emoji in CAT_EMOJI.items():
        fav_list = fav.get(cat, {}).get("favorable", [])
        unf_list = fav.get(cat, {}).get("unfavorable", [])
        label = cat.capitalize()
        if day in fav_list:
            lines.append(f"{emoji} {label} ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")
        elif day in unf_list:
            lines.append(f"{emoji} {label} ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")

    return lines


def astro_events(offset_days: int = 1) -> List[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª –¥–ª—è –ø–æ—Å—Ç–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä offset_days:
      0 ‚Äî —Å–µ–≥–æ–¥–Ω—è
      1 ‚Äî –∑–∞–≤—Ç—Ä–∞
      2 ‚Äî –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
      –∏ —Ç.–¥.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
    ‚Ä¢ VoC (–µ—Å–ª–∏ –µ—Å—Ç—å)
    ‚Ä¢ –ú–∞—Ä–∫–µ—Ä –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–Ω—è
    ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (‚úÇÔ∏è, ‚úàÔ∏è, üõçÔ∏è, ‚ù§Ô∏è)
    ‚Ä¢ –§–∞–∑—É –õ—É–Ω—ã (–≤–∫–ª—é—á–∞—è –∑–Ω–∞–∫), –ø–æ—Å–ª–µ –Ω–µ—ë ‚Äî —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ (–±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏)
    ‚Ä¢ next_event (¬´‚Üí –ß–µ—Ä–µ–∑ N –¥–Ω. ...¬ª)
    """
    target_date = pendulum.now(TZ).date().add(days=offset_days)
    rec = get_day_lunar_info(target_date)
    if not rec:
        return []

    lines: List[str] = []

    # 1) Void-of-Course
    voc_line = _format_voc(rec)
    if voc_line:
        lines.append(voc_line)

    # 2) –û–±—â–∏–π –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
    gen_line = _format_general_day(rec, target_date)
    if gen_line:
        lines.append(gen_line)

    # 3) –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    lines.extend(_format_categories(rec, target_date))

    # 4) –§–∞–∑–∞ –õ—É–Ω—ã + —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    phase = rec.get("phase", "").strip()
    advice_list = rec.get("advice", [])
    if phase:
        # –≤—ã–≤–æ–¥–∏–º —Ñ–∞–∑—É –æ—Ç–¥–µ–ª—å–Ω–æ, –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
        lines.append(phase)
        # –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        for adv in advice_list:
            lines.append(f"‚Ä¢ {adv.strip()}")

    # 5) next_event
    next_ev = rec.get("next_event", "").strip()
    if next_ev:
        lines.append(next_ev)

    return lines


# –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
if __name__ == "__main__":
    from pprint import pprint

    print("=== –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ===")
    pprint(astro_events(0))
    print("=== –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ===")
    pprint(astro_events(1))