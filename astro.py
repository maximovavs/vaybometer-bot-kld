#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
astro.py  ‚Ä¢ –±–ª–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–±–µ–∑ —Å–µ—Ç–µ–≤—ã—Ö –≤—ã–∑–æ–≤–æ–≤).

–°—Ç–∏–ª—å:
‚Ä¢ ‚ö´Ô∏è VoC —Å–µ–≥–æ–¥–Ω—è HH:mm‚ÄìHH:mm (N –º–∏–Ω) ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
‚Ä¢ ‚úÖ/‚ùå –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–Ω—è
‚Ä¢ ‚úÇÔ∏è/‚úàÔ∏è/üõçÔ∏è/‚ù§Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–ª–∞–≥–æ/–Ω–µ–±–ª–∞–≥–æ)
‚Ä¢ üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ ‚Ä¢ ‚ôì –†—ã–±—ã ‚Äî ¬´—Ñ–∞–∑–∞ ‚Ä¢ –∑–Ω–∞–∫¬ª
‚Ä¢ –°–æ–≤–µ—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö —ç–º–æ–¥–∑–∏; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî ¬´‚Ä¢¬ª)
‚Ä¢ ‚Üí –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)

–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è ‚Äî –º–∞–∫—Å–∏–º—É–º –≤–µ—Ä–Ω—ë—Ç [].
"""

from __future__ import annotations
import os
import re
import logging
from typing import Any, Dict, List, Optional, Union

import pendulum

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∏–º–ø–æ—Ä—Ç lunar —Å –∑–∞—â–∏—Ç–æ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
try:
    from lunar import get_day_lunar_info as _raw_get_day
except Exception as e:
    logging.warning("astro: cannot import lunar.get_day_lunar_info: %s", e)
    _raw_get_day = None  # type: ignore[misc]

def _safe_get_day_lunar_info(date_obj: pendulum.Date) -> Optional[Dict[str, Any]]:
    if _raw_get_day is None:
        return None
    try:
        return _raw_get_day(date_obj)
    except Exception as e:
        logging.warning("astro: error in get_day_lunar_info(%s): %s", date_obj, e)
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ / –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DEFAULT_TZ_NAME = os.getenv("LUNAR_TZ", "Asia/Nicosia")  # –≥–¥–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω lunar_calendar.json
VOC_HIDE_MINUTES = 5  # –µ—Å–ª–∏ show_all_voc=False, –ø—Ä—è—á–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π VoC

CATEGORY_MAPPING: Dict[str, tuple[str, str]] = {
    "–°—Ç—Ä–∏–∂–∫–∞":     ("haircut",  "‚úÇÔ∏è"),
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": ("travel",   "‚úàÔ∏è"),
    "–ü–æ–∫—É–ø–∫–∏":     ("shopping", "üõçÔ∏è"),
    "–ó–¥–æ—Ä–æ–≤—å–µ":    ("health",   "‚ù§Ô∏è"),
}

ZODIAC_EMOJI = {
    "–û–≤–µ–Ω": "‚ôà", "–¢–µ–ª–µ—Ü": "‚ôâ", "–ë–ª–∏–∑–Ω–µ—Ü—ã": "‚ôä", "–†–∞–∫": "‚ôã",
    "–õ–µ–≤": "‚ôå", "–î–µ–≤–∞": "‚ôç", "–í–µ—Å—ã": "‚ôé", "–°–∫–æ—Ä–ø–∏–æ–Ω": "‚ôè",
    "–°—Ç—Ä–µ–ª–µ—Ü": "‚ôê", "–ö–æ–∑–µ—Ä–æ–≥": "‚ôë", "–í–æ–¥–æ–ª–µ–π": "‚ôí", "–†—ã–±—ã": "‚ôì",
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏/—Å—Ç—Ä–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _to_tz(tz: Union[str, pendulum.Timezone, None]) -> pendulum.Timezone:
    if isinstance(tz, pendulum.tz.timezone.Timezone):
        return tz
    name = str(tz or DEFAULT_TZ_NAME)
    try:
        return pendulum.timezone(name)
    except Exception:
        return pendulum.timezone("UTC")

def _pick(rec: Dict[str, Any], *names: str) -> Any:
    for n in names:
        v = rec.get(n)
        if v not in (None, "", []):
            return v
    return None

def _extract_voc_record(rec: Dict[str, Any]) -> Optional[Dict[str, str]]:
    voc = _pick(rec, "void_of_course", "voc", "void")
    if not isinstance(voc, dict):
        return None
    start = _pick(voc, "start", "from", "start_time")
    end   = _pick(voc, "end",   "to",   "end_time")
    if not (start and end):
        return None
    return {"start": str(start), "end": str(end)}

def _parse_local_dt(s: str, tz: pendulum.Timezone, fallback_year: int) -> Optional[pendulum.DateTime]:
    s = (s or "").strip()
    if not s:
        return None
    try:
        return pendulum.parse(s).in_tz(tz)
    except Exception:
        pass
    try:
        dt = pendulum.from_format(s, "DD.MM HH:mm", tz=tz)
        return dt.replace(year=fallback_year)
    except Exception:
        return None

def _format_voc_line(voc: Dict[str, str], tz: pendulum.Timezone, show_all_voc: bool, year_hint: int) -> Optional[str]:
    try:
        t1 = _parse_local_dt(voc.get("start", ""), tz, year_hint)
        t2 = _parse_local_dt(voc.get("end",   ""), tz, year_hint)
        if not t1 or not t2:
            return None
        minutes = max(0, (t2 - t1).in_minutes())
        if minutes < VOC_HIDE_MINUTES and not show_all_voc:
            return None
        return f"‚ö´Ô∏è VoC —Å–µ–≥–æ–¥–Ω—è {t1.format('HH:mm')}‚Äì{t2.format('HH:mm')} ({minutes} –º–∏–Ω)"
    except Exception:
        return None

def _strip_numbering(s: str) -> str:
    s = str(s or "").strip()
    # —É–±–∏—Ä–∞–µ–º "1. ", "2) ", –≤–µ–¥—É—â–∏–µ –±—É–ª–ª–µ—Ç—ã
    s = re.sub(r'^\s*(?:\d+[\.\)]|[-‚Äì‚Äî‚Ä¢‚óè‚Ä¢])\s*', '', s)
    return s

def _ensure_bullet(s: str) -> str:
    """–ï—Å–ª–∏ —Å–æ–≤–µ—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ–¥–∑–∏/—Å–∏–º–≤–æ–ª–∞ ‚Äî –¥–æ–±–∞–≤–∏–º '‚Ä¢ '."""
    if not s:
        return s
    first = s[0]
    # –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –±—É–∫–≤–∞/—Ü–∏—Ñ—Ä–∞ ‚Üí –¥–æ–±–∞–≤–∏–º –±—É–ª–ª–µ—Ç
    if first.isalnum():
        return f"‚Ä¢ {s}"
    return s

def _phase_line(rec: Dict[str, Any]) -> Optional[str]:
    """
    –§–æ—Ä–º–∞—Ç ¬´üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ ‚Ä¢ ‚ôì –†—ã–±—ã¬ª.
    –ë–µ—Ä—ë–º ¬´phase_name¬ª (–∏–ª–∏ ¬´phase¬ª –¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π) + –∑–Ω–∞–∫ —Å —Å–∏–º–≤–æ–ª–æ–º.
    """
    try:
        phase = (rec.get("phase_name") or "").strip()
        if not phase:
            raw = (rec.get("phase") or "").strip()
            if raw:
                phase = raw.split(",")[0].strip()
        if not phase:
            return None
        sign = (rec.get("sign") or "").strip()
        sign_emoji = ZODIAC_EMOJI.get(sign, "")
        sign_part = f" ‚Ä¢ {sign_emoji} {sign}" if sign else ""
        # –µ—Å–ª–∏ –≤ phase —É–∂–µ –µ—Å—Ç—å —ç–º–æ–¥–∑–∏ (üåï/üåî/‚Ä¶), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return f"{phase}{sign_part}"
    except Exception:
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è/–∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _format_general_day(rec: Dict[str, Any], date_obj: pendulum.Date) -> Optional[str]:
    try:
        day = int(date_obj.day)
        fav_general = (rec.get("favorable_days") or {}).get("general") or {}
        fav = fav_general.get("favorable") or []
        unf = fav_general.get("unfavorable") or []
        if day in fav:
            return "‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
        if day in unf:
            return "‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
        return None
    except Exception:
        return None

def _format_categories(rec: Dict[str, Any], date_obj: pendulum.Date) -> List[str]:
    lines: List[str] = []
    try:
        day = int(date_obj.day)
        fav_all = rec.get("favorable_days") or {}
        for rus_cat, (eng_key, emoji) in CATEGORY_MAPPING.items():
            fav_list = (fav_all.get(rus_cat) or {}).get("favorable") or []
            unf_list = (fav_all.get(rus_cat) or {}).get("unfavorable") or []
            if not fav_list and not unf_list:
                fav_list = (fav_all.get(eng_key) or {}).get("favorable") or []
                unf_list = (fav_all.get(eng_key) or {}).get("unfavorable") or []
            if day in fav_list:
                lines.append(f"{emoji} {rus_cat} ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")
            elif day in unf_list:
                lines.append(f"{emoji} {rus_cat} ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")
    except Exception:
        pass
    return lines

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—É–±–ª–∏—á–Ω–æ–µ API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def astro_events(
    offset_days: int = 1,
    show_all_voc: bool = False,
    tz: Union[str, pendulum.Timezone, None] = DEFAULT_TZ_NAME
) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –±–ª–æ–∫–∞ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª.
    –ü–æ —Å—Ç–∏–ª—é —É–∂–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ø–æ—Å—Ç; –∑–∞–≥–æ–ª–æ–≤–æ–∫ ¬´ü™ê <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>¬ª –¥–æ–±–∞–≤–ª—è–π —Å–Ω–∞—Ä—É–∂–∏.
    """
    try:
        tz_obj = _to_tz(tz)
        target_date = pendulum.now(tz_obj).date().add(days=offset_days)

        rec = _safe_get_day_lunar_info(target_date)
        if not rec:
            return []

        lines: List[str] = []

        # 1) VoC
        voc = _extract_voc_record(rec)
        voc_line = _format_voc_line(voc, tz_obj, show_all_voc, target_date.year) if voc else None
        if voc_line:
            lines.append(voc_line)

        # 2) –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–Ω—è
        gen_line = _format_general_day(rec, target_date)
        if gen_line:
            lines.append(gen_line)

        # 3) –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        lines.extend(_format_categories(rec, target_date))

        # 4) –§–∞–∑–∞ ‚Ä¢ –∑–Ω–∞–∫
        ph = _phase_line(rec)
        if ph:
            lines.append(ph)

        # 5) –°–æ–≤–µ—Ç—ã (–¥–æ 3-—Ö), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö —ç–º–æ–¥–∑–∏/–∑–Ω–∞—á–∫–∏
        advice_list = rec.get("advice") or []
        if isinstance(advice_list, list):
            for adv in advice_list[:3]:
                s = _ensure_bullet(_strip_numbering(adv))
                if s:
                    lines.append(s)

        # 6) –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        next_ev = _strip_numbering(rec.get("next_event", ""))
        if next_ev:
            if not next_ev.startswith(("‚Üí", "‚û°", "üóì", "‚è≠")):
                next_ev = f"‚Üí {next_ev}"
            lines.append(next_ev)

        return [l for l in lines if isinstance(l, str) and l.strip()]
    except Exception as e:
        logging.warning("astro_events: unexpected error: %s", e)
        return []

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    from pprint import pprint
    print("=== –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ===")
    pprint(astro_events(offset_days=0, show_all_voc=False, tz=os.getenv("TZ_LOCAL","Europe/Kaliningrad")))
    print("\n=== –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ VoC) ===")
    pprint(astro_events(offset_days=1, show_all_voc=True, tz=os.getenv("LUNAR_TZ","Asia/Nicosia")))