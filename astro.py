#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
astro.py  ‚Ä¢ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
–¢–µ–ø–µ—Ä—å —É–º–µ–µ—Ç:
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –∏ –Ω–∞ offset_days (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å).
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å Void-of-Course (VoC) —Å —É—á—ë—Ç–æ–º —Ñ–ª–∞–≥–∞ show_all_voc.
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä–∫–µ—Ä ¬´–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å¬ª (–ø–æ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É).
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–°—Ç—Ä–∏–∂–∫–∞¬ª, ¬´–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è¬ª, ¬´–ü–æ–∫—É–ø–∫–∏¬ª, ¬´–ó–¥–æ—Ä–æ–≤—å–µ¬ª,
  –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤ JSON –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ ¬´haircut¬ª, ¬´travel¬ª, ¬´shopping¬ª, ¬´health¬ª.
‚Ä¢ –£–±–∏—Ä–∞–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å–æ–≤–µ—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
"""

from __future__ import annotations
import pendulum
from typing import Any, Dict, List, Optional
from lunar import get_day_lunar_info  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ lunar_calendar.json

# –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –≥–¥–µ –≤—ã —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ –∏–ª–∏ –ù–∏–∫–æ—Å–∏—è).
# –î–ª—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞:
TZ = pendulum.timezone("Europe/Kaliningrad")


def _format_voc(rec: Dict[str, Any], show_all_voc: bool) -> Optional[str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Void-of-Course (VoC) –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏:
    ‚ö´Ô∏è VoC HH:mm‚ÄìHH:mm

    –ï—Å–ª–∏ VoC –º–µ–Ω–µ–µ 15 –º–∏–Ω—É—Ç:
      - –ø—Ä–∏ show_all_voc=False ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None
      - –ø—Ä–∏ show_all_voc=True  ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º VoC

    –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Üí None.
    """
    voc = rec.get("void_of_course", {})
    start = voc.get("start")
    end = voc.get("end")
    if not start or not end:
        return None

    try:
        t1 = pendulum.parse(start).in_tz(TZ)
        t2 = pendulum.parse(end).in_tz(TZ)
    except Exception:
        return None

    duration_minutes = (t2 - t1).in_minutes()
    if duration_minutes < 15 and not show_all_voc:
        return None

    return f"‚ö´Ô∏è VoC {t1.format('HH:mm')}‚Äì{t2.format('HH:mm')}"


def _format_general_day(rec: Dict[str, Any], date_obj: pendulum.Date) -> Optional[str]:
    """
    –ü–æ–º–µ—Ç–∫–∞, –µ—Å–ª–∏ –¥–∞—Ç–∞ (—Å offset) ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å:
    ‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
    ‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
    """
    day = date_obj.day
    fav_general = rec.get("favorable_days", {}).get("general", {}).get("favorable", [])
    unf_general = rec.get("favorable_days", {}).get("general", {}).get("unfavorable", [])
    if day in fav_general:
        return "‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    if day in unf_general:
        return "‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    return None


# –°–ª–æ–≤–∞—Ä—å ¬´—Ä—É—Å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π_–∫–ª—é—á_–≤_JSON, —ç–º–æ–¥–∑–∏)¬ª
CATEGORY_MAPPING = {
    "–°—Ç—Ä–∏–∂–∫–∞":     ("haircut",    "‚úÇÔ∏è"),
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": ("travel",     "‚úàÔ∏è"),
    "–ü–æ–∫—É–ø–∫–∏":     ("shopping",   "üõçÔ∏è"),
    "–ó–¥–æ—Ä–æ–≤—å–µ":    ("health",     "‚ù§Ô∏è"),
}


def _format_categories(rec: Dict[str, Any], date_obj: pendulum.Date) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞:
      ‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∞ ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
      ‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
      üõçÔ∏è –ü–æ–∫—É–ø–∫–∏ ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
      ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ

    –í JSON –º–æ–≥—É—Ç –±—ã—Ç—å –∫–ª—é—á–∏ ¬´–°—Ç—Ä–∏–∂–∫–∞¬ª, ¬´–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è¬ª, ¬´–ü–æ–∫—É–ø–∫–∏¬ª, ¬´–ó–¥–æ—Ä–æ–≤—å–µ¬ª
    –∏–ª–∏ –∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã ¬´haircut¬ª, ¬´travel¬ª, ¬´shopping¬ª, ¬´health¬ª.
    """
    day = date_obj.day
    lines: List[str] = []
    fav = rec.get("favorable_days", {})

    for rus_cat, (eng_key, emoji) in CATEGORY_MAPPING.items():
        # 1) –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥ —Ä—É—Å—Å–∫–∏–º –∫–ª—é—á–æ–º
        fav_list = fav.get(rus_cat, {}).get("favorable", [])
        unf_list = fav.get(rus_cat, {}).get("unfavorable", [])

        # 2) –ï—Å–ª–∏ —Ä—É—Å—Å–∫–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–ª—é—á
        if not fav_list and not unf_list:
            fav_list = fav.get(eng_key, {}).get("favorable", [])
            unf_list = fav.get(eng_key, {}).get("unfavorable", [])

        if day in fav_list:
            lines.append(f"{emoji} {rus_cat} ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")
        elif day in unf_list:
            lines.append(f"{emoji} {rus_cat} ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")

    return lines


def astro_events(offset_days: int = 1, show_all_voc: bool = False) -> List[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª –¥–ª—è –ø–æ—Å—Ç–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä offset_days:
      0 ‚Äî —Å–µ–≥–æ–¥–Ω—è
      1 ‚Äî –∑–∞–≤—Ç—Ä–∞
      2 ‚Äî –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –∏ —Ç. –¥.

    –ü–∞—Ä–∞–º–µ—Ç—Ä show_all_voc:
      False ‚Äî —Å–∫—Ä—ã–≤–∞—Ç—å VoC < 15 –º–∏–Ω—É—Ç
      True ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª—é–±–æ–π VoC, –¥–∞–∂–µ –µ—Å–ª–∏ < 15 –º–∏–Ω—É—Ç

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
      ‚Ä¢ VoC (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É –∏–ª–∏ show_all_voc=True)
      ‚Ä¢ ¬´‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å¬ª –∏–ª–∏ ¬´‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å¬ª
      ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∞, ‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, üõçÔ∏è –ü–æ–∫—É–ø–∫–∏, ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ)
      ‚Ä¢ –§–∞–∑—É –õ—É–Ω—ã (–≤–∫–ª—é—á–∞—è –∑–Ω–∞–∫) –∏ —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏)
      ‚Ä¢ next_event (¬´‚Üí –ß–µ—Ä–µ–∑ N –¥–Ω. ...¬ª)
    """
    target_date = pendulum.now(TZ).date().add(days=offset_days)
    rec = get_day_lunar_info(target_date)
    if not rec:
        return []

    lines: List[str] = []

    # 1) Void-of-Course
    voc_line = _format_voc(rec, show_all_voc)
    if voc_line:
        lines.append(voc_line)

    # 2) –û–±—â–∏–π –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
    gen_line = _format_general_day(rec, target_date)
    if gen_line:
        lines.append(gen_line)

    # 3) –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–°—Ç—Ä–∏–∂–∫–∞, –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ü–æ–∫—É–ø–∫–∏, –ó–¥–æ—Ä–æ–≤—å–µ)
    lines.extend(_format_categories(rec, target_date))

    # 4) –§–∞–∑–∞ –õ—É–Ω—ã + —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
    phase = rec.get("phase", "").strip()
    advice_list = rec.get("advice", [])
    if phase:
        # –í—ã–≤–æ–¥–∏–º —Ñ–∞–∑—É –æ—Ç–¥–µ–ª—å–Ω–æ, –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
        lines.append(phase)
        for adv in advice_list:
            # –ö–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            text = adv.strip()
            lines.append(f"‚Ä¢ {text}")

    # 5) next_event
    next_ev = rec.get("next_event", "").strip()
    if next_ev:
        lines.append(next_ev)

    return lines


# –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
if __name__ == "__main__":
    from pprint import pprint

    print("=== –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞) ===")
    pprint(astro_events(0, show_all_voc=False))
    print("=== –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Å –ª—é–±—ã–º VoC) ===")
    pprint(astro_events(1, show_all_voc=True))