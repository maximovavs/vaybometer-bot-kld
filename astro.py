#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
astro.py ‚Äì —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
–¢–µ–ø–µ—Ä—å:
‚Ä¢ —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç-–æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–∑—ã
‚Ä¢ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–≤–µ—Ç—ã —Å ¬´‚Ä¢¬ª, –∞ –Ω–µ 1./2./3.
‚Ä¢ –æ—Å—Ç–∞–≤–ª—è–µ—Ç VoC, –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
"""

from __future__ import annotations
import pendulum
from typing import Any, Dict, List, Optional
from lunar import get_day_lunar_info         # ‚Üê –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å

TZ = pendulum.timezone("Asia/Nicosia")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _today_rec() -> Optional[Dict[str, Any]]:
    return get_day_lunar_info(pendulum.now(TZ).date())

def _format_voc(rec: Dict[str, Any]) -> Optional[str]:
    voc = rec.get("void_of_course", {})
    if not (voc.get("start") and voc.get("end")):
        return None
    t1 = pendulum.parse(voc["start"]).in_tz(TZ)
    t2 = pendulum.parse(voc["end"]).in_tz(TZ)
    if (t2 - t1).in_minutes() < 15:
        return None
    return f"‚ö´Ô∏è VoC {t1.format('HH:mm')}‚Äì{t2.format('HH:mm')}"

def _good_bad(rec: Dict[str, Any]) -> Optional[str]:
    day = pendulum.now(TZ).day
    gen = rec.get("favorable_days", {}).get("general", {})
    if day in gen.get("favorable", []):
        return "‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    if day in gen.get("unfavorable", []):
        return "‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    return None

CAT_EMO = {"haircut":"‚úÇÔ∏è", "travel":"‚úàÔ∏è", "shopping":"üõç", "health":"‚ù§Ô∏è"}
def _categories(rec: Dict[str, Any]) -> List[str]:
    day = pendulum.now(TZ).day
    out: List[str] = []
    fav = rec.get("favorable_days", {})
    for cat, emo in CAT_EMO.items():
        f = fav.get(cat, {}).get("favorable", [])
        u = fav.get(cat, {}).get("unfavorable", [])
        if day in f: out.append(f"{emo} {cat.capitalize()} ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")
        elif day in u: out.append(f"{emo} {cat.capitalize()} ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")
    return out

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def astro_events() -> List[str]:
    rec = _today_rec()
    if not rec:
        return []

    phase_full = rec.get("phase","")
    # —É–±–∏—Ä–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ ¬´(¬ª  ‚Üí –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    phase_clean = phase_full.split(" (")[0].strip()

    tips = [s.strip("").strip() for s in rec.get("advice", []) if s.strip()]

    lines: List[str] = []

    for extra in (_format_voc(rec), _good_bad(rec)):
        if extra:
            lines.append(extra)

    lines += _categories(rec)

    # —Ñ–∞–∑–∞ + —Å–æ–≤–µ—Ç—ã
    if phase_clean:
        lines.append(phase_clean)
    for tip in tips:
        lines.append(f"‚Ä¢ {tip}")

    # –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ
    nxt = rec.get("next_event","").strip()
    if nxt:
        lines.append(nxt)

    return lines


# —Ç–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ
if __name__ == "__main__":
    from pprint import pprint
    pprint(astro_events())
