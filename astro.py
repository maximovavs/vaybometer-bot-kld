#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
astro.py  ‚Ä¢ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
–¢–µ–ø–µ—Ä—å —É–º–µ–µ—Ç:
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –¥–∞—Ç—É —Å offset_days –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ tz.
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å Void-of-Course (VoC) —Å —É—á—ë—Ç–æ–º —Ñ–ª–∞–≥–∞ show_all_voc.
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä–∫–µ—Ä ¬´–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å¬ª (–ø–æ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É).
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–°—Ç—Ä–∏–∂–∫–∞¬ª, ¬´–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è¬ª, ¬´–ü–æ–∫—É–ø–∫–∏¬ª, ¬´–ó–¥–æ—Ä–æ–≤—å–µ¬ª,
  –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤ JSON –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ ¬´haircut¬ª, ¬´travel¬ª, ¬´shopping¬ª, ¬´health¬ª.
‚Ä¢ –£–±–∏—Ä–∞–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å–æ–≤–µ—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π.
"""

from __future__ import annotations
import pendulum
from typing import Any, Dict, List, Optional, Union
from lunar import get_day_lunar_info  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ lunar_calendar.json

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∏–ø—Ä—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.
DEFAULT_TZ = pendulum.timezone("Asia/Nicosia")


def _format_voc(
    rec: Dict[str, Any],
    tz: pendulum.Timezone,
    show_all_voc: bool
) -> Optional[str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Void-of-Course (VoC) –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏:
    ‚ö´Ô∏è VoC HH:mm‚ÄìHH:mm

    –ï—Å–ª–∏ VoC –º–µ–Ω—å—à–µ 15 –º–∏–Ω—É—Ç –∏ show_all_voc=False ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    –ï—Å–ª–∏ show_all_voc=True ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–∂–µ ¬´–º–∏–∫—Ä–æ-VoC¬ª (–¥–∞–∂–µ < 15 –º–∏–Ω).
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –æ VoC –Ω–µ—Ç ‚Üí None.
    """
    voc = rec.get("void_of_course", {})
    start = voc.get("start")
    end   = voc.get("end")
    if not start or not end:
        return None

    try:
        t1 = pendulum.parse(start).in_tz(tz)
        t2 = pendulum.parse(end).in_tz(tz)
    except Exception:
        return None

    duration_minutes = (t2 - t1).in_minutes()
    if duration_minutes < 15 and not show_all_voc:
        return None

    return f"‚ö´Ô∏è VoC {t1.format('HH:mm')}‚Äì{t2.format('HH:mm')}"


def _format_general_day(
    rec: Dict[str, Any],
    date_obj: pendulum.Date
) -> Optional[str]:
    """
    –ü–æ–º–µ—Ç–∫–∞, –µ—Å–ª–∏ date_obj ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å:
      ‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
      ‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
    """
    day = date_obj.day
    fav_general = rec.get("favorable_days", {}).get("general", {}).get("favorable", [])
    unf_general = rec.get("favorable_days", {}).get("general", {}).get("unfavorable", [])
    if day in fav_general:
        return "‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    if day in unf_general:
        return "‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    return None


# –†—É—Å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí (–∞–Ω–≥–ª.–∫–ª—é—á –≤ JSON, —ç–º–æ–¥–∑–∏)
CATEGORY_MAPPING: Dict[str, tuple[str, str]] = {
    "–°—Ç—Ä–∏–∂–∫–∞":     ("haircut",  "‚úÇÔ∏è"),
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": ("travel",   "‚úàÔ∏è"),
    "–ü–æ–∫—É–ø–∫–∏":     ("shopping", "üõçÔ∏è"),
    "–ó–¥–æ—Ä–æ–≤—å–µ":    ("health",   "‚ù§Ô∏è"),
}


def _format_categories(
    rec: Dict[str, Any],
    date_obj: pendulum.Date
) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞:
      ‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∞ ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
      ‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
      üõçÔ∏è –ü–æ–∫—É–ø–∫–∏ ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
      ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ

    –ü—Ä–∏ —ç—Ç–æ–º –≤–Ω—É—Ç—Ä–∏ JSON –º–æ–≥–ª–∏ –±—ã—Ç—å –∫–ª—é—á–∏ –∫–∞–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º,
    —Ç–∞–∫ –∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (‚Äúhaircut‚Äù, ‚Äútravel‚Äù, ‚Äúshopping‚Äù, ‚Äúhealth‚Äù).
    """
    day = date_obj.day
    lines: List[str] = []
    fav: Dict[str, Any] = rec.get("favorable_days", {})

    for rus_cat, (eng_key, emoji) in CATEGORY_MAPPING.items():
        fav_list = fav.get(rus_cat, {}).get("favorable", [])
        unf_list = fav.get(rus_cat, {}).get("unfavorable", [])

        # –ï—Å–ª–∏ ¬´—Ä—É—Å—Å–∫–∏—Ö¬ª –∫–ª—é—á–µ–π –Ω–µ –Ω–∞—à–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º ¬´–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ¬ª
        if not fav_list and not unf_list:
            fav_list = fav.get(eng_key, {}).get("favorable", [])
            unf_list = fav.get(eng_key, {}).get("unfavorable", [])

        if day in fav_list:
            lines.append(f"{emoji} {rus_cat} ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")
        elif day in unf_list:
            lines.append(f"{emoji} {rus_cat} ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")

    return lines


def astro_events(
    offset_days: int = 1,
    show_all_voc: bool = False,
    tz: Union[str, pendulum.Timezone] = DEFAULT_TZ
) -> List[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª –¥–ª—è –ø–æ—Å—Ç–∞.

    offset_days:
      0 ‚Äî —Å–µ–≥–æ–¥–Ω—è
      1 ‚Äî –∑–∞–≤—Ç—Ä–∞
      2 ‚Äî –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
      –∏ —Ç. –¥.

    show_all_voc:
      False ‚Äî —Å–∫—Ä—ã–≤–∞—Ç—å VoC < 15 –º–∏–Ω—É—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
      True  ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª—é–±–æ–π VoC

    tz:
      –õ–∏–±–æ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Asia/Nicosia" –∏–ª–∏ "Europe/Kaliningrad"),
      –ª–∏–±–æ –æ–±—ä–µ–∫—Ç pendulum.Timezone. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∫–∏–ø—Ä—Å–∫–∏–π ("Asia/Nicosia").

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
      ‚Ä¢ –°—Ä–∞–∑—É VoC (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ < 15 –º–∏–Ω, –∏–ª–∏ show_all_voc=True)
      ‚Ä¢ ¬´‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å¬ª / ¬´‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å¬ª
      ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∞, ‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, üõçÔ∏è –ü–æ–∫—É–ø–∫–∏, ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ)
      ‚Ä¢ –§–∞–∑—É –õ—É–Ω—ã (–∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ ¬´(XX% –æ—Å–≤–µ—â.)¬ª) –∏ —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π,
        –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ ¬´‚Ä¢ —Ç–µ–∫—Å—Ç¬ª)
      ‚Ä¢ next_event (¬´‚Üí –ß–µ—Ä–µ–∑ N –¥–Ω. ‚Ä¶¬ª)
    """
    # –ü—Ä–∏–≤–æ–¥–∏–º tz –∫ –æ–±—ä–µ–∫—Ç—É pendulum.Timezone (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Ç—Ä–æ–∫—É)
    if isinstance(tz, str):
        tz = pendulum.timezone(tz)

    # –ë–µ—Ä—ë–º ¬´—Å–µ–≥–æ–¥–Ω—è¬ª –≤ —ç—Ç–æ–º —á–∞—Å. –ø–æ—è—Å–µ, –ø—Ä–∏–±–∞–≤–ª—è–µ–º offset_days
    target_date = pendulum.now(tz).date().add(days=offset_days)
    rec = get_day_lunar_info(target_date)
    if not rec:
        return []

    lines: List[str] = []

    # 1) VoC
    voc_line = _format_voc(rec, tz, show_all_voc)
    if voc_line:
        lines.append(voc_line)

    # 2) –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π/–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –æ–±—â–∏–π –¥–µ–Ω—å
    gen_line = _format_general_day(rec, target_date)
    if gen_line:
        lines.append(gen_line)

    # 3) –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–°—Ç—Ä–∏–∂–∫–∞, –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ü–æ–∫—É–ø–∫–∏, –ó–¥–æ—Ä–æ–≤—å–µ)
    lines.extend(_format_categories(rec, target_date))

    # 4) –§–∞–∑–∞ –õ—É–Ω—ã + —Å–æ–≤–µ—Ç—ã
    phase = rec.get("phase", "").strip()
    advice_list = rec.get("advice", [])
    if phase:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—É —Ñ–∞–∑—É (–∏–º—è + –∑–Ω–∞–∫) –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞ —ç—Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
        lines.append(phase)
        for adv in advice_list:
            txt = adv.strip()
            # –ö–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç ‚Äî –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –±–µ–∑ —Ü–∏—Ñ—Ä
            lines.append(f"‚Ä¢ {txt}")

    # 5) next_event (–µ—Å–ª–∏ –µ—Å—Ç—å)
    next_ev = rec.get("next_event", "").strip()
    if next_ev:
        lines.append(next_ev)

    return lines


# –î–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ª–∞–¥–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
if __name__ == "__main__":
    from pprint import pprint

    print("=== –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (offset_days=0) ===")
    pprint(astro_events(offset_days=0, show_all_voc=False, tz="Asia/Nicosia"))

    print("=== –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (offset_days=1) ===")
    pprint(astro_events(offset_days=1, show_all_voc=True, tz="Asia/Nicosia"))