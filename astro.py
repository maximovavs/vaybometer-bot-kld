#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
astro.py  ‚Ä¢ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.

–¢–µ–ø–µ—Ä—å:
‚Ä¢ –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å offset_days, —á—Ç–æ–±—ã –±—Ä–∞—Ç—å ¬´–∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ¬ª (–∏–ª–∏ –¥–∞–ª—å—à–µ) —Å–æ–±—ã—Ç–∏—è.
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä show_all_voc=True –≤—ã–≤–æ–¥–∏—Ç VoC –¥–∞–∂–µ –µ—Å–ª–∏ < 15 –º–∏–Ω—É—Ç.
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–°—Ç—Ä–∏–∂–∫–∞¬ª, ¬´–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è¬ª, ¬´–ü–æ–∫—É–ø–∫–∏¬ª, ¬´–ó–¥–æ—Ä–æ–≤—å–µ¬ª —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ JSON –ø–æ-—Ä—É—Å—Å–∫–∏ –∏–ª–∏ –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏.
‚Ä¢ –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å–æ–≤–µ—Ç–æ–≤ (¬´1. ‚Ä¶¬ª ‚Üí ¬´‚Ä¢ ‚Ä¶¬ª).
"""

from __future__ import annotations
import pendulum
import re
from typing import Any, Dict, List, Optional, Union
from lunar import get_day_lunar_info  # –±–µ—Ä—ë—Ç –∏–∑ lunar_calendar.json

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∏–ø—Ä—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "Europe/Kaliningrad" –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É.
DEFAULT_TZ = pendulum.timezone("Asia/Nicosia")


def _format_voc(
    rec: Dict[str, Any],
    tz: pendulum.Timezone,
    show_all_voc: bool
) -> Optional[str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Void-of-Course (VoC) –∫–∞–∫:
      ‚ö´Ô∏è VoC HH:mm‚ÄìHH:mm

    –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ < 15 –º–∏–Ω—É—Ç –∏ show_all_voc=False ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None.
    –ï—Å–ª–∏ show_all_voc=True ‚Üí –≤—ã–≤–æ–¥–∏–º ¬´–º–∏–∫—Ä–æ-VoC¬ª —Ç–æ–∂–µ.
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Üí None.
    """
    voc = rec.get("void_of_course", {})
    start = voc.get("start")
    end   = voc.get("end")
    if not start or not end:
        return None

    try:
        t1 = pendulum.parse(start).in_tz(tz)
        t2 = pendulum.parse(end).in_tz(tz)
    except Exception:
        return None

    minutes = (t2 - t1).in_minutes()
    if minutes < 15 and not show_all_voc:
        return None

    return f"‚ö´Ô∏è VoC {t1.format('HH:mm')}‚Äì{t2.format('HH:mm')}"


def _format_general_day(
    rec: Dict[str, Any],
    date_obj: pendulum.Date
) -> Optional[str]:
    """
    –ü–æ–º–µ—Ç–∫–∞, –µ—Å–ª–∏ date_obj ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å:
      ‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
      ‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
    """
    day = date_obj.day
    fav_general = rec.get("favorable_days", {}).get("general", {}).get("favorable", [])
    unf_general = rec.get("favorable_days", {}).get("general", {}).get("unfavorable", [])
    if day in fav_general:
        return "‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    if day in unf_general:
        return "‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    return None


# –°–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Üí (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–ª—é—á –≤ JSON, —ç–º–æ–¥–∑–∏)
CATEGORY_MAPPING: Dict[str, tuple[str, str]] = {
    "–°—Ç—Ä–∏–∂–∫–∞":     ("haircut",  "‚úÇÔ∏è"),
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": ("travel",   "‚úàÔ∏è"),
    "–ü–æ–∫—É–ø–∫–∏":     ("shopping", "üõçÔ∏è"),
    "–ó–¥–æ—Ä–æ–≤—å–µ":    ("health",   "‚ù§Ô∏è"),
}


def _format_categories(
    rec: Dict[str, Any],
    date_obj: pendulum.Date
) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞:
      ‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∞ ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
      ‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
      üõçÔ∏è –ü–æ–∫—É–ø–∫–∏ ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
      ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ

    –ï—Å–ª–∏ –≤ JSON –Ω–µ—Ç ¬´—Ä—É—Å—Å–∫–∏—Ö¬ª –∫–ª—é—á–µ–π, —Ç–æ –ø—Ä–æ–±—É–µ–º ¬´–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ¬ª (haircut, travel, shopping, health).
    """
    day = date_obj.day
    lines: List[str] = []
    fav_all = rec.get("favorable_days", {})

    for rus_cat, (eng_key, emoji) in CATEGORY_MAPPING.items():
        fav_list = fav_all.get(rus_cat, {}).get("favorable", [])
        unf_list = fav_all.get(rus_cat, {}).get("unfavorable", [])

        if not fav_list and not unf_list:
            fav_list = fav_all.get(eng_key, {}).get("favorable", [])
            unf_list = fav_all.get(eng_key, {}).get("unfavorable", [])

        if day in fav_list:
            lines.append(f"{emoji} {rus_cat} ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")
        elif day in unf_list:
            lines.append(f"{emoji} {rus_cat} ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")

    return lines


def astro_events(
    offset_days: int = 1,
    show_all_voc: bool = False,
    tz: Union[str, pendulum.Timezone] = DEFAULT_TZ
) -> List[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª –¥–ª—è –ø–æ—Å—Ç–∞.

    offset_days:
      0 ‚Äî —Å–µ–≥–æ–¥–Ω—è
      1 ‚Äî –∑–∞–≤—Ç—Ä–∞
      2 ‚Äî –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
      –∏ —Ç. –¥.

    show_all_voc:
      False ‚Äî —Å–∫—Ä—ã—Ç—å VoC < 15 –º–∏–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
      True  ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π VoC (–¥–∞–∂–µ < 15 –º–∏–Ω)

    tz:
      –õ–∏–±–æ —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Europe/Kaliningrad"), –ª–∏–±–æ –æ–±—ä–µ–∫—Ç pendulum.Timezone.
      –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∫–∏–ø—Ä—Å–∫–∏–π ("Asia/Nicosia").

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–∫–∞–∂–¥–∞—è ‚Äî —Å–≤–æ–π ¬´bullet¬ª):
      1) ‚ö´Ô∏è VoC HH:mm‚ÄìHH:mm  (–µ—Å–ª–∏ –µ—Å—Ç—å)
      2) ‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å  –∏–ª–∏  ‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
      3) –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∞ ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ / ‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ / üõçÔ∏è –ü–æ–∫—É–ø–∫–∏ ‚Äî ‚Ä¶ / ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ ‚Äî ‚Ä¶)
      4) –§–∞–∑–∞ –õ—É–Ω—ã (–∏–º—è + –∑–Ω–∞–∫, –±–µ–∑ ¬´(XX% –æ—Å–≤–µ—â.)¬ª) –∏ —Å–æ–≤–µ—Ç—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ ¬´‚Ä¢ ‚Ä¶¬ª)
      5) next_event (¬´‚Üí –ß–µ—Ä–µ–∑ N –¥–Ω. ‚Ä¶¬ª) 
    """
    # –ü—Ä–∏–≤–µ–¥—ë–º tz –∫ –æ–±—ä–µ–∫—Ç—É pendulum.Timezone, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Ç—Ä–æ–∫—É
    if isinstance(tz, str):
        tz = pendulum.timezone(tz)

    # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É (—Å —É—á—ë—Ç–æ–º offset_days)
    target_date = pendulum.now(tz).date().add(days=offset_days)
    rec = get_day_lunar_info(target_date)
    if not rec:
        return []

    lines: List[str] = []

    # 1) VoC
    voc_line = _format_voc(rec, tz, show_all_voc)
    if voc_line:
        lines.append(voc_line)

    # 2) –û–±—â–∏–π –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
    gen_line = _format_general_day(rec, target_date)
    if gen_line:
        lines.append(gen_line)

    # 3) –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    lines.extend(_format_categories(rec, target_date))

    # 4) –§–∞–∑–∞ –õ—É–Ω—ã + —Å–æ–≤–µ—Ç—ã
    raw_phase = rec.get("phase", "").strip()
    # –û—Ç—Ä–µ–∑–∞–µ–º ¬´(XX% –æ—Å–≤–µ—â.)¬ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    phase = raw_phase.split("(")[0].strip()
    advice_list = rec.get("advice", []) or []

    if phase:
        lines.append(phase)
        for adv in advice_list:
            text = adv.strip()
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–µ—Ñ–∏–∫—Å-—á–∞—Å—Ç—å ¬´1. ¬ª, ¬´2) ¬ª –∏ —Ç.–ø.
            text = re.sub(r'^\s*\d+[\.\)]\s*', '', text)
            lines.append(f"‚Ä¢ {text}")

    # 5) next_event
    next_ev = rec.get("next_event", "").strip()
    if next_ev:
        lines.append(next_ev)

    return lines


# –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
if __name__ == "__main__":
    from pprint import pprint

    # –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (offset_days=0)
    print("=== –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ===")
    pprint(astro_events(offset_days=0, show_all_voc=False, tz="Asia/Nicosia"))
    print()

    # –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (offset_days=1)
    print("=== –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ===")
    pprint(astro_events(offset_days=1, show_all_voc=True, tz="Asia/Nicosia"))