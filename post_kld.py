#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_klg.py ‚Äì –≤–µ—á–µ—Ä–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ (–∫–∞–Ω–∞–ª @vaybometer_39reg)

–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ë–∞–ª—Ç–∏–π—Å–∫–æ–≥–æ –º–æ—Ä—è (–∫–æ–æ—Ä–¥. –ë–∞–ª—Ç–∏–π—Å–∫–∞)
‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å Europe/Kaliningrad
‚Ä¢ –í—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è—Ö¬ª (—à–æ–ø–∏–Ω–≥, —Å—Ç—Ä–∏–∂–∫–∏ –∏ –¥—Ä.)
‚Ä¢ –†—É—Å—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ –ø–æ–≥–æ–¥—ã
"""

from __future__ import annotations
import os, asyncio, json, logging
from pathlib import Path
from typing import Dict, Any, Tuple, Optional

import pendulum, requests
from requests.exceptions import RequestException
from telegram import Bot, error as tg_err

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ (–∏–∑ –æ–±—â–µ–≥–æ —Ä–µ–ø–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from utils   import compass, clouds_word, get_fact, AIR_EMOJI, pm_color, kp_emoji
from weather import get_weather, fetch_tomorrow_temps          # —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω—ã
from air     import get_air, get_kp
from pollen  import get_pollen
from schumann import get_schumann
from astro   import astro_events
from gpt     import gpt_blurb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ        = pendulum.timezone("Europe/Kaliningrad")
TODAY     = pendulum.now(TZ).date()
TOMORROW  = TODAY.add(days=1)

TOKEN   = os.getenv("TELEGRAM_TOKEN_KLG", "")
CHAT_ID = int(os.getenv("CHANNEL_ID_KLG", 0))

# –ö—Ä—É–ø–Ω—ã–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
MARINE = {                         # –≥–æ—Ä–æ–¥–∞ —É –º–æ—Ä—è
    "–ë–∞–ª—Ç–∏–π—Å–∫"     : (54.65, 19.90),
    "–Ø–Ω—Ç–∞—Ä–Ω—ã–π"     : (54.88, 19.94),
    "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫" : (54.96, 20.48),
    "–ü–∏–æ–Ω–µ—Ä—Å–∫–∏–π"   : (54.95, 20.22),
    "–°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫"  : (54.94, 20.15),
}

INLAND = {                         # –±–µ–∑ –≤—ã—Ö–æ–¥–∞ –∫ –º–æ—Ä—é
    "–ß–µ—Ä–Ω—è—Ö–æ–≤—Å–∫" : (54.64, 21.82),
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": (54.71, 20.51),
    "–û–∑—ë—Ä—Å–∫"     : (54.41, 22.03),
    "–ü—Ä–∞–≤–¥–∏–Ω—Å–∫"  : (54.44, 21.01),
    "–ù–µ–º–∞–Ω"      : (55.04, 22.03),
    "–ö—Ä–∞—Å–Ω–æ–∑–Ω–∞–º–µ–Ω—Å–∫": (54.94, 22.50),
    # ‚Ä¶ —Å–ø–∏—Å–æ–∫ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å
}

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Baltic SST ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_baltic_sst() -> Optional[float]:
    """–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ë–∞–ª—Ç–∏–π—Å–∫–æ–≥–æ –º–æ—Ä—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–ø–æ Baltiysk)."""
    lat, lon = MARINE["–ë–∞–ª—Ç–∏–π—Å–∫"]
    date_str = TOMORROW.to_date_string()
    url = "https://marine-api.open-meteo.com/v1/marine"
    params = {
        "latitude":  lat,
        "longitude": lon,
        "daily": "sea_surface_temperature_max,sea_surface_temperature_min",
        "start_date": date_str,
        "end_date":   date_str,
        "timezone":   "UTC",
    }
    try:
        r = requests.get(url, params=params, timeout=15)
        r.raise_for_status()
        daily = r.json().get("daily", {})
        tmax  = daily.get("sea_surface_temperature_max", [None])[0]
        tmin  = daily.get("sea_surface_temperature_min", [None])[0]
        if tmax is not None and tmin is not None:
            return round((tmax + tmin) / 2, 1)
    except RequestException as e:
        logging.warning("Baltic SST error: %s", e)
    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
WMO_DESC = {0:"—è—Å–Ω–æ",1:"—á–∞—Å—Ç. –æ–±–ª–∞—á.",2:"–æ–±–ª–∞—á–Ω–æ",3:"–ø–∞—Å–º—É—Ä–Ω–æ",
            45:"—Ç—É–º–∞–Ω",48:"–∏–∑–º–æ—Ä–æ–∑—å",51:"–º–æ—Ä–æ—Å—å",61:"–¥–æ–∂–¥—å",80:"–ª–∏–≤–µ–Ω—å"}

def code_icon(code: int) -> str:
    if code >= 61:   # –¥–æ–∂–¥–µ–≤—ã–µ –∫–æ–¥—ã
        return "üåß"
    if code in (0,1):
        return "‚òÄÔ∏è"
    if code in (2,3):
        return "‚òÅÔ∏è"
    return "üå´"

def pressure_arrow(hourly: Dict[str, Any]) -> str:
    p = hourly.get("surface_pressure", [])
    if len(p) < 2:
        return "‚Üí"
    delta = p[-1] - p[0]
    return "‚Üë" if delta > 1 else "‚Üì" if delta < -1 else "‚Üí"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: list[str] = []
    P.append(f"<b>üèñ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å: –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({TOMORROW.format('DD.MM.YYYY')})</b>")

    if (sst := get_baltic_sst()) is not None:
        P.append(f"üåä –¢–µ–º–ø. –º–æ—Ä—è: {sst:.1f} ¬∞C")

    # --- —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ ------------------------------------
    def city_row(city:str, lat:float, lon:float) -> Tuple[str,float,float,int]:
        d, n = fetch_tomorrow_temps(lat, lon, tz=TZ.name)
        w = get_weather(lat, lon) or {}
        code = w.get("daily", {}).get("weathercode", [0,0])[1]  # –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        return city, (d or 0), (n or d or 0), code

    marine_rows  = [city_row(c,*MARINE[c])  for c in MARINE]
    inland_rows  = [city_row(c,*INLAND[c])  for c in INLAND]

    marine_sorted = sorted(marine_rows, key=lambda r: r[1], reverse=True)[:5]
    warmest       = sorted(inland_rows, key=lambda r: r[1], reverse=True)[:3]
    coldest       = sorted(inland_rows, key=lambda r: r[1])[:3]

    P.append("üåÖ <b>–ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ø-5)</b>")
    for c,tmax,tmin,code in marine_sorted:
        P.append(f"{code_icon(code)} {c}: {tmax:.1f}/{tmin:.1f} ¬∞C, {WMO_DESC.get(code,'‚Äî')}")

    P.append("üî• <b>–¢—ë–ø–ª—ã–µ –≥–æ—Ä–æ–¥–∞</b>")
    for c,tmax,tmin,code in warmest:
        P.append(f"{code_icon(code)} {c}: {tmax:.1f} ¬∞C, {WMO_DESC.get(code,'‚Äî')}")

    P.append("‚ùÑÔ∏è <b>–•–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞</b>")
    for c,tmax,tmin,code in coldest:
        P.append(f"{code_icon(code)} {c}: {tmin:.1f} ¬∞C, {WMO_DESC.get(code,'‚Äî')}")

    P.append("‚Äî‚Äî‚Äî")

    # --- –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ / –ø—ã–ª—å—Ü–∞ --------------------------
    air = get_air() or {}
    lvl = air.get("lvl","–Ω/–¥")
    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | "
             f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")

    if (pollen := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {pollen['tree']} | –¢—Ä–∞–≤—ã: {pollen['grass']} | "
                 f"–°–æ—Ä–Ω—è–∫–∏: {pollen['weed']} ‚Äî —Ä–∏—Å–∫ {pollen['risk']}")
    P.append("‚Äî‚Äî‚Äî")

    # --- space weather --------------------------------------
    kp, kp_state = get_kp()
    P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({kp_state})" if kp else "üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")
    P.append(schumann_line(get_schumann()))
    P.append("‚Äî‚Äî‚Äî")

    # --- astro ----------------------------------------------
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    for line in astro_events(tz=TZ):      # –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π astro_events –ø—Ä–∏–Ω–∏–º–∞–µ—Ç TZ
        P.append(line)
    P.append("‚Äî‚Äî‚Äî")

    # --- GPT –≤—ã–≤–æ–¥ ------------------------------------------
    summary, tips = gpt_blurb("–ø–æ–≥–æ–¥–∞")
    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    if tips:
        P.append("‚Äî‚Äî‚Äî")
        P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
        for t in tips[:3]:
            P.append(f"‚Ä¢ {t}")
    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Schumann helper with emoji colour ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def schumann_line(sch: Dict[str, Any]) -> str:
    if sch.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f = sch["freq"]; amp = sch["amp"]; trend = sch["trend"]
    if f < 7.6:      emo = "üî¥"
    elif f > 8.1:    emo = "üü£"
    else:            emo = "üü¢"
    return f"{emo} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {trend}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram I/O ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    bot = Bot(token=TOKEN)
    try:
        await bot.send_message(
            CHAT_ID, build_msg(),
            parse_mode="HTML", disable_web_page_preview=True
        )
        logging.info("Kaliningrad message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise

if __name__ == "__main__":
    asyncio.run(main())
