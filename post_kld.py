# post_klg.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""–í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç –¥–ª—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏."""

from __future__ import annotations
import os, asyncio, logging
from typing import Dict, Tuple, List

import pendulum
from post_common import (
    TZ, TOMORROW, build_msg, tg_send,
    get_weather, fetch_tomorrow_temps, code_desc
)

# ‚îÄ‚îÄ –°–ï–ö–†–ï–¢–´ —ç—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN   = os.getenv("TELEGRAM_TOKEN_KLG", "")
CHAT_ID = int(os.getenv("CHANNEL_ID_KLG", 0))

# ‚îÄ‚îÄ –ì–û–†–û–î–ê –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SEA_CITIES = {
    "–ë–∞–ª—Ç–∏–π—Å–∫"    :(54.651, 19.914),
    "–°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫" :(54.942, 20.151),
    "–ü–∏–æ–Ω–µ—Ä—Å–∫–∏–π"  :(54.950, 20.231),
    "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫":(54.959, 20.476),
    "–Ø–Ω—Ç–∞—Ä–Ω—ã–π"    :(54.878, 19.947),
}
INLAND_CITIES = {
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥" :(54.710, 20.510),
    "–ì—É—Ä—å–µ–≤—Å–∫"    :(54.770, 20.602),
    "–°–≤–µ—Ç–ª—ã–π"     :(54.677, 20.134),
    "–°–æ–≤–µ—Ç—Å–∫"     :(55.078, 21.888),
    "–ß–µ—Ä–Ω—è—Ö–æ–≤—Å–∫"  :(54.640, 21.818),
    "–ì—É—Å–µ–≤"       :(54.563, 22.196),
    "–ù–µ–º–∞–Ω"       :(55.031, 22.030),
    "–ú–∞–º–æ–Ω–æ–≤–æ"    :(54.465, 19.937),
    "–ü–æ–ª–µ—Å—Å–∫"     :(54.862, 21.100),
    "–ë–∞–≥—Ä–∞—Ç–∏–æ–Ω–æ–≤—Å–∫":(54.387, 20.643),
    "–õ–∞–¥—É—à–∫–∏–Ω"    :(54.569, 20.172),
    "–ü—Ä–∞–≤–¥–∏–Ω—Å–∫"   :(54.443, 21.016),
    "–°–ª–∞–≤—Å–∫"      :(55.042, 21.674),
    "–û–∑—ë—Ä—Å–∫"      :(54.404, 22.013),
    "–ù–µ—Å—Ç–µ—Ä–æ–≤"    :(54.631, 22.567),
    "–ö—Ä–∞—Å–Ω–æ–∑–Ω–∞–º–µ–Ω—Å–∫":(54.946, 22.492),
    "–ì–≤–∞—Ä–¥–µ–π—Å–∫"   :(54.653, 21.064),
}

# ‚îÄ‚îÄ –°–±–æ—Ä–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _collect_temps(cities:Dict[str,Tuple[float,float]])->Dict[str,Tuple[float,float,int]]:
    out={}
    for name,(lat,lon) in cities.items():
        hi,lo = fetch_tomorrow_temps(lat,lon,tz=TZ.name)
        if hi is None: continue
        code = (get_weather(lat,lon) or {}).get("daily",{}).get("weathercode",[0,hi])[1]
        out[name]=(hi,lo or hi,code)
    return out

def build_city_blocks()->str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –¥–≤—É–º—è —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏."""
    sea  = _collect_temps(SEA_CITIES)
    land = _collect_temps(INLAND_CITIES)

    lines: List[str]=[]

    # —Ä–µ–π—Ç–∏–Ω–≥–∏ –º–æ—Ä—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ (—Ç–æ–ø-5 –ø–æ –¥–Ω–µ–≤–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ)
    if sea:
        lines.append("üèñÔ∏è <b>–ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ø-5)</b>")
        medals = ["ü•á","ü•à","ü•â","4Ô∏è‚É£","5Ô∏è‚É£"]
        for i,(name,(hi,lo,code)) in enumerate(
            sorted(sea.items(), key=lambda kv: kv[1][0], reverse=True)[:5]):
            lines.append(f"{medals[i]} {name}: {hi:.1f}/{lo:.1f} ¬∞C, {code_desc(code)}")
    # –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–µ: 3 —Å–∞–º—ã—Ö —Ç—ë–ø–ª—ã—Ö –∏ 3 —Å–∞–º—ã—Ö —Ö–æ–ª–æ–¥–Ω—ã—Ö
    if land:
        sorted_land = sorted(land.items(), key=lambda kv: kv[1][0], reverse=True)
        top3 = sorted_land[:3]; cold3 = sorted_land[-3:]
        lines.append("")
        lines.append("üèôÔ∏è <b>–¢—ë–ø–ª—ã–µ –≥–æ—Ä–æ–¥–∞</b>")
        for name,(hi,lo,code) in top3:
            lines.append(f"üî• {name}: {hi:.1f}/{lo:.1f} ¬∞C, {code_desc(code)}")
        lines.append("üå¨Ô∏è <b>–•–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞</b>")
        for name,(hi,lo,code) in cold3:
            lines.append(f"‚ùÑÔ∏è {name}: {hi:.1f}/{lo:.1f} ¬∞C, {code_desc(code)}")
    return "\n".join(lines)


# ‚îÄ‚îÄ MAIN runner ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main()->None:
    html = build_msg("–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", build_city_blocks(), culprit="–ø–æ–≥–æ–¥—É")
    await tg_send(TOKEN, CHAT_ID, html)

if __name__=="__main__":
    logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
    asyncio.run(main())
