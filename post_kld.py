#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_kld.py  ‚Ä¢  –ó–∞–ø—É—Å–∫ ¬´Kaliningrad daily post¬ª –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞.

–†–µ–∂–∏–º—ã:
  1) –û–±—ã—á–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ—Å—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç post_common.main_common().
  2) --fx-only           ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –±–ª–æ–∫ ¬´–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç¬ª.
  3) --dry-run           ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ workflow).
  4) --date YYYY-MM-DD   ‚Äî –¥–∞—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤/FX (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å–µ–≥–æ–¥–Ω—è –≤ TZ).
  5) --for-tomorrow      ‚Äî —Å–¥–≤–∏–≥ –¥–∞—Ç—ã +1 –¥–µ–Ω—å (—É–¥–æ–±–Ω–æ –¥–ª—è ¬´–ø–æ—Å—Ç–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞¬ª).

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TELEGRAM_TOKEN_KLG, CHANNEL_ID_KLG ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
  DISABLE_LLM_DAILY ‚Äî –µ—Å–ª–∏ "1"/"true" ‚Üí –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π LLM –æ—Ç–∫–ª—é—á—ë–Ω (—á—Ç–µ–Ω–∏–µ –≤ post_common).
  TZ (–æ–ø—Ü.) ‚Äî —Ç–∞–π–º–∑–æ–Ω–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Europe/Kaliningrad.
"""

from __future__ import annotations

import os
import sys
import argparse
import asyncio
import logging
from typing import Dict, Any

import pendulum
from telegram import Bot

from post_common import main_common  # –æ—Å–Ω–æ–≤–Ω–æ–π —Å–±–æ—Ä—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Secrets / Env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

TOKEN_KLG      = os.getenv("TELEGRAM_TOKEN_KLG", "")
CHANNEL_ID_KLG = os.getenv("CHANNEL_ID_KLG", "")

if not TOKEN_KLG or not CHANNEL_ID_KLG:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN_KLG –∏/–∏–ª–∏ CHANNEL_ID_KLG")
    sys.exit(1)

try:
    CHAT_ID_KLG = int(CHANNEL_ID_KLG)
except ValueError:
    logging.error("CHANNEL_ID_KLG –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890)")
    sys.exit(1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥–∏–æ–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

SEA_LABEL   = "–ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ø-5)"
OTHER_LABEL = "–°–ø–∏—Å–æ–∫ –Ω–µ-–º–æ—Ä—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ (—Ç—ë–ø–ª—ã–µ/—Ö–æ–ª–æ–¥–Ω—ã–µ)"

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ‚Äî –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TZ)
TZ_STR = os.getenv("TZ", "Europe/Kaliningrad")

SEA_CITIES_ORDERED = [
    ("–ë–∞–ª—Ç–∏–π—Å–∫",     (54.649, 20.055)),
    ("–Ø–Ω—Ç–∞—Ä–Ω—ã–π",     (54.912, 19.887)),
    ("–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫", (54.959, 20.478)),
    ("–ü–∏–æ–Ω–µ—Ä—Å–∫–∏–π",   (54.930, 19.825)),
    ("–°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫",  (54.952, 20.160)),
]

OTHER_CITIES_ALL = [
    ("–ì—É—Ä—å–µ–≤—Å–∫",        (54.658, 20.581)),
    ("–°–≤–µ—Ç–ª—ã–π",         (54.836, 19.767)),
    ("–°–æ–≤–µ—Ç—Å–∫",         (54.507, 21.347)),
    ("–ß–µ—Ä–Ω—è—Ö–æ–≤—Å–∫",      (54.630, 21.811)),
    ("–ì—É—Å–µ–≤",           (54.590, 22.205)),
    ("–ù–µ–º–∞–Ω",           (55.030, 21.877)),
    ("–ú–∞–º–æ–Ω–æ–≤–æ",        (54.657, 19.933)),
    ("–ü–æ–ª–µ—Å—Å–∫",         (54.809, 21.010)),
    ("–ë–∞–≥—Ä–∞—Ç–∏–æ–Ω–æ–≤—Å–∫",   (54.368, 20.632)),
    ("–õ–∞–¥—É—à–∫–∏–Ω",        (54.872, 19.706)),
    ("–ü—Ä–∞–≤–¥–∏–Ω—Å–∫",       (54.669, 21.330)),
    ("–°–ª–∞–≤—Å–∫",          (54.765, 21.644)),
    ("–û–∑—ë—Ä—Å–∫",          (54.717, 20.282)),
    ("–ù–µ—Å—Ç–µ—Ä–æ–≤",        (54.620, 21.647)),
    ("–ö—Ä–∞—Å–Ω–æ–∑–Ω–∞–º–µ–Ω—Å–∫",  (54.730, 21.104)),
    ("–ì–≤–∞—Ä–¥–µ–π—Å–∫",       (54.655, 21.078)),
]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FX helpers (–ª–æ–∫–∞–ª—å–Ω–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _load_fx_rates(date_local: pendulum.DateTime, tz: pendulum.timezone) -> Dict[str, Any]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å fx.py (–µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å).
    –û–∂–∏–¥–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: fx.get_rates(date=date_local, tz=tz) -> dict:
      {"USD":{"value":..,"delta":..},"EUR":{...},"CNY":{...}}
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ.
    """
    try:
        import importlib
        fx = importlib.import_module("fx")
        rates = fx.get_rates(date=date_local, tz=tz)  # type: ignore[attr-defined]
        return rates or {}
    except Exception as e:
        logging.warning(f"FX: –º–æ–¥—É–ª—å fx.py –Ω–µ –Ω–∞–π–¥–µ–Ω/–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def _fmt_delta(x: float | int | None) -> str:
    if x is None:
        return "0.00"
    try:
        x = float(x)
    except Exception:
        return "0.00"
    # –∑–Ω–∞–∫ –º–∏–Ω—É—Å–∞ ‚Äî —É–∑–∫–∏–π (‚Äì)
    sign = "‚àí" if x < 0 else ""
    return f"{sign}{abs(x):.2f}"

def _build_fx_message(date_local: pendulum.DateTime, tz: pendulum.timezone) -> str:
    rates = _load_fx_rates(date_local, tz)
    def token(code: str, name: str) -> str:
        r = rates.get(code) or {}
        val = r.get("value")
        dlt = r.get("delta")
        if val is None:
            return f"{name}: ‚Äî ‚ÇΩ (‚Äî)"
        try:
            val_s = f"{float(val):.2f}"
        except Exception:
            val_s = "‚Äî"
        return f"{name}: {val_s} ‚ÇΩ ({_fmt_delta(dlt)})"

    line = " ‚Ä¢ ".join([token("USD", "USD"), token("EUR", "EUR"), token("CNY", "CNY")])
    title = "üí± <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç</b>"
    return f"{title}\n{line}"

async def _send_fx_only(bot: Bot, chat_id: int, date_local: pendulum.DateTime, tz: pendulum.timezone, dry_run: bool) -> None:
    text = _build_fx_message(date_local, tz)
    if dry_run:
        logging.info("DRY-RUN (fx-only):\n" + text)
        return
    await bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML", disable_web_page_preview=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def main_kld() -> None:
    parser = argparse.ArgumentParser(description="Kaliningrad daily post runner")
    parser.add_argument("--date", type=str, default="", help="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å–µ–≥–æ–¥–Ω—è –≤ TZ)")
    parser.add_argument("--for-tomorrow", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É +1 –¥–µ–Ω—å")
    parser.add_argument("--dry-run", action="store_true", help="–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥")
    parser.add_argument("--fx-only", action="store_true", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–ª–æ–∫ ¬´–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç¬ª")
    args = parser.parse_args()

    tz = pendulum.timezone(TZ_STR)
    base_date = pendulum.parse(args.date).in_tz(tz) if args.date else pendulum.now(tz)
    if args.for_tomorrow:
        base_date = base_date.add(days=1)

    bot = Bot(token=TOKEN_KLG)

    if args.fx_only:
        await _send_fx_only(bot, CHAT_ID_KLG, base_date, tz, dry_run=args.dry_run)
        return

    if args.dry_run:
        logging.info("DRY-RUN: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
        return

    # –û–±—ã—á–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ—Å—Ç
    await main_common(
        bot=bot,
        chat_id=CHAT_ID_KLG,
        region_name="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        sea_label=SEA_LABEL,
        sea_cities=SEA_CITIES_ORDERED,
        other_label=OTHER_LABEL,
        other_cities=OTHER_CITIES_ALL,
        tz=TZ_STR,  # post_common —Å–∞–º –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ pendulum.timezone
    )

if __name__ == "__main__":
    asyncio.run(main_kld())