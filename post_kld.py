#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_kld.py  ‚Ä¢  –ó–∞–ø—É—Å–∫ ¬´Kaliningrad daily post¬ª –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞.

–†–µ–∂–∏–º—ã:
  1) --mode evening      ‚Äî –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç (–∞–Ω–æ–Ω—Å ¬´–Ω–∞ –∑–∞–≤—Ç—Ä–∞¬ª) ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
  2) --mode morning      ‚Äî —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç (¬´–Ω–∞ —Å–µ–≥–æ–¥–Ω—è¬ª), —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –≤ –ö–∏–ø—Ä–µ.
  3) --fx-only           ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –±–ª–æ–∫ ¬´–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç¬ª.
  4) --dry-run           ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç (–ª–æ–≥ –≤–º–µ—Å—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏).
  5) --date YYYY-MM-DD   ‚Äî –±–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±–µ—Ä—ë–º WORK_DATE –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤ TZ).
  6) --for-tomorrow      ‚Äî —Å–¥–≤–∏–≥ –±–∞–∑–æ–≤–æ–π –¥–∞—Ç—ã +1 –¥–µ–Ω—å (—É–¥–æ–±–Ω–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞).
  7) --to-test           ‚Äî –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª (CHANNEL_ID_TEST).
  8) --chat-id ID        ‚Äî —è–≤–Ω—ã–π chat_id –∫–∞–Ω–∞–ª–∞ (–ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ).

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TELEGRAM_TOKEN_KLG  ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
  CHANNEL_ID_KLG      ‚Äî ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω --chat-id/--to-test).
  CHANNEL_ID_TEST     ‚Äî ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è --to-test).
  CHANNEL_ID_OVERRIDE ‚Äî —è–≤–Ω—ã–π chat_id (–ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –≤—Å—ë; —É–¥–æ–±–Ω–æ –≤ Actions inputs).
  TZ                  ‚Äî —Ç–∞–π–º–∑–æ–Ω–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Europe/Kaliningrad.
  WORK_DATE           ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é –¥–∞—Ç—É (YYYY-MM-DD).
  MODE                ‚Äî –¥–µ—Ñ–æ–ª—Ç –¥–ª—è --mode (morning/evening). CLI –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
  –§–ª–∞–≥–∏ –ø–æ–∫–∞–∑–∞ –±–ª–æ–∫–æ–≤ —Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞—é—Ç—Å—è –∑–¥–µ—Å—å –∂—ë—Å—Ç–∫–æ (SHOW_AIR/SHOW_SPACE/SHOW_SCHUMANN),
  —á—Ç–æ–±—ã —É—Ç—Ä–µ–Ω–Ω–∏–π –∏ –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–ª–∏—á–∞–ª–∏—Å—å –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.
"""

from __future__ import annotations

import os
import sys
import argparse
import asyncio
import logging
from typing import Dict, Any, Tuple
from pathlib import Path

import pendulum
from telegram import Bot

from post_common import main_common  # –æ—Å–Ω–æ–≤–Ω–æ–π —Å–±–æ—Ä—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Secrets / Env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

TOKEN_KLG = os.getenv("TELEGRAM_TOKEN_KLG", "")
if not TOKEN_KLG:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN_KLG")
    sys.exit(1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥–∏–æ–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

SEA_LABEL   = "–ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞"
OTHER_LABEL = "–°–ø–∏—Å–æ–∫ –Ω–µ-–º–æ—Ä—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ (—Ç—ë–ø–ª—ã–µ/—Ö–æ–ª–æ–¥–Ω—ã–µ)"

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ‚Äî –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TZ)
TZ_STR = os.getenv("TZ", "Europe/Kaliningrad")

SEA_CITIES_ORDERED = [
    ("–ë–∞–ª—Ç–∏–π—Å–∫",     (54.649, 20.055)),
    ("–Ø–Ω—Ç–∞—Ä–Ω—ã–π",     (54.912, 19.887)),
    ("–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫", (54.959, 20.478)),
    ("–ü–∏–æ–Ω–µ—Ä—Å–∫–∏–π",   (54.930, 19.825)),
    ("–°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫",  (54.952, 20.160)),
]

OTHER_CITIES_ALL = [
    ("–ì—É—Ä—å–µ–≤—Å–∫",        (54.658, 20.581)),
    ("–°–≤–µ—Ç–ª—ã–π",         (54.836, 19.767)),
    ("–°–æ–≤–µ—Ç—Å–∫",         (54.507, 21.347)),
    ("–ß–µ—Ä–Ω—è—Ö–æ–≤—Å–∫",      (54.630, 21.811)),
    ("–ì—É—Å–µ–≤",           (54.590, 22.205)),
    ("–ù–µ–º–∞–Ω",           (55.030, 21.877)),
    ("–ú–∞–º–æ–Ω–æ–≤–æ",        (54.657, 19.933)),
    ("–ü–æ–ª–µ—Å—Å–∫",         (54.809, 21.010)),
    ("–ë–∞–≥—Ä–∞—Ç–∏–æ–Ω–æ–≤—Å–∫",   (54.368, 20.632)),
    ("–õ–∞–¥—É—à–∫–∏–Ω",        (54.872, 19.706)),
    ("–ü—Ä–∞–≤–¥–∏–Ω—Å–∫",       (54.669, 21.330)),
    ("–°–ª–∞–≤—Å–∫",          (54.765, 21.644)),
    ("–û–∑—ë—Ä—Å–∫",          (54.717, 20.282)),
    ("–ù–µ—Å—Ç–µ—Ä–æ–≤",        (54.620, 21.647)),
    ("–ö—Ä–∞—Å–Ω–æ–∑–Ω–∞–º–µ–Ω—Å–∫",  (54.730, 21.104)),
    ("–ì–≤–∞—Ä–¥–µ–π—Å–∫",       (54.655, 21.078)),
]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FX helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

FX_CACHE_PATH = Path("fx_cache.json")  # –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à –¥–ª—è FX-–ø–æ—Å—Ç–æ–≤

def _fmt_delta(x: float | int | None) -> str:
    if x is None:
        return "0.00"
    try:
        x = float(x)
    except Exception:
        return "0.00"
    # –∑–Ω–∞–∫ –º–∏–Ω—É—Å–∞ ‚Äî —É–∑–∫–∏–π (‚àí)
    sign = "‚àí" if x < 0 else ""
    return f"{sign}{abs(x):.2f}"

def _load_fx_rates(date_local: pendulum.DateTime, tz: pendulum.Timezone) -> Dict[str, Any]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å fx.py (–µ—Å–ª–∏ –æ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ).
    –û–∂–∏–¥–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: fx.get_rates(date=date_local, tz=tz) -> dict.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ.
    """
    try:
        import importlib
        fx = importlib.import_module("fx")
        rates = fx.get_rates(date=date_local, tz=tz)  # type: ignore[attr-defined]
        return rates or {}
    except Exception as e:
        logging.warning("FX: –º–æ–¥—É–ª—å fx.py –Ω–µ –Ω–∞–π–¥–µ–Ω/–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %s", e)
        return {}

def _build_fx_message(date_local: pendulum.DateTime, tz: pendulum.Timezone) -> Tuple[str, Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–µ–∫—Å—Ç_–ø–æ—Å—Ç–∞, —Å–ª–æ–≤–∞—Ä—å_rates) –¥–ª—è –±–ª–æ–∫–∞ ¬´–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç¬ª."""
    rates = _load_fx_rates(date_local, tz)

    def token(code: str, name: str) -> str:
        r = rates.get(code) or {}
        val = r.get("value")
        dlt = r.get("delta")
        if val is None:
            return f"{name}: ‚Äî ‚ÇΩ (‚Äî)"
        try:
            val_s = f"{float(val):.2f}"
        except Exception:
            val_s = "‚Äî"
        return f"{name}: {val_s} ‚ÇΩ ({_fmt_delta(dlt)})"

    line = " ‚Ä¢ ".join([token("USD", "USD"), token("EUR", "EUR"), token("CNY", "CNY")])
    title = "üí± <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç</b>"
    return f"{title}\n{line}", rates

def _normalize_cbr_date(raw) -> str | None:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—É –¶–ë –∫ —Å—Ç—Ä–æ–∫–µ 'YYYY-MM-DD' –≤ TZ –ú–æ—Å–∫–≤—ã.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã: pendulum Date/DateTime, unix timestamp, ISO-—Å—Ç—Ä–æ–∫–∞ –∏ —Ç.–ø.
    """
    if raw is None:
        return None
    # pendulum Date/DateTime
    if hasattr(raw, "to_date_string"):
        try:
            return raw.to_date_string()
        except Exception:
            pass
    # unix timestamp
    if isinstance(raw, (int, float)):
        try:
            return pendulum.from_timestamp(int(raw), tz="Europe/Moscow").to_date_string()
        except Exception:
            return None
    # —Å—Ç—Ä–æ–∫–∞
    try:
        s = str(raw).strip()
        if "T" in s or " " in s:
            return pendulum.parse(s, tz="Europe/Moscow").to_date_string()
        pendulum.parse(s, tz="Europe/Moscow")  # –≤–∞–ª–∏–¥–∞—Ü–∏—è
        return s
    except Exception:
        return None

async def _send_fx_only(
    bot: Bot,
    chat_id: int,
    date_local: pendulum.DateTime,
    tz: pendulum.Timezone,
    dry_run: bool
) -> None:
    text, rates = _build_fx_message(date_local, tz)

    raw_date = rates.get("as_of") or rates.get("date") or rates.get("cbr_date")
    cbr_date = _normalize_cbr_date(raw_date)

    try:
        import importlib
        fx = importlib.import_module("fx")
        if cbr_date and hasattr(fx, "should_publish_again"):  # type: ignore[attr-defined]
            should = fx.should_publish_again(FX_CACHE_PATH, cbr_date)  # type: ignore[attr-defined]
            if not should:
                logging.info("–ö—É—Ä—Å—ã –¶–ë –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å ‚Äî –ø–æ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
                return
    except Exception as e:
        logging.warning("FX: skip-check failed (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É): %s", e)

    if dry_run:
        logging.info("DRY-RUN (fx-only):\n" + text)
        return

    await bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML", disable_web_page_preview=True)

    try:
        import importlib
        fx = importlib.import_module("fx")
        if cbr_date and hasattr(fx, "save_fx_cache"):  # type: ignore[attr-defined]
            fx.save_fx_cache(FX_CACHE_PATH, cbr_date, text)  # type: ignore[attr-defined]
    except Exception as e:
        logging.warning("FX: save cache failed: %s", e)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Chat selection ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def resolve_chat_id(args_chat: str, to_test: bool) -> int:
    """
    –í—ã–±–∏—Ä–∞–µ—Ç chat_id –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:
      1) --chat-id / CHANNEL_ID_OVERRIDE
      2) --to-test  ‚Üí CHANNEL_ID_TEST
      3) CHANNEL_ID_KLG
    """
    chat_override = (args_chat or "").strip() or os.getenv("CHANNEL_ID_OVERRIDE", "").strip()
    if chat_override:
        try:
            return int(chat_override)
        except Exception:
            logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id (override): %r", chat_override)
            sys.exit(1)

    if to_test:
        ch_test = os.getenv("CHANNEL_ID_TEST", "").strip()
        if not ch_test:
            logging.error("--to-test –∑–∞–¥–∞–Ω, –Ω–æ CHANNEL_ID_TEST –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
            sys.exit(1)
        try:
            return int(ch_test)
        except Exception:
            logging.error("CHANNEL_ID_TEST –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", ch_test)
            sys.exit(1)

    ch_main = os.getenv("CHANNEL_ID_KLG", "").strip()
    if not ch_main:
        logging.error("CHANNEL_ID_KLG –Ω–µ –∑–∞–¥–∞–Ω –∏ –Ω–µ —É–∫–∞–∑–∞–Ω --chat-id/override")
        sys.exit(1)
    try:
        return int(ch_main)
    except Exception:
        logging.error("CHANNEL_ID_KLG –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", ch_main)
        sys.exit(1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞—Ç—á –¥–∞—Ç—ã –¥–ª—è –≤—Å–µ–≥–æ –ø–æ—Å—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

class _TodayPatch:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–¥–º–µ–Ω—ã `pendulum.today()` –∏ `pendulum.now()`."""

    def __init__(self, base_date: pendulum.DateTime):
        self.base_date = base_date
        self._orig_today = None
        self._orig_now = None

    def __enter__(self):
        self._orig_today = pendulum.today
        self._orig_now = pendulum.now

        def _fake(dt: pendulum.DateTime, tz_arg=None):
            return dt.in_tz(tz_arg) if tz_arg else dt

        pendulum.today = lambda tz_arg=None: _fake(self.base_date, tz_arg)  # type: ignore[assignment]
        pendulum.now = lambda tz_arg=None: _fake(self.base_date, tz_arg)    # type: ignore[assignment]

        logging.info(
            "–î–∞—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ %s (TZ %s)",
            self.base_date.to_datetime_string(),
            self.base_date.timezone_name,
        )
        return self

    def __exit__(self, exc_type, exc, tb):
        if self._orig_today:
            pendulum.today = self._orig_today  # type: ignore[assignment]
        if self._orig_now:
            pendulum.now = self._orig_now  # type: ignore[assignment]
        return False  # –Ω–µ –ø–æ–¥–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def main_kld() -> None:
    parser = argparse.ArgumentParser(description="Kaliningrad daily post runner")
    parser.add_argument("--mode",
                        choices=["morning", "evening"],
                        default=(os.getenv("MODE") or "evening"),
                        help="–†–µ–∂–∏–º –ø–æ—Å—Ç–∞: morning ‚Äî –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, evening ‚Äî –∞–Ω–æ–Ω—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).")
    parser.add_argument("--date", type=str, default="", help="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî WORK_DATE –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤ TZ)")
    parser.add_argument("--for-tomorrow", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É +1 –¥–µ–Ω—å")
    parser.add_argument("--dry-run", action="store_true", help="–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥")
    parser.add_argument("--fx-only", action="store_true", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–ª–æ–∫ ¬´–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç¬ª")
    parser.add_argument("--to-test", action="store_true", help="–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª (CHANNEL_ID_TEST)")
    parser.add_argument("--chat-id", type=str, default="", help="–Ø–≤–Ω—ã–π chat_id –∫–∞–Ω–∞–ª–∞ (–ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ)")
    args = parser.parse_args()

    tz = pendulum.timezone(TZ_STR)

    # –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞: CLI > WORK_DATE > now(tz)
    raw_date = args.date.strip() or os.getenv("WORK_DATE", "").strip()
    base_date = pendulum.parse(raw_date).in_tz(tz) if raw_date else pendulum.now(tz)
    if args.for_tomorrow:
        base_date = base_date.add(days=1)

    # –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    mode = (args.mode or "evening").lower().strip()
    logging.info("–†–µ–∂–∏–º –ø–æ—Å—Ç–∞: %s", mode)

    # ‚îÄ‚îÄ –ü—Ä–æ–∫–∏–Ω–µ–º —Ñ–ª–∞–≥–∏ –≤ post_common (–∂—ë—Å—Ç–∫–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞)
    # DAY_OFFSET/ASTRO_OFFSET: 0 –¥–ª—è morning, 1 –¥–ª—è evening
    day_offset = 0 if mode == "morning" else 1
    os.environ["POST_MODE"] = mode
    os.environ["DAY_OFFSET"] = str(day_offset)
    os.environ["ASTRO_OFFSET"] = str(day_offset)

    # –ü–æ–∫–∞–∑ –±–ª–æ–∫–æ–≤
    if mode == "morning":
        os.environ["SHOW_AIR"] = "1"
        os.environ["SHOW_SPACE"] = "1"
        # —É—á–∏—Ç—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π DISABLE_SCHUMANN (–µ—Å–ª–∏ –±—ã–ª "1", —Ç–æ –Ω–∏–∂–µ –±–ª–æ–∫ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è)
        os.environ["SHOW_SCHUMANN"] = "1"
    else:  # evening
        os.environ["SHOW_AIR"] = "0"
        os.environ["SHOW_SPACE"] = "0"
        os.environ["SHOW_SCHUMANN"] = "0"

    logging.info("–§–ª–∞–≥–∏ –≤—ã–≤–æ–¥a: DAY_OFFSET=%s, ASTRO_OFFSET=%s, AIR=%s, SPACE=%s, SCHUMANN=%s",
                 os.environ.get("DAY_OFFSET"), os.environ.get("ASTRO_OFFSET"),
                 os.environ.get("SHOW_AIR"), os.environ.get("SHOW_SPACE"), os.environ.get("SHOW_SCHUMANN"))

    chat_id = resolve_chat_id(args.chat_id, args.to_test)
    bot = Bot(token=TOKEN_KLG)

    # –ü–æ–¥–º–µ–Ω—è–µ–º pendulum.today/now, —á—Ç–æ–±—ã –≤–µ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π –∫–æ–¥ –≤–∏–¥–µ–ª –Ω—É–∂–Ω—É—é –¥–∞—Ç—É
    with _TodayPatch(base_date):
        if args.fx_only:
            await _send_fx_only(bot, chat_id, base_date, tz, dry_run=args.dry_run)
            return

        if args.dry_run:
            logging.info("DRY-RUN: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
            return

        # –û–±—ã—á–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ—Å—Ç (—Ñ–æ—Ä–º–∞—Ç/–∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ post_common –ø–æ ENV –≤—ã—à–µ)
        await main_common(
            bot=bot,
            chat_id=chat_id,
            region_name="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            sea_label=SEA_LABEL,
            sea_cities=SEA_CITIES_ORDERED,
            other_label=OTHER_LABEL,
            other_cities=OTHER_CITIES_ALL,
            tz=TZ_STR,  # post_common —Å–∞–º –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ pendulum.timezone
        )

if __name__ == "__main__":
    asyncio.run(main_kld())