#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
air.py
~~~~~~

‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞:
  1) IQAir / nearest_city  (API key: AIRVISUAL_KEY)
  2) Open-Meteo Air-Quality (–±–µ–∑ –∫–ª—é—á–∞)

‚Ä¢ merge_air_sources() ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º IQAir ‚Üí Open-M–µ—Ç–µ–æ
‚Ä¢ get_air(lat, lon)      ‚Äî {'lvl','aqi','pm25','pm10','src','src_emoji','src_icon'}
‚Ä¢ get_sst(lat, lon)      ‚Äî Sea Surface Temperature (–ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É —á–∞—Å—É)
‚Ä¢ get_geomag()           ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–π 3-—á–∞—Å–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å Kp (+ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∫—ç—à)
‚Ä¢ get_kp()               ‚Äî –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: (kp, state) –∏–∑ get_geomag()

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- Open-Mete–æ: –±–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É –ø—Ä–æ—à–µ–¥—à–µ–º—É —á–∞—Å—É (UTC).
- SST: —Ç–æ –∂–µ –ø—Ä–∞–≤–∏–ª–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —á–∞—Å–∞.
- –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û 3-—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç SWPC (noaa-planetary-k-index.json),
  –±–µ–∑ 1-–º–∏–Ω—É—Ç–Ω–æ–≥–æ nowcast, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å ¬´—Å–∫–∞—á–∫–∏¬ª.
"""

from __future__ import annotations
import os
import time
import json
import math
import logging
from pathlib import Path
from typing import Any, Dict, Optional, Tuple, Union, List

from utils import _get  # HTTP-–æ–±—ë—Ä—Ç–∫–∞ (_get_retry –≤–Ω—É—Ç—Ä–∏)

__all__ = ("get_air", "get_sst", "get_geomag", "get_kp")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã / –∫–µ—à ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

AIR_KEY = os.getenv("AIRVISUAL_KEY")

CACHE_DIR = Path.home() / ".cache" / "vaybometer"
CACHE_DIR.mkdir(parents=True, exist_ok=True)

KP_CACHE = CACHE_DIR / "kp.json"  # –∫—ç—à —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π get_geomag()
KP_3H_URL = "https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json"

SRC_EMOJI = {"iqair": "üì°", "openmeteo": "üõ∞", "n/d": "‚ö™"}
SRC_ICON  = {"iqair": "üì° IQAir", "openmeteo": "üõ∞ OM", "n/d": "‚ö™ –Ω/–¥"}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç—ã AQI/Kp ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _aqi_level(aqi: Union[int, float, str, None]) -> str:
    if aqi in (None, "–Ω/–¥"):
        return "–Ω/–¥"
    try:
        v = float(aqi)
    except (TypeError, ValueError):
        return "–Ω/–¥"
    if v <= 50: return "—Ö–æ—Ä–æ—à–∏–π"
    if v <= 100: return "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
    if v <= 150: return "–≤—Ä–µ–¥–Ω—ã–π"
    if v <= 200: return "–æ—á. –≤—Ä–µ–¥–Ω—ã–π"
    return "–æ–ø–∞—Å–Ω—ã–π"

def _kp_state(kp: float) -> str:
    if kp < 3.0: return "—Å–ø–æ–∫–æ–π–Ω–æ"
    if kp < 5.0: return "–Ω–µ—Å–ø–æ–∫–æ–π–Ω–æ"
    return "–±—É—Ä—è"

def _pick_nearest_hour(arr_time: List[str], arr_val: List[Any]) -> Optional[float]:
    """–ë–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É –ø—Ä–æ—à–µ–¥—à–µ–º—É —á–∞—Å—É (UTC)."""
    if not arr_time or not arr_val or len(arr_time) != len(arr_val):
        return None
    try:
        now_iso = time.strftime("%Y-%m-%dT%H:00", time.gmtime())
        idxs = [i for i, t in enumerate(arr_time) if isinstance(t, str) and t <= now_iso]
        idx = max(idxs) if idxs else 0
        v = arr_val[idx]
        if not isinstance(v, (int, float)):
            return None
        v = float(v)
        return v if (math.isfinite(v) and v >= 0) else None
    except Exception:
        return None

def _minutes_ago(ts_iso: str) -> Optional[int]:
    """–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ UTC –±—ã–ª ts_iso (YYYY-MM-DDTHH:MM:SSZ / ...)."""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ¬´YYYY-MM-DDTHH:MM:SSZ¬ª ‚Üí –±–µ–∑ 'Z'
        ts_iso = str(ts_iso).rstrip("Z")
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ –º–∏–Ω—É—Ç (—á—Ç–æ–±—ã –Ω–µ —Å–ø–æ—Ç–∫–Ω—É—Ç—å—Å—è –æ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
        base = ts_iso[:16]  # YYYY-MM-DDTHH:MM
        tm = time.strptime(base, "%Y-%m-%dT%H:%M")
        ts = int(time.mktime(tm))  # –ª–æ–∫–∞–ª—å -> –Ω–æ –º—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É, –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–∞
        return max(0, int(time.time()) - ts) // 60
    except Exception:
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ AQI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _src_iqair(lat: float, lon: float) -> Optional[Dict[str, Any]]:
    if not AIR_KEY:
        return None
    try:
        resp = _get(
            "https://api.airvisual.com/v2/nearest_city",
            lat=lat, lon=lon, key=AIR_KEY,
        )
    except Exception as e:
        logging.warning("IQAir request error: %s", e)
        return None
    if not resp or "data" not in resp:
        return None
    try:
        pol = resp["data"]["current"].get("pollution", {}) or {}
        aqi_val  = pol.get("aqius")
        pm25_val = pol.get("p2")
        pm10_val = pol.get("p1")
        return {
            "aqi":  float(aqi_val)  if isinstance(aqi_val,  (int, float)) else None,
            "pm25": float(pm25_val) if isinstance(pm25_val, (int, float)) else None,
            "pm10": float(pm10_val) if isinstance(pm10_val, (int, float)) else None,
            "src": "iqair",
        }
    except Exception as e:
        logging.warning("IQAir parse error: %s", e)
        return None

def _src_openmeteo(lat: float, lon: float) -> Optional[Dict[str, Any]]:
    try:
        resp = _get(
            "https://air-quality-api.open-meteo.com/v1/air-quality",
            latitude=lat, longitude=lon,
            hourly="pm10,pm2_5,us_aqi", timezone="UTC",
        )
    except Exception as e:
        logging.warning("Open-Meteo AQ request error: %s", e)
        return None
    if not resp or "hourly" not in resp:
        return None
    try:
        h = resp["hourly"]
        times = h.get("time", []) or []
        aqi_val  = _pick_nearest_hour(times, h.get("us_aqi", []) or [])
        pm25_val = _pick_nearest_hour(times, h.get("pm2_5", []) or [])
        pm10_val = _pick_nearest_hour(times, h.get("pm10", [])  or [])
        aqi_norm: Union[float, str] = float(aqi_val)  if isinstance(aqi_val,  (int, float)) and math.isfinite(aqi_val)  and aqi_val  >= 0 else "–Ω/–¥"
        pm25_norm = float(pm25_val) if isinstance(pm25_val, (int, float)) and math.isfinite(pm25_val) and pm25_val >= 0 else None
        pm10_norm = float(pm10_val) if isinstance(pm10_val, (int, float)) and math.isfinite(pm10_val) and pm10_val >= 0 else None
        return {"aqi": aqi_norm, "pm25": pm25_norm, "pm10": pm10_norm, "src": "openmeteo"}
    except Exception as e:
        logging.warning("Open-Meteo AQ parse error: %s", e)
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Merge AQI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def merge_air_sources(src1: Optional[Dict[str, Any]], src2: Optional[Dict[str, Any]]) -> Dict[str, Any]:
    """
    –°–æ–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ AQI (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç src1 ‚Üí src2).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'lvl','aqi','pm25','pm10','src','src_emoji','src_icon'}.
    """
    aqi_val: Union[float, str, None] = "–Ω/–¥"
    src_tag: str = "n/d"

    # AQI –∏—Å—Ç–æ—á–Ω–∏–∫
    for s in (src1, src2):
        if not s:
            continue
        v = s.get("aqi")
        if isinstance(v, (int, float)) and math.isfinite(v) and v >= 0:
            aqi_val = float(v)
            src_tag = s.get("src") or src_tag
            break

    # PM first-non-null
    pm25 = None
    pm10 = None
    for s in (src1, src2):
        if not s:
            continue
        if pm25 is None and isinstance(s.get("pm25"), (int, float)) and math.isfinite(s["pm25"]):
            pm25 = float(s["pm25"])
        if pm10 is None and isinstance(s.get("pm10"), (int, float)) and math.isfinite(s["pm10"]):
            pm10 = float(s["pm10"])

    lvl = _aqi_level(aqi_val)
    src_emoji = SRC_EMOJI.get(src_tag, SRC_EMOJI["n/d"])
    src_icon  = SRC_ICON.get(src_tag,  SRC_ICON["n/d"])

    return {
        "lvl": lvl,
        "aqi": aqi_val,
        "pm25": pm25,
        "pm10": pm10,
        "src": src_tag,
        "src_emoji": src_emoji,
        "src_icon": src_icon,
    }

def get_air(lat: float, lon: float) -> Dict[str, Any]:
    try:
        src1 = _src_iqair(lat, lon)
    except Exception:
        src1 = None
    try:
        src2 = _src_openmeteo(lat, lon)
    except Exception:
        src2 = None
    return merge_air_sources(src1, src2)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ SST (–ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É —á–∞—Å—É) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def get_sst(lat: float, lon: float) -> Optional[float]:
    try:
        resp = _get(
            "https://marine-api.open-meteo.com/v1/marine",
            latitude=lat, longitude=lon,
            hourly="sea_surface_temperature", timezone="UTC",
        )
    except Exception as e:
        logging.warning("Marine SST request error: %s", e)
        return None
    if not resp or "hourly" not in resp:
        return None
    try:
        h = resp["hourly"]
        times = h.get("time", []) or []
        vals  = h.get("sea_surface_temperature", []) or []
        v = _pick_nearest_hour(times, vals)
        return float(v) if isinstance(v, (int, float)) else None
    except Exception as e:
        logging.warning("Marine SST parse error: %s", e)
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö—ç—à JSON ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _load_json(path: Path) -> Optional[Dict[str, Any]]:
    try:
        return json.loads(path.read_text(encoding="utf-8"))
    except Exception:
        return None

def _save_json(path: Path, data: Dict[str, Any]) -> None:
    try:
        path.write_text(json.dumps(data, ensure_ascii=False), encoding="utf-8")
    except Exception as e:
        logging.warning("Cache write error %s: %s", path, e)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Kp: –¢–û–õ–¨–ö–û —Å—Ç–∞–±–∏–ª—å–Ω—ã–π 3h ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _parse_kp_from_table(data: Any) -> Optional[Tuple[float, str]]:
    """
    –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑ noaa-planetary-k-index.json:
      [ [header...],
        ["2025-08-30 09:00:00", "0.3"],
        ... ]
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (kp_float, ts_iso) –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ.
    """
    if not isinstance(data, list) or len(data) < 2:
        return None
    # –ò–¥—ë–º —Å –∫–æ–Ω—Ü–∞, –∏—â–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–∏–≥–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
    for row in reversed(data[1:]):
        if not isinstance(row, list) or len(row) < 2:
            continue
        ts = str(row[0]).strip().replace(" ", "T")  # ‚Üí YYYY-MM-DDTHH:MM:SS
        raw = row[-1]
        try:
            kp_val = float(str(raw).replace(",", "."))
            if math.isfinite(kp_val):
                return kp_val, ts
        except Exception:
            continue
    return None

def get_geomag() -> Dict[str, Any]:
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ –∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ 3-—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ SWPC.
    –ë–µ–∑ nowcast. –ï—Å–ª–∏ —Å–µ—Ç–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à (–¥–æ 6 —á–∞—Å–æ–≤).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      {'kp','state','ts','age_min','src':'swpc_3h','window':'3h'}
    """
    # –û–Ω–ª–∞–π–Ω –ø–æ–ø—ã—Ç–∫–∞
    try:
        data = _get(KP_3H_URL)
        if isinstance(data, list):
            parsed = _parse_kp_from_table(data)
            if parsed:
                kp_val, ts = parsed
                res = {
                    "kp": kp_val,
                    "state": _kp_state(kp_val),
                    "ts": ts,
                    "age_min": _minutes_ago(ts),
                    "src": "swpc_3h",
                    "window": "3h",
                }
                _save_json(KP_CACHE, res)
                return res
    except Exception as e:
        logging.warning("Kp 3h request/parse error: %s", e)

    # –§–æ–ª–ª–±—ç–∫ ‚Äî –∫—ç—à (–¥–æ 6 —á–∞—Å–æ–≤ —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–µ–º–ª–µ–º—ã–º)
    cached = _load_json(KP_CACHE)
    if isinstance(cached, dict) and "kp" in cached:
        age = cached.get("age_min")
        # –µ—Å–ª–∏ age –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –æ—Ç ts
        if age is None and isinstance(cached.get("ts"), str):
            cached["age_min"] = _minutes_ago(cached["ts"])
            age = cached["age_min"]
        if isinstance(age, int) and age <= 360:
            return cached

    # –°–æ–≤—Å–µ–º –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    return {"kp": None, "state": "–Ω/–¥", "ts": "", "age_min": None, "src": "swpc_3h", "window": "3h"}

def get_kp() -> Tuple[Optional[float], str]:
    """
    –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞: (kp, state) –∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ 3-—á–∞—Å–æ–≤–æ–≥–æ Kp.
    """
    g = get_geomag()
    return g.get("kp"), g.get("state", "–Ω/–¥")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CLI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

if __name__ == "__main__":
    from pprint import pprint
    print("=== –ü—Ä–∏–º–µ—Ä get_air (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥) ===")
    pprint(get_air(54.710426, 20.452214))
    print("\n=== –ü—Ä–∏–º–µ—Ä get_sst (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥) ===")
    print(get_sst(54.710426, 20.452214))
    print("\n=== –ü—Ä–∏–º–µ—Ä get_geomag (Kp 3h) ===")
    pprint(get_geomag())
    print("\n=== –ü—Ä–∏–º–µ—Ä get_kp (compat) ===")
    print(get_kp())