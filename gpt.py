#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
gpt.py

‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω —Å–ª–æ–≤–∞—Ä—å CULPRITS: –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª—é—á–∏ ¬´–∂–∞—Ä–∞¬ª, ¬´—Å—ã—Ä–æ—Å—Ç—å¬ª, ¬´–ø–æ–ª–Ω–∞—è –ª—É–Ω–∞¬ª.
‚Ä¢ –ö–∞–∂–¥—ã–π culprit –∏–º–µ–µ—Ç 3‚Äì4 —Å–æ–≤–µ—Ç–∞, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–±–∏—Ä–∞—é—Ç—Å—è ‚â§3.
‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Ç OPENAI_KEY ‚Äî —Å–æ–≤–µ—Ç—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ CULPRITS —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
‚Ä¢ –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å GPT-4o-mini –∑–∞ 1 —Å—Ç—Ä–æ–∫–æ–π –∏ 3 —Å–æ–≤–µ—Ç–∞–º–∏.
"""

import os
import random
from typing import Tuple, List

from openai import OpenAI

OPENAI_KEY = os.getenv("OPENAI_API_KEY")

CULPRITS = {
    "—Ç—É–º–∞–Ω": {
        "emoji": "üåÅ",
        "tips": [
            "üî¶ –°–≤–µ—Ç–ª–∞—è –æ–¥–µ–∂–¥–∞ –∏ —Ñ–æ–Ω–∞—Ä—å",
            "üöó –í–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ",
            "‚è∞ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ–µ–∑–¥–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ",
            "üï∂Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—á–∫–∏ –ø—Ä–æ—Ç–∏–≤ –±–ª–∏–∫–æ–≤",
        ],
    },
    "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏": {
        "emoji": "üß≤",
        "tips": [
            "üßò 5-–º–∏–Ω—É—Ç–Ω–∞—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞",
            "üåø –ó–∞–≤–∞—Ä–∏—Ç–µ —á–∞–π —Å —Ç—Ä–∞–≤–∞–º–∏",
            "üôÖ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
            "üòå –õ—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
        ],
    },
    "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ": {
        "emoji": "üå°Ô∏è",
        "tips": [
            "üíß –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã",
            "üò¥ 20-–º–∏–Ω –¥–Ω–µ–≤–Ω–æ–π –æ—Ç–¥—ã—Ö",
            "ü§∏ –ù–µ–∂–Ω–∞—è —É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞",
            "ü•ó –õ—ë–≥–∫–∏–π —É–∂–∏–Ω –±–µ–∑ —Å–æ–ª–∏",
        ],
    },
    "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä": {
        "emoji": "üí®",
        "tips": [
            "üß£ –ó–∞—Ö–≤–∞—Ç–∏—Ç–µ —à–∞—Ä—Ñ",
            "üö∂ –ö–æ—Ä–æ—Ç–∫–∞—è –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≥—É–ª–∫–∞",
            "üï∂Ô∏è –ó–∞—â–∏—Ç–∏—Ç–µ –≥–ª–∞–∑–∞ –æ—Ç –ø—ã–ª–∏",
            "üå≥ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤",
        ],
    },
    "–∂–∞—Ä–∞": {
        "emoji": "üî•",
        "tips": [
            "üí¶ –î–µ—Ä–∂–∏—Ç–µ –±—É—Ç—ã–ª–∫—É –≤–æ–¥—ã –ø–æ–¥ —Ä—É–∫–æ–π",
            "üß¢ –ù–æ—Å–∏—Ç–µ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä",
            "üå≥ –ò—â–∏—Ç–µ —Ç–µ–Ω—å –≤ –ø–æ–ª–¥–µ–Ω—å",
            "‚ùÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –∫–æ–º–ø—Ä–µ—Å—Å",
        ],
    },
    "—Å—ã—Ä–æ—Å—Ç—å": {
        "emoji": "üíß",
        "tips": [
            "üëü –°–º–µ–Ω–Ω–∞—è –æ–±—É–≤—å –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç",
            "üåÇ –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–æ–Ω—Ç –≤ —Ä—é–∫–∑–∞–∫",
            "üå¨Ô∏è –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π—Ç–µ –ø–æ–º–µ—â–µ–Ω–∏—è",
            "üß• –õ—ë–≥–∫–∞—è –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –∫—É—Ä—Ç–∫–∞",
        ],
    },
    "–ø–æ–ª–Ω–∞—è –ª—É–Ω–∞": {
        "emoji": "üåï",
        "tips": [
            "üìù –ó–∞–ø–∏—à–∏—Ç–µ —è—Ä–∫–∏–µ –∏–¥–µ–∏",
            "üßò –ú—è–≥–∫–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
            "üåô –ü–æ–ª—é–±—É–π—Ç–µ—Å—å –ª—É–Ω–æ–π –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤",
            "üìö –ß—Ç–µ–Ω–∏–µ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ",
        ],
    },
    "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç": {
        "emoji": "‚ú®",
        "tips": [
            "üî≠ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–µ–±–æ –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ",
            "üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∑–∞–∫–∞—Ç–∞",
            "ü§î –ü–æ–¥—É–º–∞–π—Ç–µ –æ –±–µ—Å–∫—Ä–∞–π–Ω–∏—Ö –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö",
            "üé∂ –°–ª—É—à–∞–π—Ç–µ —Å–ø–æ–∫–æ–π–Ω—É—é –º—É–∑—ã–∫—É –≤–µ—á–µ—Ä–æ–º",
        ],
    },
}


def gpt_blurb(culprit: str) -> Tuple[str, List[str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (summary: str, tips: list[str]).
    ‚Ä¢ summary ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! ‚Ä¶¬ª
    ‚Ä¢ tips ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ —Å —ç–º–æ–¥–∑–∏.
    """
    tips_pool = CULPRITS.get(culprit, {}).get("tips", [])
    # –ë–µ–∑ –∫–ª—é—á–∞ ‚Äî —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    if not OPENAI_KEY or not tips_pool:
        summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
        return summary, random.sample(tips_pool, min(3, len(tips_pool)))

    # –° –∫–ª—é—á–æ–º ‚Äî –∑–∞–ø—Ä–æ—Å –∫ GPT
    prompt = (
        f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ health coach —Å–æ –∑–Ω–∞–Ω–∏—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã, –Ω–∞–ø–∏—à–∏ –û–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}!¬ª. "
        "–ü–æ—Å–ª–µ —Ç–æ—á–∫–∏ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤ ‚â§12 —Å–ª–æ–≤. –ó–∞—Ç–µ–º —Ä–æ–≤–Ω–æ 3 —Å–æ–≤–µ—Ç–∞ ‚â§12 —Å–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏."
    )
    client = OpenAI(api_key=OPENAI_KEY)
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.6,
        messages=[{"role": "user", "content": prompt}],
    )
    text = resp.choices[0].message.content.strip().splitlines()
    # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ summary, –¥–∞–ª–µ–µ –±–µ—Ä—ë–º –¥–æ 3 –Ω–µ–ø—É—Å—Ç—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
    lines = [l.strip("-‚Ä¢ ").strip() for l in text if l.strip()]
    summary = lines[0] if lines else f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
    tips = lines[1:4]
    # –ï—Å–ª–∏ GPT –≤–µ—Ä–Ω—É–ª –º–µ–Ω—å—à–µ 2 —Å–æ–≤–µ—Ç–æ–≤ ‚Äî –¥–æ–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–º–∏
    if len(tips) < 2:
        remaining = [t for t in tips_pool if t not in tips]
        tips += random.sample(remaining, min(3 - len(tips), len(remaining)))
    return summary, tips
