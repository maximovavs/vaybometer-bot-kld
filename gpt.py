#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
gpt.py

–î–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–ª–æ–∫–∞ ¬´–í—ã–≤–æ–¥¬ª –∏ ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª + –æ–±—â–∞—è –æ–±—ë—Ä—Ç–∫–∞ gpt_complete():

‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: OpenAI ‚Üí Gemini ‚Üí Groq.
‚Ä¢ –ù–∞ 429/–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–≤–æ—Ç—ã –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É.
‚Ä¢ gpt_blurb(culprit) —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–∂–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç (summary, tips).

–§–æ–ª–±—ç–∫-—Å–ø–∏—Å–∫–∏:
  ‚Ä¢ CULPRITS              ‚Äî ¬´–ø–æ–≥–æ–¥–Ω—ã–µ¬ª —Ñ–∞–∫—Ç–æ—Ä—ã —Å 3‚Äì4 —Å–æ–≤–µ—Ç–∞–º–∏, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM.
  ‚Ä¢ ASTRO_HEALTH_FALLBACK ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é.
"""

from __future__ import annotations
import os
import random
import logging
from typing import Tuple, List, Optional

# ‚îÄ‚îÄ setup ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
log = logging.getLogger(__name__)

try:
    from openai import OpenAI
except ImportError:
    OpenAI = None

try:
    import requests  # –¥–ª—è Gemini —á–µ—Ä–µ–∑ HTTP API
except Exception:
    requests = None

# ‚îÄ‚îÄ –∫–ª—é—á–∏ –∏ –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
OPENAI_KEY = os.getenv("OPENAI_API_KEY") or ""
GEMINI_KEY = os.getenv("GEMINI_API_KEY") or ""
GROQ_KEY   = os.getenv("GROQ_API_KEY") or ""

# –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: OpenAI -> Gemini -> Groq
PROVIDER_ORDER = [p for p in ("openai", "gemini", "groq")]

# –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ Groq, –ø—Ä–æ–±—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É (–ø–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)

# (–ª—é–±–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ –ø–æ—Ä—è–¥–∫—É)
GROQ_MODELS = [
    "llama-3.1-8b-instant",     # –±—ã—Å—Ç—Ä—ã–π
    "llama-3.1-70b-specdec",    # –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–≤–æ—ë–º –∞–∫–∫–∞—É–Ω—Ç–µ
    "llama-3.2-11b-text-preview",
    "llama-3.3-70b-versatile",
    "llama-3.1-70b",
    "llama3-70b-8192",
    "mixtral-8x7b-32768",
    "gemma-7b-it"
]

# ‚îÄ‚îÄ –∫–ª–∏–µ–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _openai_client() -> Optional["OpenAI"]:
    """
    –ö–ª–∏–µ–Ω—Ç OpenAI c –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Ä–µ—Ç—Ä–∞—è–º–∏, —á—Ç–æ–±—ã –ø—Ä–∏ 429 –±—ã—Å—Ç—Ä–æ
    –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ.
    """
    if not OPENAI_KEY or not OpenAI:
        return None
    try:
        return OpenAI(api_key=OPENAI_KEY, timeout=20.0, max_retries=0)
    except Exception as e:
        log.warning("OpenAI client init error: %s", e)
        return None

def _groq_client() -> Optional["OpenAI"]:
    """
    OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Groq —á–µ—Ä–µ–∑ base_url.
    """
    if not GROQ_KEY or not OpenAI:
        return None
    try:
        return OpenAI(api_key=GROQ_KEY, base_url="https://api.groq.com/openai/v1", timeout=25.0)
    except Exception as e:
        log.warning("Groq client init error: %s", e)
        return None

# ‚îÄ‚îÄ –æ–±—â–∞—è –æ–±—ë—Ä—Ç–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def gpt_complete(
    prompt: str,
    system: Optional[str] = None,
    temperature: float = 0.7,
    max_tokens: int = 600,
) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ LLM. –ü—Ä–æ–±—É–µ—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏: OpenAI ‚Üí Gemini ‚Üí Groq.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç text –∏–ª–∏ "" (–µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã).
    """
    text = ""

    # –°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI
    messages = []
    if system:
        messages.append({"role": "system", "content": system})
    messages.append({"role": "user", "content": prompt})

    # 1) OpenAI
    if "openai" in PROVIDER_ORDER and not text:
        cli = _openai_client()
        if cli:
            try:
                r = cli.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=messages,
                    temperature=temperature,
                    max_tokens=max_tokens,
                )
                text = (r.choices[0].message.content or "").strip()
            except Exception as e:
                msg = str(e).lower()
                if any(k in msg for k in ("rate limit", "insufficient_quota", "429")):
                    log.warning("OpenAI error (skip to next): %s", e)
                    text = ""
                else:
                    log.warning("OpenAI error: %s", e)
                    text = ""

    # 2) Gemini (HTTP API)
    if "gemini" in PROVIDER_ORDER and not text and GEMINI_KEY and requests:
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–ø–æ—Å–æ–±: —Å–∫–ª–µ–∏–≤–∞–µ–º system + prompt
            full_prompt = f"{system.strip()}\n\n{prompt}" if system else prompt
            url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent"
            params = {"key": GEMINI_KEY}
            payload = {
                "contents": [{"parts": [{"text": full_prompt}]}],
                "generationConfig": {
                    "temperature": temperature,
                    "maxOutputTokens": max_tokens
                }
            }
            resp = requests.post(url, params=params, json=payload, timeout=25)
            if resp.status_code == 200:
                data = resp.json()
                # candidates[0].content.parts[*].text
                cand = (data.get("candidates") or [{}])[0]
                parts = ((cand.get("content") or {}).get("parts") or [])
                text = "".join(p.get("text", "") for p in parts).strip()
            else:
                log.warning("Gemini error %s: %s", resp.status_code, resp.text[:300])
        except Exception as e:
            log.warning("Gemini exception: %s", e)

    # 3) Groq (OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
    if "groq" in PROVIDER_ORDER and not text:
        cli = _groq_client()
        if cli:
            for mdl in GROQ_MODELS:
                try:
                    r = cli.chat.completions.create(
                        model=mdl,
                        messages=messages,
                        temperature=temperature,
                        max_tokens=max_tokens,
                    )
                    text = (r.choices[0].message.content or "").strip()
                    if text:
                        break
                except Exception as e:
                    msg = str(e).lower()
                    # –º–æ–¥–µ–ª—å —Å–Ω—è—Ç–∞/–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Üí –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é
                    if "decommissioned" in msg or ("model" in msg and "not found" in msg):
                        log.warning("Groq model %s decommissioned/not found, trying next.", mdl)
                        continue
                    # rate limit ‚Äî —Ç–æ–∂–µ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
                    if "rate limit" in msg or "429" in msg:
                        log.warning("Groq rate limit on %s, trying next.", mdl)
                        continue
                    log.warning("Groq error on %s: %s", mdl, e)
                    continue

    return text or ""


# ‚îÄ‚îÄ —Å–ª–æ–≤–∞—Ä–∏ —Ñ–æ–ª–±—ç–∫–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CULPRITS = {
    "—Ç—É–º–∞–Ω": {
        "emoji": "üåÅ",
        "tips": [
            "üî¶ –°–≤–µ—Ç–ª–∞—è –æ–¥–µ–∂–¥–∞ –∏ —Ñ–æ–Ω–∞—Ä—å",
            "üöó –í–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ",
            "‚è∞ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ–µ–∑–¥–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ",
            "üï∂Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—á–∫–∏ –ø—Ä–æ—Ç–∏–≤ –±–ª–∏–∫–æ–≤",
        ],
    },
    "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏": {
        "emoji": "üß≤",
        "tips": [
            "üßò 5-–º–∏–Ω—É—Ç–Ω–∞—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞",
            "üåø –ó–∞–≤–∞—Ä–∏—Ç–µ —á–∞–π —Å —Ç—Ä–∞–≤–∞–º–∏",
            "üôÖ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
            "üòå –õ—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
        ],
    },
    "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ": {
        "emoji": "üå°Ô∏è",
        "tips": [
            "üíß –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã",
            "üò¥ 20-–º–∏–Ω—É—Ç–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –æ—Ç–¥—ã—Ö",
            "ü§∏ –õ—ë–≥–∫–∞—è –∑–∞—Ä—è–¥–∫–∞ —É—Ç—Ä–æ–º",
            "ü•ó –õ—ë–≥–∫–∏–π —É–∂–∏–Ω –±–µ–∑ —Å–æ–ª–∏",
        ],
    },
    "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä": {
        "emoji": "üí®",
        "tips": [
            "üß£ –ó–∞—Ö–≤–∞—Ç–∏—Ç–µ —à–∞—Ä—Ñ",
            "üö∂ –ö–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞",
            "üï∂Ô∏è –ó–∞—â–∏—Ç–∏—Ç–µ –≥–ª–∞–∑–∞ –æ—Ç –ø—ã–ª–∏",
            "üå≥ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤",
        ],
    },
    "–∂–∞—Ä–∞": {
        "emoji": "üî•",
        "tips": [
            "üí¶ –î–µ—Ä–∂–∏—Ç–µ –±—É—Ç—ã–ª–∫—É –≤–æ–¥—ã —Ä—è–¥–æ–º",
            "üß¢ –ù–æ—Å–∏—Ç–µ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä",
            "üå≥ –ò—â–∏—Ç–µ —Ç–µ–Ω—å –≤ –ø–æ–ª–¥–µ–Ω—å",
            "‚ùÑÔ∏è –ü—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –∫–æ–º–ø—Ä–µ—Å—Å –Ω–∞ –ª–æ–±",
        ],
    },
    "—Å—ã—Ä–æ—Å—Ç—å": {
        "emoji": "üíß",
        "tips": [
            "üëü –°–º–µ–Ω–∏—Ç–µ –æ–±—É–≤—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
            "üåÇ –î–µ—Ä–∂–∏—Ç–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–æ–Ω—Ç",
            "üå¨Ô∏è –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π—Ç–µ –∂–∏–ª–∏—â–µ",
            "üß• –õ—ë–≥–∫–∞—è –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –∫—É—Ä—Ç–∫–∞",
        ],
    },
    "–ø–æ–ª–Ω–∞—è –ª—É–Ω–∞": {
        "emoji": "üåï",
        "tips": [
            "üìù –ó–∞–ø–∏—à–∏—Ç–µ —è—Ä–∫–∏–µ –∏–¥–µ–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
            "üßò –ú—è–≥–∫–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è –≤–µ—á–µ—Ä–æ–º",
            "üåô –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ª—É–Ω—É –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤",
            "üìö –ß—Ç–µ–Ω–∏–µ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ",
        ],
    },
    "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç": {
        "emoji": "‚ú®",
        "tips": [
            "üî≠ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–µ–±–æ –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ",
            "üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–∫–∞—Ç–∞",
            "ü§î –ü–æ–¥—É–º–∞–π—Ç–µ –æ –±–µ—Å–∫—Ä–∞–π–Ω–∏—Ö –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö",
            "üé∂ –°–ª—É—à–∞–π—Ç–µ —Å–ø–æ–∫–æ–π–Ω—É—é –º—É–∑—ã–∫—É –≤–µ—á–µ—Ä–æ–º",
        ],
    },
}

ASTRO_HEALTH_FALLBACK: List[str] = [
    "üí§ –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∂–∏–º —Å–Ω–∞: –ª–æ–∂–∏—Ç–µ—Å—å –Ω–µ –ø–æ–∑–∂–µ 23:00",
    "ü•¶ –í–∫–ª—é—á–∏—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω —Å–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å",
    "ü•õ –ü–µ–π—Ç–µ —Ç—ë–ø–ª–æ–µ –º–æ–ª–æ–∫–æ —Å –º—ë–¥–æ–º –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
    "üßò –î–µ–ª–∞–π—Ç–µ –ª—ë–≥–∫—É—é —Ä–∞—Å—Ç—è–∂–∫—É —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º",
    "üö∂ –ü—Ä–æ–≥—É–ª–∏–≤–∞–π—Ç–µ—Å—å 20 –º–∏–Ω—É—Ç –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ",
]

# ‚îÄ‚îÄ –ø—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è ¬´–í—ã–≤–æ–¥/–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def gpt_blurb(culprit: str) -> Tuple[str, List[str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (summary: str, tips: List[str]):

    1) –ï—Å–ª–∏ culprit –≤ CULPRITS ‚Üí ¬´–ø–æ–≥–æ–¥–Ω—ã–π¬ª —Ñ–∞–∫—Ç–æ—Ä:
       ‚Ä¢ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ LLM: summary ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ¬ª
         + 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è;
       ‚Ä¢ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ LLM: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî summary, —Å–ª–µ–¥—É—é—â–∏–µ 3 ‚Äî —Å–æ–≤–µ—Ç—ã.


    2) –ï—Å–ª–∏ culprit —Å–æ–¥–µ—Ä–∂–∏—Ç ¬´–ª—É–Ω–∞/–Ω–æ–≤–æ–ª—É–Ω–∏–µ/–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ/—á–µ—Ç–≤–µ—Ä—Ç—å¬ª:
       ‚Ä¢ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ LLM ‚Üí 3 –∏–∑ ASTRO_HEALTH_FALLBACK,
       ‚Ä¢ –∏–Ω–∞—á–µ ‚Äî –±–µ—Ä—ë–º –∏–∑ –º–æ–¥–µ–ª–∏.

    3) –ò–Ω–∞—á–µ ‚Äî ¬´–æ–±—â–∏–π¬ª —Ñ–∞–∫—Ç–æ—Ä: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ 3 —Å–æ–≤–µ—Ç–∞.
    """
    culprit_lower = culprit.lower().strip()

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ ‚Äî –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
    def _make_prompt(cul: str, astro: bool) -> str:
        if astro:
            return (
                f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π health coach —Å–æ –∑–Ω–∞–Ω–∏—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã. "
                f"–ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {cul}!¬ª. "
                f"–ü–æ—Å–ª–µ —Ç–æ—á–∫–∏ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤ ‚â§12 —Å–ª–æ–≤. "
                f"–ó–∞—Ç–µ–º –¥–∞–π —Ä–æ–≤–Ω–æ 3 —Å–æ–≤–µ—Ç–∞ (—Å–æ–Ω, –ø–∏—Ç–∞–Ω–∏–µ, –¥—ã—Ö–∞–Ω–∏–µ/–ª—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å) "
                f"‚â§12 —Å–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏. –û—Ç–≤–µ—Ç ‚Äî –ø–æ —Å—Ç—Ä–æ–∫–∞–º."
            )
        else:
            return (
                f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π health coach —Å–æ –∑–Ω–∞–Ω–∏—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã. "
                f"–ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {cul}!¬ª. "
                f"–ü–æ—Å–ª–µ —Ç–æ—á–∫–∏ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤ ‚â§12 —Å–ª–æ–≤. "
                f"–ó–∞—Ç–µ–º –¥–∞–π —Ä–æ–≤–Ω–æ 3 —Å–æ–≤–µ—Ç–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ "
                f"(–ø–∏—Ç–∞–Ω–∏–µ, —Å–æ–Ω, –ª—ë–≥–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å) ‚â§12 —Å–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏. "
                f"–û—Ç–≤–µ—Ç ‚Äî –ø–æ —Å—Ç—Ä–æ–∫–∞–º."
            )

    def _from_lines(cul: str, lines: List[str], fallback_pool: List[str]) -> Tuple[str, List[str]]:
        summary = lines[0] if lines else f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
        tips = [ln for ln in lines[1:] if ln][:3]
        if len(tips) < 2:
            remaining = [t for t in fallback_pool if t not in tips]
            tips += random.sample(remaining, min(3 - len(tips), len(remaining))) if remaining else []
        return summary, tips[:3]

    # 1) ¬´–ü–æ–≥–æ–¥–Ω—ã–π¬ª —Ñ–∞–∫—Ç–æ—Ä –∏–∑ —Å–ª–æ–≤–∞—Ä—è CULPRITS
    if culprit_lower in CULPRITS:
        tips_pool = CULPRITS[culprit_lower]["tips"]
        prompt = _make_prompt(culprit, astro=False)
        text = gpt_complete(prompt=prompt, system=None, temperature=0.7, max_tokens=500)
        if not text:
            summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
            return summary, random.sample(tips_pool, min(3, len(tips_pool)))
        lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
        return _from_lines(culprit, lines, tips_pool)

    # 2) ¬´–ê—Å—Ç—Ä–æ—Ñ–∞–∫—Ç–æ—Ä¬ª
    astro_keywords = ["–ª—É–Ω–∞", "–Ω–æ–≤–æ–ª—É–Ω–∏–µ", "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ", "—á–µ—Ç–≤–µ—Ä—Ç—å"]
    is_astro = any(k in culprit_lower for k in astro_keywords)
    if is_astro:
        prompt = _make_prompt(culprit, astro=True)
        text = gpt_complete(prompt=prompt, system=None, temperature=0.7, max_tokens=500)
        if not text:
            summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
            return summary, random.sample(ASTRO_HEALTH_FALLBACK, 3)
        lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
        return _from_lines(culprit, lines, ASTRO_HEALTH_FALLBACK)

    # 3) –û–±—â–∏–π —Å–ª—É—á–∞–π
    prompt = _make_prompt(culprit, astro=True)
    text = gpt_complete(prompt=prompt, system=None, temperature=0.7, max_tokens=500)
    if not text:
        summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
        return summary, random.sample(ASTRO_HEALTH_FALLBACK, 3)
    lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
    # –ó–¥–µ—Å—å –∫–∞–∫ fallback-–ø—É–ª –≤–æ–∑—å–º—ë–º ASTRO_HEALTH_FALLBACK + –≤—Å–µ —Å–æ–≤–µ—Ç—ã –∏–∑ CULPRITS
    fallback_pool = ASTRO_HEALTH_FALLBACK + sum((c["tips"] for c in CULPRITS.values()), [])
    return _from_lines(culprit, lines, fallback_pool)