#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
gpt.py

–î–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–ª–æ–∫–∞ ¬´–í—ã–≤–æ–¥¬ª –∏ ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª:

‚Ä¢ –ï—Å–ª–∏ culprit ‚Äî ¬´–ø–æ–≥–æ–¥–Ω—ã–π¬ª —Ñ–∞–∫—Ç–æ—Ä (–∫–ª—é—á –∏–∑ —Å–ª–æ–≤–∞—Ä—è CULPRITS), –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT-4o-mini
  (–∏–ª–∏ –±–µ—Ä—ë–º —Ñ–æ–ª–±—ç–∫ –∏–∑ CULPRITS) —Å —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —ç—Ç–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞.

‚Ä¢ –ï—Å–ª–∏ culprit —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–µ–∫—Å–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –õ—É–Ω–Ω—ã–º–∏ —Ñ–∞–∑–∞–º–∏/–∞—Å—Ç—Ä–æ—Ñ–∞–∫—Ç–æ—Ä–∞–º–∏
  (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–õ—É–Ω–∞¬ª, ¬´–Ω–æ–≤–æ–ª—É–Ω–∏–µ¬ª, ¬´–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ¬ª, ¬´—á–µ—Ç–≤–µ—Ä—Ç—å¬ª –∏ —Ç. –¥.), —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT-4o-mini
  –∑–∞ –æ–±—â–µ–π health-coach —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π (—Å–æ–Ω, –ø–∏—Ç–∞–Ω–∏–µ, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏) –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–ª–∏—è–Ω–∏—è –õ—É–Ω—ã,
  –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–ª–ª–±—ç–∫ ASTRO_HEALTH_FALLBACK –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ API-–∫–ª—é—á–∞.

‚Ä¢ –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å—á–∏—Ç–∞–µ–º culprit ¬´–æ–±—â–∏–º¬ª faktor‚Äô–æ–º (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç pick_culprit)
  –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É GPT-4o-mini —Ç—Ä–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö health-coach —Å–æ–≤–µ—Ç–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º culprit –≤ summary,
  –ª–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–ª–ª–±—ç–∫ ASTRO_HEALTH_FALLBACK –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ API-–∫–ª—é—á–∞.

–§–æ–ª–±—ç–∫-—Å–ø–∏—Å–∫–∏:
  ‚Ä¢ CULPRITS             ‚Äî ¬´–ø–æ–≥–æ–¥–Ω—ã–µ¬ª —Ñ–∞–∫—Ç–æ—Ä—ã —Å 3‚Äì4 —Å–æ–≤–µ—Ç–∞–º–∏, –µ—Å–ª–∏ –Ω–µ—Ç API-–∫–ª—é—á–∞.
  ‚Ä¢ ASTRO_HEALTH_FALLBACK ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤–∏–Ω–æ–≤–∞—Ç–∞ –õ—É–Ω–∞ –∏–ª–∏ –Ω–µ—Ç API-–∫–ª—é—á–∞.
"""

import os
import random
from typing import Tuple, List

try:
    from openai import OpenAI
except ImportError:
    OpenAI = None

OPENAI_KEY = os.getenv("OPENAI_API_KEY")

# –°–ª–æ–≤–∞—Ä—å ¬´–ø–æ–≥–æ–¥–Ω—ã–µ / –ø—Ä–æ—á–∏–µ¬ª —Ñ–∞–∫—Ç–æ—Ä—ã ‚Üí —ç–º–æ–¥–∂–∏ –∏ —Ñ–æ–ª–±—ç–∫-—Å–æ–≤–µ—Ç—ã
CULPRITS = {
    "—Ç—É–º–∞–Ω": {
        "emoji": "üåÅ",
        "tips": [
            "üî¶ –°–≤–µ—Ç–ª–∞—è –æ–¥–µ–∂–¥–∞ –∏ —Ñ–æ–Ω–∞—Ä—å",
            "üöó –í–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ",
            "‚è∞ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ–µ–∑–¥–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ",
            "üï∂Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—á–∫–∏ –ø—Ä–æ—Ç–∏–≤ –±–ª–∏–∫–æ–≤",
        ],
    },
    "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏": {
        "emoji": "üß≤",
        "tips": [
            "üßò 5-–º–∏–Ω—É—Ç–Ω–∞—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞",
            "üåø –ó–∞–≤–∞—Ä–∏—Ç–µ —á–∞–π —Å —Ç—Ä–∞–≤–∞–º–∏",
            "üôÖ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
            "üòå –õ—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
        ],
    },
    "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ": {
        "emoji": "üå°Ô∏è",
        "tips": [
            "üíß –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã",
            "üò¥ 20-–º–∏–Ω—É—Ç–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –æ—Ç–¥—ã—Ö",
            "ü§∏ –õ—ë–≥–∫–∞—è –∑–∞—Ä—è–¥–∫–∞ —É—Ç—Ä–æ–º",
            "ü•ó –õ—ë–≥–∫–∏–π —É–∂–∏–Ω –±–µ–∑ —Å–æ–ª–∏",
        ],
    },
    "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä": {
        "emoji": "üí®",
        "tips": [
            "üß£ –ó–∞—Ö–≤–∞—Ç–∏—Ç–µ —à–∞—Ä—Ñ",
            "üö∂ –ö–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞",
            "üï∂Ô∏è –ó–∞—â–∏—Ç–∏—Ç–µ –≥–ª–∞–∑–∞ –æ—Ç –ø—ã–ª–∏",
            "üå≥ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤",
        ],
    },
    "–∂–∞—Ä–∞": {
        "emoji": "üî•",
        "tips": [
            "üí¶ –î–µ—Ä–∂–∏—Ç–µ –±—É—Ç—ã–ª–∫—É –≤–æ–¥—ã —Ä—è–¥–æ–º",
            "üß¢ –ù–æ—Å–∏—Ç–µ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä",
            "üå≥ –ò—â–∏—Ç–µ —Ç–µ–Ω—å –≤ –ø–æ–ª–¥–µ–Ω—å",
            "‚ùÑÔ∏è –ü—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –∫–æ–º–ø—Ä–µ—Å—Å –Ω–∞ –ª–æ–±",
        ],
    },
    "—Å—ã—Ä–æ—Å—Ç—å": {
        "emoji": "üíß",
        "tips": [
            "üëü –°–º–µ–Ω–∏—Ç–µ –æ–±—É–≤—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
            "üåÇ –î–µ—Ä–∂–∏—Ç–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–æ–Ω—Ç",
            "üå¨Ô∏è –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π—Ç–µ –∂–∏–ª–∏—â–µ",
            "üß• –õ—ë–≥–∫–∞—è –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –∫—É—Ä—Ç–∫–∞",
        ],
    },
    "–ø–æ–ª–Ω–∞—è –ª—É–Ω–∞": {
        "emoji": "üåï",
        "tips": [
            "üìù –ó–∞–ø–∏—à–∏—Ç–µ —è—Ä–∫–∏–µ –∏–¥–µ–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
            "üßò –ú—è–≥–∫–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è –≤–µ—á–µ—Ä–æ–º",
            "üåô –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ª—É–Ω—É –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤",
            "üìö –ß—Ç–µ–Ω–∏–µ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ",
        ],
    },
    "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç": {
        "emoji": "‚ú®",
        "tips": [
            "üî≠ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–µ–±–æ –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ",
            "üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–∫–∞—Ç–∞",
            "ü§î –ü–æ–¥—É–º–∞–π—Ç–µ –æ –±–µ—Å–∫—Ä–∞–π–Ω–∏—Ö –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö",
            "üé∂ –°–ª—É—à–∞–π—Ç–µ —Å–ø–æ–∫–æ–π–Ω—É—é –º—É–∑—ã–∫—É –≤–µ—á–µ—Ä–æ–º",
        ],
    },
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ health-coach —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∞—Å—Ç—Ä–æ—Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ API-–∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
ASTRO_HEALTH_FALLBACK: List[str] = [
    "üí§ –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∂–∏–º —Å–Ω–∞: –ª–æ–∂–∏—Ç–µ—Å—å –Ω–µ –ø–æ–∑–∂–µ 23:00",
    "ü•¶ –í–∫–ª—é—á–∏—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω —Å–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å",
    "ü•õ –ü–µ–π—Ç–µ —Ç—ë–ø–ª–æ–µ –º–æ–ª–æ–∫–æ —Å –º—ë–¥–æ–º –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
    "üßò –î–µ–ª–∞–π—Ç–µ –ª—ë–≥–∫—É—é —Ä–∞—Å—Ç—è–∂–∫—É —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º",
    "üö∂ –ü—Ä–æ–≥—É–ª–∏–≤–∞–π—Ç–µ—Å—å 20 –º–∏–Ω—É—Ç –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ",
]


def gpt_blurb(culprit: str) -> Tuple[str, List[str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (summary: str, tips: List[str]):

    1) –ï—Å–ª–∏ culprit (—Å—Ç—Ä–æ–∫–∞) –≤ —Å–ø–∏—Å–∫–µ –∫–ª—é—á–µ–π CULPRITS ‚Üí ¬´–ø–æ–≥–æ–¥–Ω—ã–π¬ª —Ñ–∞–∫—Ç–æ—Ä:
       ‚Ä¢ –±–µ–∑ API-–∫–ª—é—á–∞: summary = ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ¬ª,
         tips = —Å–ª—É—á–∞–π–Ω—ã–µ 3 –∏–∑ CULPRITS[culprit]["tips"].
       ‚Ä¢ —Å API-–∫–ª—é—á–æ–º: —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ GPT-4o-mini, –≥–¥–µ –≤ summary —É–ø–æ–º–∏–Ω–∞–µ–º culprit,
         –∞ –∑–∞—Ç–µ–º —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞.

    2) –ï—Å–ª–∏ culprit —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ª—É–Ω–æ–π/–∞—Å—Ç—Ä–æ—Ñ–∞–∫—Ç–æ—Ä–∞–º–∏:
       (¬´–ª—É–Ω–∞¬ª, ¬´–Ω–æ–≤–æ–ª—É–Ω–∏–µ¬ª, ¬´–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ¬ª, ¬´—á–µ—Ç–≤–µ—Ä—Ç—å¬ª), –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞:
       ‚Ä¢ –±–µ–∑ API-–∫–ª—é—á–∞: summary = ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ ‚Ä¶ –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ¬ª,
         tips = —Å–ª—É—á–∞–π–Ω—ã–µ 3 –∏–∑ ASTRO_HEALTH_FALLBACK.
       ‚Ä¢ —Å API-–∫–ª—é—á–æ–º: –∑–∞–ø—Ä–æ—Å –∫ GPT-4o-mini: summary –∫–∞–∫ ¬´‚Ä¶ –≤–∏–Ω–∏—Ç–µ {culprit}!¬ª, –∞ —Å–æ–≤–µ—Ç—ã ‚Äî
         —Ç—Ä–∏ health-coach —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Å–æ–Ω, –ø–∏—Ç–∞–Ω–∏–µ, –¥—ã—Ö–∞–Ω–∏–µ –∏ —Ç. –¥.).

    3) –î–ª—è –≤—Å–µ—Ö –ø—Ä–æ—á–∏—Ö —Å–ª—É—á–∞–µ–≤ (–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π culprit):
       ‚Ä¢ –±–µ–∑ API-–∫–ª—é—á–∞: summary = ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ ‚Ä¶ –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ¬ª,
         tips = —Å–ª—É—á–∞–π–Ω—ã–µ 3 –∏–∑ ASTRO_HEALTH_FALLBACK.
       ‚Ä¢ —Å API-–∫–ª—é—á–æ–º: –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—É–Ω–∫—Ç—É 2: –ø—Ä–æ—Å–∏–º GPT-4o-mini –≤—ã–≤–µ—Å—Ç–∏ summary + —Ç—Ä–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞.

    –í –∏—Ç–æ–≥–µ –¥–∞–∂–µ –ø—Ä–∏ ¬´–∞—Å—Ç—Ä–æ—Ñ–∞–∫—Ç–æ—Ä–µ¬ª (–õ—É–Ω–∞) –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ç—Ä—ë—Ö—Å—Ç—Ä–æ—á–Ω—ã–µ
    —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç health-coach‚Äô–∞.
    """
    culprit_lower = culprit.lower().strip()

    # 1) ¬´–ü–æ–≥–æ–¥–Ω—ã–π¬ª —Ñ–∞–∫—Ç–æ—Ä –∏–∑ —Å–ª–æ–≤–∞—Ä—è CULPRITS
    if culprit_lower in CULPRITS:
        tips_pool = CULPRITS[culprit_lower]["tips"]
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ –∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ OpenAI ‚Äî —Ñ–æ–ª–ª–±—ç–∫ –∏–∑ CULPRITS
        if not OPENAI_KEY or not OpenAI or not tips_pool:
            summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
            return summary, random.sample(tips_pool, min(3, len(tips_pool)))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT-4o-mini
        prompt = (
            f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π health coach —Å–æ –∑–Ω–∞–Ω–∏—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã. "
            f"–ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}!¬ª. "
            f"–ü–æ—Å–ª–µ —Ç–æ—á–∫–∏ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤ ‚â§12 —Å–ª–æ–≤. "
            f"–ó–∞—Ç–µ–º –¥–∞–π —Ä–æ–≤–Ω–æ 3 —Å–æ–≤–µ—Ç–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ "
            f"(–ø–∏—Ç–∞–Ω–∏–µ, —Å–æ–Ω, –ª—ë–≥–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å) ‚â§12 —Å–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏."
        )

        client = OpenAI(api_key=OPENAI_KEY)
        try:
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                temperature=0.7,
                messages=[{"role": "user", "content": prompt}],
            )
            raw_lines = resp.choices[0].message.content.strip().splitlines()
            lines = [ln.strip() for ln in raw_lines if ln.strip()]
        except Exception:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ GPT ‚Üí —Ñ–æ–ª–ª–±—ç–∫ –∏–∑ CULPRITS
            summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
            return summary, random.sample(tips_pool, min(3, len(tips_pool)))

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî summary
        summary = lines[0] if lines else f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
        # –°–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ (–¥–æ 3) ‚Äî —Å–æ–≤–µ—Ç—ã
        tips = lines[1:4]
        if len(tips) < 2:
            remaining = [t for t in tips_pool if t not in tips]
            tips += random.sample(remaining, min(3 - len(tips), len(remaining)))
        return summary, tips

    # 2) ¬´–ê—Å—Ç—Ä–æ—Ñ–∞–∫—Ç–æ—Ä¬ª (–õ—É–Ω–∞ / –ù–æ–≤–æ–ª—É–Ω–∏–µ / –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ / –ß–µ—Ç–≤–µ—Ä—Ç—å)
    astro_keywords = ["–ª—É–Ω–∞", "–Ω–æ–≤–æ–ª—É–Ω–∏–µ", "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ", "—á–µ—Ç–≤–µ—Ä—Ç—å"]
    if any(keyword in culprit_lower for keyword in astro_keywords):
        # –§–æ–ª–ª–±—ç–∫ –±–µ–∑ API-–∫–ª—é—á–∞
        if not OPENAI_KEY or not OpenAI:
            summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
            return summary, random.sample(ASTRO_HEALTH_FALLBACK, 3)

        # –ó–∞–ø—Ä–æ—Å –∫ GPT-4o-mini –∑–∞ health-coach —Å–æ–≤–µ—Ç–∞–º–∏ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º culprit
        prompt = (
            f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π health coach —Å–æ –∑–Ω–∞–Ω–∏—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã. "
            f"–ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}!¬ª. "
            f"–ü–æ—Å–ª–µ —Ç–æ—á–∫–∏ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤ ‚â§12 —Å–ª–æ–≤. "
            f"–ó–∞—Ç–µ–º –¥–∞–π —Ä–æ–≤–Ω–æ 3 —Å–æ–≤–µ—Ç–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ "
            f"(—Å–æ–Ω, –ø–∏—Ç–∞–Ω–∏–µ, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –ª—ë–≥–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å) ‚â§12 —Å–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏."
        )

        client = OpenAI(api_key=OPENAI_KEY)
        try:
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                temperature=0.7,
                messages=[{"role": "user", "content": prompt}],
            )
            raw_lines = resp.choices[0].message.content.strip().splitlines()
            lines = [ln.strip() for ln in raw_lines if ln.strip()]
        except Exception:
            summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
            return summary, random.sample(ASTRO_HEALTH_FALLBACK, 3)

        summary = lines[0] if lines else f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
        tips = lines[1:4]
        if len(tips) < 2:
            remaining = [t for t in ASTRO_HEALTH_FALLBACK if t not in tips]
            tips += random.sample(remaining, min(3 - len(tips), len(remaining)))
        return summary, tips

    # 3) –õ—é–±–æ–π –¥—Ä—É–≥–æ–π ¬´culprit¬ª (–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π)
    #    –î–µ–π—Å—Ç–≤—É–µ–º –∫–∞–∫ –≤ —Å–ª—É—á–∞–µ –∞—Å—Ç—Ä–æ—Ñ–∞–∫—Ç–æ—Ä–∞: –æ–±—â–∏–µ health-coach —Å–æ–≤–µ—Ç—ã
    if not OPENAI_KEY or not OpenAI:
        summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
        return summary, random.sample(ASTRO_HEALTH_FALLBACK, 3)

    prompt = (
        f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π health coach —Å–æ –∑–Ω–∞–Ω–∏—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã. "
        f"–ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}!¬ª. "
        f"–ü–æ—Å–ª–µ —Ç–æ—á–∫–∏ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤ ‚â§12 —Å–ª–æ–≤. "
        f"–ó–∞—Ç–µ–º –¥–∞–π —Ä–æ–≤–Ω–æ 3 —Å–æ–≤–µ—Ç–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ "
        f"(—Å–æ–Ω, –ø–∏—Ç–∞–Ω–∏–µ, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –ª—ë–≥–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å) ‚â§12 —Å–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏."
    )
    client = OpenAI(api_key=OPENAI_KEY)
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.7,
            messages=[{"role": "user", "content": prompt}],
        )
        raw_lines = resp.choices[0].message.content.strip().splitlines()
        lines = [ln.strip() for ln in raw_lines if ln.strip()]
    except Exception:
        summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
        return summary, random.sample(ASTRO_HEALTH_FALLBACK, 3)

    summary = lines[0] if lines else f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
    tips = lines[1:4]
    if len(tips) < 2:
        fallback_pool = ASTRO_HEALTH_FALLBACK + sum((c["tips"] for c in CULPRITS.values()), [])
        remaining = [t for t in fallback_pool if t not in tips]
        tips += random.sample(remaining, min(3 - len(tips), len(remaining)))
    return summary, tips