#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
gen_lunar_calendar.py
~~~~~~~~~~~~~~~~~~~~~
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç lunar_calendar.json –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ —Å —Ç–æ—á–Ω—ã–º–∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏:
  - phase         : "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ –≤ –û–≤–Ω–µ (100% –æ—Å–≤–µ—â.)"
  - phase_time    : ISO-–≤—Ä–µ–º—è UT –º–æ–º–µ–Ω—Ç–∞ —Ñ–∞–∑—ã
  - percent       : 100
  - sign          : "–û–≤–µ–Ω"
  - aspects       : ["‚òåSaturn (+0.4¬∞)", ‚Ä¶]
  - void_of_course: {"start":"DD.MM HH:mm","end":"DD.MM HH:mm"}
  - next_event    : "‚Üí –ß–µ—Ä–µ–∑ 2 –¥–Ω. –ù–æ–≤–æ–ª—É–Ω–∏–µ –≤ –ë–ª–∏–∑–Ω–µ—Ü–∞—Ö"
  - advice        : ["‚Ä¶","‚Ä¶","‚Ä¶"]
  - favorable_days / unfavorable_days
"""

import os, json, math, random
from pathlib import Path
from typing import Dict, Any, List

import pendulum
import swisseph as swe

# ‚îÄ‚îÄ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π GPT-–∫–ª–∏–µ–Ω—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
try:
    from openai import OpenAI
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
except ImportError:
    client = None

# ‚îÄ‚îÄ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Void-of-Course ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ = pendulum.timezone("UTC")

# ‚îÄ‚îÄ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–Ω–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CATEGORIES = {
    "general":  {"favorable":[1,2,3,4,7,28,29], "unfavorable":[13,20,23,24,27]},
    "haircut":  {"favorable":[1,2,4,7,9,10,18,19,24,25,31], "unfavorable":[]},
    "travel":   {"favorable":[5,7,14,15],            "unfavorable":[]},
    "shopping": {"favorable":[3,6,9,12,14,17,20,25], "unfavorable":[13,20,23,24,27]},
    "health":   {"favorable":[1,2,3,4,7,28,29],       "unfavorable":[]},
}

# ‚îÄ‚îÄ –ê—Å–ø–µ–∫—Ç—ã –∏ –æ—Ä–±–∏—Å—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ASPECTS = {0:"‚òå", 60:"‚öπ", 90:"‚ñ°", 120:"‚ñ≥", 180:"‚òç"}
ORBIS   = {0:5.0, 60:4.0, 90:3.0, 120:4.0, 180:5.0}

PLANETS = {
    "Sun": swe.SUN, "Mercury": swe.MERCURY, "Venus": swe.VENUS,
    "Mars": swe.MARS, "Jupiter": swe.JUPITER, "Saturn": swe.SATURN,
    "Uranus": swe.URANUS, "Neptune": swe.NEPTUNE, "Pluto": swe.PLUTO,
}

# ‚îÄ‚îÄ –§–æ–ª–±—ç–∫-—Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–∞–∑–∞–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FALLBACK = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ": [
        "–†–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã: –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π —Ü–µ–ª–∏ –º–µ—Å—è—Ü–∞ üìù‚òÄÔ∏è",
        "–ó–¥–æ—Ä–æ–≤—å–µ: –ü–µ–π –≤–æ–¥—É —Å –ª–∏–º–æ–Ω–æ–º üíßüçã",
        "–†–∏—Ç—É–∞–ª: –ú–µ–¥–∏—Ç–∞—Ü–∏—è —É –º–æ—Ä—è üßòüåä",
    ],
    # ... –¥–æ–±–∞–≤—å—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–∑
}

def jd_to_dt(jd: float) -> pendulum.DateTime:
    """JD ‚Üí pendulum UTC"""
    return pendulum.from_timestamp((jd - 2440587.5) * 86400, tz=TZ)

def compute_phase_and_sign(jd: float):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã, % –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞."""
    slon = swe.calc_ut(jd, swe.SUN)[0][0]
    mlon = swe.calc_ut(jd, swe.MOON)[0][0]
    angle = (mlon - slon) % 360
    pct = int(round((1 - math.cos(math.radians(angle))) / 2 * 100))
    if angle < 22.5 or angle >= 337.5:     name="–ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif angle < 67.5:                     name="–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø"
    elif angle < 112.5:                    name="–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif angle < 157.5:                    name="–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"
    elif angle < 202.5:                    name="–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif angle < 247.5:                    name="–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"
    elif angle < 292.5:                    name="–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    else:                                  name="–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø"
    sign = ["–û–≤–µ–Ω","–¢–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã","–†–∞–∫","–õ–µ–≤","–î–µ–≤–∞",
            "–í–µ—Å—ã","–°–∫–æ—Ä–ø–∏–æ–Ω","–°—Ç—Ä–µ–ª–µ—Ü","–ö–æ–∑–µ—Ä–æ–≥","–í–æ–¥–æ–ª–µ–π","–†—ã–±—ã"][int(mlon // 30)]
    return name, pct, sign

def next_phase_jd(jd: float, phase: str) -> float:
    """JD —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ–∞–∑—ã."""
    mapping = {
        "–ù–æ–≤–æ–ª—É–Ω–∏–µ": swe.next_new_moon,
        "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ": swe.next_full_moon,
        "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å": swe.next_first_quarter,
        "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å": swe.next_last_quarter,
    }
    fn = mapping.get(phase, swe.next_new_moon)
    return fn(jd)

def compute_next_event(jd: float) -> str:
    """–ö—Ä–∞—Ç–∫–æ –∞–Ω–æ–Ω—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –Ω–æ–≤–æ–ª—É–Ω–∏—è/–ø–æ–ª–Ω–æ–ª—É–Ω–∏—è."""
    today = jd_to_dt(jd).date()
    jn = swe.next_new_moon(jd); dn = jd_to_dt(jn).date()
    jf = swe.next_full_moon(jd); df = jd_to_dt(jf).date()
    if (dn - today) <= (df - today):
        days, jd2 = (dn - today).days, jn
    else:
        days, jd2 = (df - today).days, jf
    ph, _, s = compute_phase_and_sign(jd2)
    return f"‚Üí –ß–µ—Ä–µ–∑ {days} –¥–Ω. {ph} –≤ {s}"

def compute_aspects(jd: float) -> List[str]:
    """–ò—â–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –õ—É–Ω—ã –∫ –ø–ª–∞–Ω–µ—Ç–∞–º."""
    mlon = swe.calc_ut(jd, swe.MOON)[0][0]
    out = []
    for name, pid in PLANETS.items():
        pl = swe.calc_ut(jd, pid)[0][0]
        diff = abs((mlon - pl + 180) % 360 - 180)
        for ang, sym in ASPECTS.items():
            if abs(diff - ang) <= ORBIS[ang]:
                out.append(f"{sym}{name} ({diff-ang:+.1f}¬∞)")
    return out

def compute_void_of_course(jd: float) -> Dict[str, str]:
    """–†–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã Void-of-Course –¥–ª—è –õ—É–Ω—ã."""
    start_jd = swe.next_void(swe.MOON, jd)
    end_jd   = swe.next_enter(swe.MOON, jd)
    start_dt = jd_to_dt(start_jd).in_tz(TZ)
    end_dt   = jd_to_dt(end_jd).in_tz(TZ)
    return {
        "start": start_dt.format("DD.MM HH:mm"),
        "end":   end_dt.format("DD.MM HH:mm"),
    }

def compute_advice(date: pendulum.Date, phase: str) -> List[str]:
    """–¢—Ä–∏ —Å–æ–≤–µ—Ç–∞ –æ—Ç GPT –∏–ª–∏ —Ñ–æ–ª–±—ç–∫."""
    if client:
        prompt = (
            f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –∞—Å—Ç—Ä–æ–ª–æ–≥, –¥–∞—Ç–∞ {date}, —Ñ–∞–∑–∞ {phase}. "
            "–î–∞–π 3 —Å–æ–≤–µ—Ç–∞ (—Ä–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã; —á—Ç–æ –æ—Ç–ª–æ–∂–∏—Ç—å; —Ä–∏—Ç—É–∞–ª –¥–Ω—è)."
        )
        resp = client.chat.completions.create(
            model="gpt-4o-mini", temperature=0.7,
            messages=[{"role":"user","content":prompt}]
        )
        lines = [ln.strip() for ln in resp.choices[0].message.content.splitlines() if ln.strip()]
        return lines[:3]
    base = FALLBACK.get(phase, FALLBACK["–ù–æ–≤–æ–ª—É–Ω–∏–µ"])
    return random.sample(base, k=3)

def generate_calendar(year: int, month: int) -> Dict[str, Any]:
    swe.set_ephe_path('.')  # –ø—É—Ç—å –∫ —ç—Ñ–µ–º–µ—Ä–∏–¥–∞–º
    start = pendulum.date(year, month, 1)
    end   = start.end_of('month')
    cal = {}
    d = start
    while d <= end:
        jd = swe.julday(d.year, d.month, d.day, 0.0)
        name, pct, sign = compute_phase_and_sign(jd)
        # –º–æ–º–µ–Ω—Ç —ç—Ç–æ–π —Ñ–∞–∑—ã
        jt = next_phase_jd(jd, name)
        cal[d.to_date_string()] = {
            "phase":           f"{name} –≤ {sign} ({pct}% –æ—Å–≤–µ—â.)",
            "phase_time":      jd_to_dt(jt).to_iso8601_string(),
            "percent":         pct,
            "sign":            sign,
            "aspects":         compute_aspects(jd),
            "void_of_course":  compute_void_of_course(jd),
            "next_event":      compute_next_event(jd),
            "advice":          compute_advice(d, name),
            "favorable_days":   {k:v["favorable"]   for k,v in CATEGORIES.items()},
            "unfavorable_days": {k:v["unfavorable"] for k,v in CATEGORIES.items()},
        }
        d = d.add(days=1)
    return cal

def main():
    today = pendulum.today()
    data  = generate_calendar(today.year, today.month)
    out   = Path(__file__).parent / "lunar_calendar.json"
    out.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"‚úÖ lunar_calendar.json —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {today.format('MMMM YYYY')}")

if __name__ == "__main__":
    main()
