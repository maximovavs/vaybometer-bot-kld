name: Collect SafeCast (Kaliningrad)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */3 * * *"   # каждые 3 часа

jobs:
  safecast-kaliningrad:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch SafeCast → data/safecast_kaliningrad.json
        env:
          OUT_FILE: data/safecast_kaliningrad.json
          LAT:      "54.7104"
          LON:      "20.4522"
          DIST:     "300"   # км, можно увеличить
          HOURS:    "48"    # часов, можно увеличить
        run: |
          python - <<'PY'
          import os, json, time, datetime as dt
          from statistics import median
          from typing import Any, Dict, List, Optional
          import requests

          OUT = os.environ["OUT_FILE"]
          LAT = float(os.environ["LAT"]); LON = float(os.environ["LON"])
          DIST = float(os.environ["DIST"])     # км
          HOURS = int(os.environ["HOURS"])

          HEADERS = {"User-Agent": "VayboMeter/1.4 (+github-actions)"}
          since_dt = dt.datetime.utcnow() - dt.timedelta(hours=HOURS)
          since_iso = since_dt.strftime("%Y-%m-%dT%H:%M:%SZ")

          # прочитаем старый файл
          old: Dict[str, Any] = {}
          if os.path.exists(OUT):
            try:
              old = json.loads(open(OUT, "r", encoding="utf-8").read())
            except Exception:
              old = {}

          def fetch(url: str, params: Dict[str, Any]) -> List[Dict[str, Any]]:
            items: List[Dict[str, Any]] = []
            per_page = 100
            for page in range(1, 51):
              p = dict(per_page=per_page, page=page); p.update(params)
              r = requests.get(url, params=p, headers=HEADERS, timeout=30)
              if r.status_code != 200: break
              try: batch = r.json()
              except Exception: break
              if not isinstance(batch, list) or not batch: break
              items.extend(batch)
              if len(batch) < per_page: break
              time.sleep(0.2)
            return items

          def parse_ts(s: str) -> Optional[int]:
            try:
              if not s: return None
              if "." in s: s = s.split(".")[0] + "Z"
              return int(dt.datetime.fromisoformat(s.replace("Z","+00:00")).timestamp())
            except Exception:
              return None

          strategies = []
          for base in ("https://api.safecast.org/measurements.json",
                       "https://api.safecast.org/en-US/measurements.json"):
            for dist in (DIST, DIST*1000):
              strategies.append((base, dict(latitude=LAT, longitude=LON, distance=dist,
                                            order="captured_at", direction="desc",
                                            captured_after=since_iso)))
              strategies.append((base, dict(latitude=LAT, longitude=LON, distance=dist,
                                            order="captured_at", direction="desc",
                                            since=since_iso)))

          raw = []; used = None
          for url, params in strategies:
            raw = fetch(url, params)
            if raw:
              used = (url, params)
              break

          norm = []
          for m in raw:
            ts = parse_ts(m.get("captured_at") or m.get("created_at") or "")
            if not ts or ts < int(since_dt.timestamp()): continue
            vt = str(m.get("value_type") or "").lower().strip()
            unit = str(m.get("unit") or "").lower().strip()
            try:
              val = float(m.get("value"))
            except Exception:
              continue
            norm.append({"ts": ts, "vt": vt, "unit": unit, "val": val})
          norm.sort(key=lambda x: x["ts"])

          now_ts = int(dt.datetime.utcnow().timestamp())
          sixh_ts = now_ts - 6*3600

          cpm_vals   = [d["val"] for d in norm
                        if d["ts"] >= sixh_ts and (d["vt"] in ("cpm","counts_per_minute") or d["unit"]=="cpm")]
          usvh_vals  = [d["val"] for d in norm
                        if d["ts"] >= sixh_ts and ("sv/h" in d["unit"] or d["vt"] in ("usv/h","radiation","radiation_usvh"))]
          pm25_last, pm10_last = None, None
          for d in reversed(norm):
            if pm25_last is None and d["vt"] in ("pm2.5","pm25"): pm25_last = d["val"]
            if pm10_last is None and d["vt"]=="pm10": pm10_last = d["val"]
            if pm25_last is not None and pm10_last is not None: break

          latest_ts_in_window = max([d["ts"] for d in norm if d["ts"] >= sixh_ts], default=None)
          last_sample_ts_old = old.get("last_sample_ts")

          if latest_ts_in_window is None or (isinstance(last_sample_ts_old,int) and latest_ts_in_window <= last_sample_ts_old):
            print("No new samples in last 6h; keeping previous file as is.")
            print("counts:", {"cpm": len(cpm_vals), "usvh": len(usvh_vals)})
            print("used:", used)
            raise SystemExit(0)

          out = {
            "ts": now_ts,
            "last_sample_ts": latest_ts_in_window,
          }
          if cpm_vals:  out["cpm"] = float(median(cpm_vals))
          if usvh_vals: out["radiation_usvh"] = float(median(usvh_vals))
          if pm25_last is not None: out["pm25"] = float(pm25_last)
          if pm10_last is not None: out["pm10"] = float(pm10_last)

          os.makedirs(os.path.dirname(OUT), exist_ok=True)
          with open(OUT, "w", encoding="utf-8") as f:
            json.dump(out, f, ensure_ascii=False)

          print("safecast out:", json.dumps(out, ensure_ascii=False))
          print("counts:", {"cpm": len(cpm_vals), "usvh": len(usvh_vals)})
          print("used:", used)
          PY

      - name: Commit & Push if changed
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase
          if [ -n "$(git status --porcelain -- data/safecast_kaliningrad.json)" ]; then
            git add data/safecast_kaliningrad.json
            git commit -m "safecast(Kaliningrad): update data/safecast_kaliningrad.json"
            git push
          else
            echo "No changes in data/safecast_kaliningrad.json"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: safecast-kaliningrad
          path: data/safecast_kaliningrad.json