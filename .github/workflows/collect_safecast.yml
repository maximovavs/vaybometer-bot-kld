name: Collect SafeCast (Kaliningrad)

on:
  schedule:
    - cron: "*/30 * * * *"   # каждые 30 минут
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: collect-safecast-kld
  cancel-in-progress: false

jobs:
  collect-kld:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch SafeCast → data/safecast_kaliningrad.json
        env:
          OUT_FILE: data/safecast_kaliningrad.json
          LAT:      "54.7104"
          LON:      "20.4522"
          DIST:     "300"    # км радиус вокруг Калининграда
          HOURS:    "48"     # тянуть за последние 48 часов
        run: |
          python - <<'PY'
          import os, json, time, math, datetime as dt
          from statistics import median
          from typing import List, Dict, Any, Optional
          import requests

          out_file = os.environ["OUT_FILE"]
          lat = float(os.environ["LAT"]); lon = float(os.environ["LON"])
          dist_km = float(os.environ["DIST"]); hours = int(os.environ["HOURS"])

          since_dt = dt.datetime.utcnow() - dt.timedelta(hours=hours)
          since_iso = since_dt.strftime("%Y-%m-%dT%H:%M:%SZ")
          HEADERS = {"User-Agent": "VayboMeter/1.3 (+github-actions)"}

          def fetch(url: str, params: Dict[str, Any]) -> List[Dict[str, Any]]:
            items: List[Dict[str, Any]] = []
            per_page = 100
            for page in range(1, 51):
              p = dict(per_page=per_page, page=page)
              p.update(params)
              try:
                r = requests.get(url, params=p, headers=HEADERS, timeout=30)
              except Exception:
                break
              if r.status_code != 200:
                break
              try:
                batch = r.json()
              except Exception:
                break
              if not isinstance(batch, list) or not batch:
                break
              items.extend(batch)
              if len(batch) < per_page:
                break
              time.sleep(0.2)
            return items

          base_urls = [
            "https://api.safecast.org/measurements.json",
            "https://api.safecast.org/en-US/measurements.json",
          ]
          strategies = []
          for u in base_urls:
            for dist in (dist_km, dist_km*1000):  # км и метры
              strategies.append((u, dict(latitude=lat, longitude=lon, distance=dist,
                                         order="captured_at", direction="desc",
                                         captured_after=since_iso)))
              strategies.append((u, dict(latitude=lat, longitude=lon, distance=dist,
                                         order="captured_at", direction="desc",
                                         since=since_iso)))

          raw = []
          used = None
          for url, params in strategies:
            raw = fetch(url, params)
            if raw:
              used = (url, params)
              break

          def parse_ts(s: str) -> Optional[int]:
            try:
              if not s: return None
              if "." in s:
                s = s.split(".")[0] + "Z"
              return int(dt.datetime.fromisoformat(s.replace("Z", "+00:00")).timestamp())
            except Exception:
              return None

          norm: List[Dict[str, Any]] = []
          for m in raw:
            ts = parse_ts(m.get("captured_at") or m.get("created_at") or "")
            if not ts or ts < int(since_dt.timestamp()):
              continue
            vt = (m.get("value_type") or "").strip().lower()
            unit = (m.get("unit") or "").strip().lower()
            val = m.get("value")
            try: val = float(val)
            except Exception: continue
            norm.append({"ts": ts, "vt": vt, "unit": unit, "val": val})

          norm.sort(key=lambda x: x["ts"])

          # агрегируем
          now_ts = int(dt.datetime.utcnow().timestamp())
          out: Dict[str, Any] = {"ts": now_ts}

          # PM — берём последний доступный замер
          for target, key in (("pm2.5","pm25"), ("pm10","pm10")):
            for d in reversed(norm):
              if d["vt"] == target:
                out[key] = d["val"]
                break

          # Радиация: медиана за 6 ч
          cut_ts = now_ts - 6*3600
          usvh_vals = []
          cpm_vals = []
          for d in norm:
            if d["ts"] < cut_ts: continue
            if ("sv/h" in d["unit"]) or (d["vt"] in ("usv/h","radiation","radiation_usvh")):
              usvh_vals.append(d["val"])
            if (d["vt"] in ("cpm","counts_per_minute")) or d["unit"] == "cpm":
              cpm_vals.append(d["val"])

          if usvh_vals:
            out["radiation_usvh"] = float(median(usvh_vals))
          if cpm_vals:
            out["cpm"] = float(median(cpm_vals))

          # сохраним
          os.makedirs(os.path.dirname(out_file), exist_ok=True)
          with open(out_file, "w", encoding="utf-8") as f:
            json.dump(out, f, ensure_ascii=False)

          print("safecast out:", json.dumps(out, ensure_ascii=False))
          print("used:", used)
          PY

      - name: Show diff
        run: |
          git status --porcelain -- data/safecast_kaliningrad.json || true
          if [ -f data/safecast_kaliningrad.json ]; then
            echo "File head:" && head -c 300 data/safecast_kaliningrad.json || true
          fi

      - name: Commit & push (with rebase) if changed
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if [ -n "$(git status --porcelain -- data/safecast_kaliningrad.json)" ]; then
            git add data/safecast_kaliningrad.json
            git commit -m "safecast(Kaliningrad): update data/safecast_kaliningrad.json"

            # подтягиваем удалённые изменения и ребейзим, чтобы избежать non-fast-forward
            git pull --rebase origin "$(git rev-parse --abbrev-ref HEAD)" || {
              echo "Rebase failed, trying to abort…"
              git rebase --abort || true
              echo "Falling back to regular pull (merge)…"
              git pull origin "$(git rev-parse --abbrev-ref HEAD)" || true
            }

            git push origin "$(git rev-parse --abbrev-ref HEAD)"
          else
            echo "No changes in data/safecast_kaliningrad.json"
          fi

      - name: Upload artifact (safecast_kaliningrad.json)
        uses: actions/upload-artifact@v4
        with:
          name: safecast_kaliningrad
          path: data/safecast_kaliningrad.json
          if-no-files-found: warn
          retention-days: 7