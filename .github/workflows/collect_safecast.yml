name: Collect SafeCast

on:
  schedule:
    - cron: "*/30 * * * *"   # каждые 30 минут
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: collect-safecast
  cancel-in-progress: false

jobs:
  collect:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Калининград
          - name: "Kaliningrad"
            file: "safecast_kaliningrad.json"
            lat:  "54.7104"
            lon:  "20.4522"
            dist: "50"      # км радиус
            hours: "48"     # за сколько часов тянуть

          # Кипр (Лимассол, охват южного побережья)
          - name: "Cyprus"
            file: "safecast_cyprus.json"
            lat:  "34.7071"
            lon:  "33.0226"
            dist: "100"     # км радиус
            hours: "72"     # за сколько часов тянуть

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch SafeCast (${{ matrix.name }})
        env:
          OUT_FILE:  ${{ matrix.file }}
          LAT:       ${{ matrix.lat }}
          LON:       ${{ matrix.lon }}
          DIST:      ${{ matrix.dist }}
          HOURS:     ${{ matrix.hours }}
        run: |
          python - <<'PY'
          import os, sys, json, time, math, datetime as dt
          from typing import List, Dict, Any
          import requests

          out_file = os.environ["OUT_FILE"]
          lat = float(os.environ["LAT"])
          lon = float(os.environ["LON"])
          dist_km = float(os.environ["DIST"])
          hours = int(os.environ["HOURS"])

          # временное окно
          since_dt = dt.datetime.utcnow() - dt.timedelta(hours=hours)
          since_iso = since_dt.strftime("%Y-%m-%dT%H:%M:%SZ")

          # несколько вариантов эндпоинтов/параметров (на случай изменений на стороне SafeCast)
          candidates = [
            ("https://api.safecast.org/measurements.json", dict(captured_after=since_iso)),
            ("https://api.safecast.org/en-US/measurements.json", dict(captured_after=since_iso)),
            # иногда встречается алиас "since":
            ("https://api.safecast.org/measurements.json", dict(since=since_iso)),
            ("https://api.safecast.org/en-US/measurements.json", dict(since=since_iso)),
          ]

          def fetch(endpoint: str, base: Dict[str, Any]) -> List[Dict[str, Any]]:
            items: List[Dict[str, Any]] = []
            per_page = 100
            limit_pages = 50  # максимум ~5000 записей
            for page in range(1, limit_pages + 1):
              params = dict(
                latitude=lat,
                longitude=lon,
                distance=dist_km,   # км
                per_page=per_page,
                page=page,
                order="captured_at",
                direction="desc",
              )
              params.update(base)
              try:
                r = requests.get(endpoint, params=params, timeout=30)
                if r.status_code != 200:
                  # лёгкая пауза и выход
                  time.sleep(1.0)
                  break
                batch = r.json()
                if not isinstance(batch, list) or len(batch) == 0:
                  break
                items.extend(batch)
                # если вернулось меньше страницы — это конец
                if len(batch) < per_page:
                  break
                time.sleep(0.2)
              except Exception:
                break
            return items

          raw: List[Dict[str, Any]] = []
          for url, extra in candidates:
            raw = fetch(url, extra)
            if raw:
              src_url = url
              break
          else:
            print("safecast: no data fetched from API (all endpoints failed)")
            # сохраняем пустой список, чтобы не ломать пайплайн
            with open(out_file, "w", encoding="utf-8") as f:
              json.dump([], f, ensure_ascii=False)
            sys.exit(0)

          # нормализация и базовая фильтрация
          def parse_time(s):
            # ожидаем ISO8601
            try:
              # обрезаем микросекунды, если есть
              if "." in s:
                s = s.split(".")[0] + "Z"
              return int(dt.datetime.fromisoformat(s.replace("Z", "+00:00")).timestamp())
            except Exception:
              return None

          data = []
          for m in raw:
            cap = m.get("captured_at") or m.get("created_at") or ""
            ts = parse_time(cap) or 0
            if ts < int(since_dt.timestamp()):
              # на всякий случай отсечём старьё, если пришло больше, чем просили
              continue
            lat_m = m.get("latitude")
            lon_m = m.get("longitude")
            val = m.get("value")
            unit = m.get("unit") or m.get("value_type") or ""

            if lat_m is None or lon_m is None or val is None:
              continue

            try:
              val = float(val)
            except Exception:
              continue

            rec = {
              "ts": ts,
              "lat": float(lat_m),
              "lon": float(lon_m),
              "val": val,
              "unit": str(unit),
              "id": m.get("id"),
              "device": m.get("device") or m.get("device_id"),
              "source": "safecast",
            }
            data.append(rec)

          # сортируем по времени (по возрастанию)
          data.sort(key=lambda x: x["ts"])

          # пишем файл
          with open(out_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False)

          # маленькая сводка
          n = len(data)
          if n:
            vals = [d["val"] for d in data]
            vmin, vmax = min(vals), max(vals)
            vmed = sorted(vals)[n//2] if n % 2 == 1 else 0.5*(sorted(vals)[n//2-1] + sorted(vals)[n//2])
            print(f"safecast ({out_file}): {n} records, val[min/med/max]={vmin:.3f}/{vmed:.3f}/{vmax:.3f} (unit varies)")
          else:
            print(f"safecast ({out_file}): no records")
          PY

      - name: Commit & push if changed (${{ matrix.name }})
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if ! git diff --quiet -- ${{ matrix.file }}; then
            git add ${{ matrix.file }}
            git commit -m "safecast(${ { matrix.name } }): update ${ { matrix.file } }"
            git push
          else
            echo "No changes in ${{ matrix.file }}"
          fi
