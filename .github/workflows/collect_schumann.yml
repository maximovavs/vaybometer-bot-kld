name: Collect Schumann

on:
  schedule:
    - cron: "*/30 * * * *"          # каждые 30 минут
  workflow_dispatch: {}              # вручную из UI

permissions:
  contents: write

concurrency:
  group: collect-schumann
  cancel-in-progress: true

jobs:
  collect:
    runs-on: ubuntu-latest

    steps:
      - name: Sanity check
        run: echo "Workflow parsed OK and started."

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 lxml matplotlib

      - name: Run collector (writes schumann_hourly.json v2)
        env:
          # — базовые настройки истории/тренда
          SCHU_FILE: schumann_hourly.json
          SCHU_MAX_LEN: "5000"
          SCHU_ALLOW_CACHE_ON_FAIL: "1"
          SCHU_AMP_SCALE: "1"
          SCHU_TREND_WINDOW: "24"
          SCHU_TREND_DELTA: "0.1"
          SCHU_DEBUG: "1"               # ← включим дампы во .cache/
          SCHU_DEBUG_DUMPS: "1"

          # — HeartMath (GCI)
          SCHU_GCI_ENABLE: "1"
          SCHU_GCI_STATIONS: "GCI001,GCI003,GCI006,GCI004,GCI005"
          SCHU_GCI_URL: "https://www.heartmath.org/gci/gcms/live-data/gcms-magnetometer/"
          SCHU_GCI_IFRAME: "https://www.heartmath.org/gci/gcms/live-data/gcms-magnetometer/power_levels.html"
          SCHU_HEARTMATH_HTML: "data/gcms_magnetometer_heartmath.html"
          SCHU_MAP_GCI_POWER_TO_AMP: "1"
          SCHU_USER_AGENT: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36"

          # — TSU / SOSRFF
          SCHU_TSU_ENABLE: "1"
          SCHU_TSU_URL: "https://sosrff.tsu.ru/?page_id=502"
          SCHU_TSU_SNAPSHOT: "data/sosrff_tsu.html"

          # — кастомный JSON-эндпоинт (опционально)
          SCHU_CUSTOM_URL: ""

          # — H7 (зарезервировано)
          H7_URL: ""
          H7_TARGET_HZ: "54.81"
          H7_WINDOW_H: "48"
          H7_Z: "2.5"
          H7_MIN_ABS: "0.2"

          # — circuit breaker
          SCHU_BREAKER_THRESHOLD: "3"
          SCHU_BREAKER_COOLDOWN:  "1800"
        run: |
          python schumann.py --collect || echo "WARN: collector failed"

      - name: Fix history (normalize + dedupe)
        run: |
          python schumann.py --fix-history || true

      - name: Ensure schumann_hourly.json exists (init if empty)
        run: |
          if [ ! -s schumann_hourly.json ]; then
            echo "[]" > schumann_hourly.json
            echo "Initialized empty schumann_hourly.json"
          fi

      - name: Make trend charts (48h & 7d)
        run: |
          python - <<'PY'
          import os, json, datetime as dt
          import matplotlib.pyplot as plt

          path = "schumann_hourly.json"

          # безопасное чтение
          data = []
          try:
            if os.path.exists(path) and os.path.getsize(path) > 0:
              with open(path, "r", encoding="utf-8") as f:
                txt = f.read().strip()
                data = json.loads(txt) if txt else []
          except Exception as e:
            print("WARN: cannot parse schumann_hourly.json:", e)
            data = []

          # извлекаем валидные точки амплитуды
          points = []
          for r in data if isinstance(data, list) else []:
            try:
              ts = int(float(r.get("ts", 0)))
              amp = r.get("amp")
              if isinstance(amp, (int, float)):
                points.append((dt.datetime.utcfromtimestamp(ts), float(amp)))
            except Exception:
              pass

          def save_chart(hours, out):
            if not points:
              print(f"No points -> skip {out}")
              return
            t_cut = points[-1][0] - dt.timedelta(hours=hours)
            xs = [t for t, a in points if t >= t_cut]
            ys = [a for t, a in points if t >= t_cut]
            if len(xs) < 2:
              print(f"Not enough data ({len(xs)} pts) -> skip {out}")
              return
            plt.figure(figsize=(10,4), dpi=160)
            plt.plot(xs, ys, marker="o", linewidth=1.5, markersize=2)
            plt.grid(True, alpha=0.3)
            plt.title(f"Schumann amplitude (last {hours}h, UTC) — n={len(xs)}; last={ys[-1]:.2f}")
            plt.xlabel("Time (UTC)")
            plt.ylabel("Amplitude (pT)")
            plt.tight_layout()
            plt.savefig(out)
            plt.close()
            print("Chart saved:", out)

          save_chart(48, "schumann_amp_48h.png")
          save_chart(24*7, "schumann_amp_7d.png")
          PY

      - name: Commit & push if changed (JSON + charts)
        id: commit
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add schumann_hourly.json schumann_amp_48h.png schumann_amp_7d.png || true
          if git diff --cached --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          else
            git commit -m "schumann: update (v2.4; fix-history; charts) $(date -u +'%Y-%m-%dT%H:%MZ')"
            git push
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload data artifacts (JSON + charts)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: schumann-data
          path: |
            schumann_hourly.json
            schumann_amp_48h.png
            schumann_amp_7d.png
          retention-days: 7
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false

      - name: Upload debug HTML (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: schumann-debug
          path: |
            .cache/gci_page.html
            .cache/gci_iframe.html
            .cache/gci_iframe_only.html
            .cache/gci_saved.html
            .cache/tsu_live.html
            .cache/tsu_snapshot.html
          if-no-files-found: ignore
          retention-days: 3

      - name: Post to Telegram (optional)
        if: steps.commit.outputs.changed == 'true' && vars.TG_ENABLED == '1'
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID:   ${{ secrets.CHANNEL_ID }}
        run: |
          CAPTION="Schumann update • $(date +'%Y-%m-%d %H:%M')"
          curl -s -F chat_id="$CHAT_ID" -F caption="$CAPTION (48h)" -F parse_mode="HTML" \
               -F photo="@schumann_amp_48h.png" \
               "https://api.telegram.org/bot$BOT_TOKEN/sendPhoto"
          curl -s -F chat_id="$CHAT_ID" -F caption="$CAPTION (7d)" -F parse_mode="HTML" \
               -F photo="@schumann_amp_7d.png" \
               "https://api.telegram.org/bot$BOT_TOKEN/sendPhoto"
