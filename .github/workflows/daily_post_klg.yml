name: Daily VayboMeter (KLD)

on:
  schedule:
    # Утро (пост "на сегодня"): 05:00 UTC = 08:00 МСК
    - cron: '0 5 * * *'
    # Вечер (анонс "на завтра"): 15:00 UTC
    - cron: '0 15 * * *'
    # Курсы валют (12:00 МСК): 09:00 UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      run_morning:
        description: "Запустить утренний пост"
        type: boolean
        default: false
        required: false
      run_evening:
        description: "Запустить вечерний пост"
        type: boolean
        default: true
        required: false
      run_noon_fx:
        description: "Запустить пост только с курсами"
        type: boolean
        default: false
        required: false
      work_date:
        description: "Переопределить дату (YYYY-MM-DD)"
        required: false
      to_test:
        description: "Публиковать в тестовый канал?"
        type: boolean
        default: false
        required: false
      channel_override:
        description: "Явный chat_id канала (перебивает параметры выше)"
        required: false

permissions:
  contents: read

concurrency:
  group: daily-post-kld-${{ github.workflow }}-${{ github.job }}
  cancel-in-progress: false

env:
  TELEGRAM_TOKEN_KLG: ${{ secrets.TELEGRAM_TOKEN_KLG }}
  CHANNEL_ID_KLG:     ${{ secrets.CHANNEL_ID_KLG }}
  CHANNEL_ID_TEST:    ${{ secrets.CHANNEL_ID_TEST }}
  CHANNEL_ID_OVERRIDE: ${{ github.event.inputs.channel_override }}

  # Таймзона и (опц.) дата для ручного запуска
  TZ: Europe/Kaliningrad
  WORK_DATE: ${{ github.event.inputs.work_date }}

  # Поведение бота
  DISABLE_SCHUMANN: "1"
  DISABLE_LLM_DAILY: "0"
  DEBUG_WATER: "0"
  GEN_SKIP_SHORT: "1"
  PYTHONUNBUFFERED: "1"

  # LLM ключи (опционально)
  OPENAI_API_KEY:  ${{ secrets.OPENAI_API_KEY }}
  GEMINI_API_KEY:  ${{ secrets.GEMINI_API_KEY }}
  GROQ_API_KEY:    ${{ secrets.GROQ_API_KEY }}

  # Флаг публикации в тест-канал
  TO_TEST: ${{ github.event.inputs.to_test }}

jobs:
  morning:
    name: Morning post (for today)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: >
      (github.event_name == 'schedule' && github.event.schedule == '0 5 * * *') ||
      (github.event_name == 'workflow_dispatch' && fromJSON(github.event.inputs.run_morning))
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Post morning (for today)
        shell: bash
        run: |
          python <<'PY'
          import os, runpy, sys, pendulum
          wd = os.getenv("WORK_DATE")
          if wd:
              def _fake_today(tz=None):
                  dt = pendulum.parse(wd)
                  return dt.in_tz(tz) if tz else dt
              pendulum.today = _fake_today

          args = ["post_kld.py", "--mode", "morning"]
          chat_override = os.getenv("CHANNEL_ID_OVERRIDE") or ""
          if chat_override.strip():
              args += ["--chat-id", chat_override.strip()]
          else:
              to_test = os.getenv("TO_TEST","").strip().lower() in ("1","true","yes","on")
              if to_test:
                  args.append("--to-test")

          sys.argv = args
          runpy.run_path("post_kld.py", run_name="__main__")
          PY

  evening:
    name: Evening post (for tomorrow)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: >
      (github.event_name == 'schedule' && github.event.schedule == '0 15 * * *') ||
      (github.event_name == 'workflow_dispatch' && fromJSON(github.event.inputs.run_evening))
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Post evening (announce tomorrow)
        shell: bash
        run: |
          python <<'PY'
          import os, runpy, sys, pendulum
          wd = os.getenv("WORK_DATE")
          if wd:
              def _fake_today(tz=None):
                  dt = pendulum.parse(wd)
                  return dt.in_tz(tz) if tz else dt
              pendulum.today = _fake_today

          args = ["post_kld.py", "--mode", "evening"]
          chat_override = os.getenv("CHANNEL_ID_OVERRIDE") or ""
          if chat_override.strip():
              args += ["--chat-id", chat_override.strip()]
          else:
              to_test = os.getenv("TO_TEST","").strip().lower() in ("1","true","yes","on")
              if to_test:
                  args.append("--to-test")

          sys.argv = args
          runpy.run_path("post_kld.py", run_name="__main__")
          PY

  noon_fx:
    name: Noon FX only (12:00 MSK)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: >
      (github.event_name == 'schedule' && github.event.schedule == '0 9 * * *') ||
      (github.event_name == 'workflow_dispatch' && fromJSON(github.event.inputs.run_noon_fx))
    env:
      # на всякий случай вырубаем LLM в FX-посте
      DISABLE_LLM_DAILY: "1"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Post FX only (12:00 MSK)
        shell: bash
        run: |
          python <<'PY'
          import os, runpy, sys, pendulum
          wd = os.getenv("WORK_DATE")
          if wd:
              def _fake_today(tz=None):
                  dt = pendulum.parse(wd)
                  return dt.in_tz(tz) if tz else dt
              pendulum.today = _fake_today

          args = ["post_kld.py", "--fx-only"]
          chat_override = os.getenv("CHANNEL_ID_OVERRIDE") or ""
          if chat_override.strip():
              args += ["--chat-id", chat_override.strip()]
          else:
              to_test = os.getenv("TO_TEST","").strip().lower() in ("1","true","yes","on")
              if to_test:
                  args.append("--to-test")

          sys.argv = args
          runpy.run_path("post_kld.py", run_name="__main__")
          PY