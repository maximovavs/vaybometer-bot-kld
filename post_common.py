#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_common.py ‚Äî VayboMeter (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥).

‚Ä¢ –ú–æ—Ä–µ, –ø—Ä–æ–≥–Ω–æ–∑ –ö—ë–Ω–∏–≥–∞ (–¥–µ–Ω—å/–Ω–æ—á—å, –º/—Å, RH min‚Äìmax, –¥–∞–≤–ª–µ–Ω–∏–µ)
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –≥–æ—Ä–æ–¥–æ–≤ (d/n, –∫–æ–¥ –ø–æ–≥–æ–¥—ã —Å–ª–æ–≤–∞–º–∏ + üåä)
‚Ä¢ Air (IQAir/–≤–∞—à –∏—Å—Ç–æ—á–Ω–∏–∫) + Safecast (PM –∏ CPM‚ÜíŒºSv/h, –º—è–≥–∫–∞—è —à–∫–∞–ª–∞ üü¢üü°üîµ), –ø—ã–ª—å—Ü–∞
‚Ä¢ –†–∞–¥–∏–∞—Ü–∏—è –∏–∑ –æ—Ñ–∏—Ü. –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (—Å—Ç—Ä–æ–≥–∞—è —à–∫–∞–ª–∞ üü¢üü°üî¥)
‚Ä¢ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp —Å–æ ¬´—Å–≤–µ–∂–µ—Å—Ç—å—é¬ª + –°–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä (Bz/Bt/v/n + —Å—Ç–∞—Ç—É—Å)
‚Ä¢ –®—É–º–∞–Ω (—Ñ–æ–ª–ª–±—ç–∫ —á—Ç–µ–Ω–∏—è JSON; –ª–∏–±–æ –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç schumann.get_schumann())
‚Ä¢ –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (–º–∏–∫—Ä–æ-LLM 2‚Äì3 —Å—Ç—Ä–æ–∫–∏ + VoC, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ lunar_calendar.json)
‚Ä¢ ¬´–í–∏–Ω–∏—Ç–µ ‚Ä¶¬ª, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ñ–∞–∫—Ç –¥–Ω—è
"""

from __future__ import annotations
import os
import re
import json
import asyncio
import logging
import math
from pathlib import Path
from typing import Any, Dict, List, Tuple, Optional, Union

import pendulum
from telegram import Bot, constants

from utils        import compass, get_fact, AIR_EMOJI, pm_color, kp_emoji, kmh_to_ms, smoke_index
from weather      import get_weather, fetch_tomorrow_temps, day_night_stats
from air          import get_air, get_sst, get_kp, get_solar_wind
from pollen       import get_pollen
from radiation    import get_radiation
from gpt          import gpt_blurb, gpt_complete  # gpt_complete ‚Äî –¥–ª—è –º–∏–∫—Ä–æ-LLM –≤ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è—Ö¬ª

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
KLD_LAT, KLD_LON = 54.710426, 20.452214

# –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ CPM -> ŒºSv/h (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ENV CPM_TO_USVH)
CPM_TO_USVH = float(os.getenv("CPM_TO_USVH", "0.000571"))

# –ö—ç—à –¥–ª—è –º–∏–∫—Ä–æ-LLM ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏–π¬ª
CACHE_DIR = Path(".cache")
CACHE_DIR.mkdir(exist_ok=True, parents=True)
USE_DAILY_LLM = os.getenv("DISABLE_LLM_DAILY", "").strip().lower() not in ("1", "true", "yes", "on")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç–∞: –ø—Ä–∏–Ω—è—Ç—å tz –∫–∞–∫ –æ–±—ä–µ–∫—Ç –∏–ª–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _as_tz(tz: Union[pendulum.Timezone, str]) -> pendulum.Timezone:
    if isinstance(tz, str):
        return pendulum.timezone(tz)
    return tz

# –ú—ç–ø–ø–∏–Ω–≥ WMO-–∫–æ–¥–æ–≤ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç+—ç–º–æ–¥–∑–∏
WMO_DESC = {
    0: "‚òÄÔ∏è —è—Å–Ω–æ", 1: "‚õÖ —á.–æ–±–ª", 2: "‚òÅÔ∏è –æ–±–ª", 3: "üå• –ø–∞—Å–º",
    45: "üå´ —Ç—É–º–∞–Ω", 48: "üå´ –∏–∑–º–æ—Ä–æ–∑—å", 51: "üå¶ –º–æ—Ä–æ—Å—å",
    61: "üåß –¥–æ–∂–¥—å", 71: "‚ùÑÔ∏è —Å–Ω–µ–≥", 95: "‚õà –≥—Ä–æ–∑–∞",
}
def code_desc(c: Any) -> Optional[str]:
    try:
        i = int(c)
    except Exception:
        return None
    return WMO_DESC.get(i)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®—É–º–∞–Ω: —á—Ç–µ–Ω–∏–µ JSON-–∏—Å—Ç–æ—Ä–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _read_schumann_history() -> List[Dict[str, Any]]:
    candidates: List[Path] = []
    env_path = os.getenv("SCHU_FILE")
    if env_path:
        candidates.append(Path(env_path))
    here = Path(__file__).parent
    candidates += [here / "schumann_hourly.json", here.parent / "schumann_hourly.json"]

    for p in candidates:
        try:
            if p.exists():
                txt = p.read_text("utf-8").strip()
                data = json.loads(txt) if txt else []
                if isinstance(data, list):
                    return data
        except Exception as e:
            logging.warning("Schumann history read error from %s: %s", p, e)
    return []

def _schumann_trend(values: List[float], delta: float = 0.1) -> str:
    if not values:
        return "‚Üí"
    tail = values[-24:] if len(values) > 24 else values
    if len(tail) < 2:
        return "‚Üí"
    avg_prev = sum(tail[:-1]) / (len(tail) - 1)
    d = tail[-1] - avg_prev
    return "‚Üë" if d >= delta else "‚Üì" if d <= -delta else "‚Üí"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®—É–º–∞–Ω: –≤—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _freq_status(freq: Optional[float]) -> tuple[str, str]:
    """
    (label, code):
      üü¢ –≤ –Ω–æ—Ä–º–µ ‚Äî 7.7..8.1
      üü° –∫–æ–ª–µ–±–∞–Ω–∏—è ‚Äî 7.4..8.4, –Ω–æ –≤–Ω–µ –∑–µ–ª—ë–Ω–æ–≥–æ –∫–æ—Ä–∏–¥–æ—Ä–∞
      üî¥ —Å–∏–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ‚Äî <7.4 –∏–ª–∏ >8.4
    """
    if not isinstance(freq, (int, float)):
        return "üü° –∫–æ–ª–µ–±–∞–Ω–∏—è", "yellow"
    f = float(freq)
    if 7.4 <= f <= 8.4:
        return ("üü¢ –≤ –Ω–æ—Ä–º–µ", "green") if (7.7 <= f <= 8.1) else ("üü° –∫–æ–ª–µ–±–∞–Ω–∏—è", "yellow")
    return "üî¥ —Å–∏–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "red"

def _trend_text(sym: str) -> str:
    return {"‚Üë": "—Ä–∞—Å—Ç—ë—Ç", "‚Üì": "—Å–Ω–∏–∂–∞–µ—Ç—Å—è", "‚Üí": "—Å—Ç–∞–±–∏–ª—å–Ω–æ"}.get(sym, "—Å—Ç–∞–±–∏–ª—å–Ω–æ")

def _h7_text(h7_amp: Optional[float], h7_spike: Optional[bool]) -> str:
    if isinstance(h7_amp, (int, float)):
        return f"¬∑ H7: {h7_amp:.1f} (‚ö° –≤—Å–ø–ª–µ—Å–∫)" if h7_spike else f"¬∑ H7: {h7_amp:.1f} ‚Äî —Å–ø–æ–∫–æ–π–Ω–æ"
    return "¬∑ H7: ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

def _gentle_interpretation(code: str) -> str:
    if code == "green":
        return "–í–æ–ª–Ω—ã –®—É–º–∞–Ω–∞ –±–ª–∏–∑–∫–∏ –∫ –Ω–æ—Ä–º–µ ‚Äî –æ—Ä–≥–∞–Ω–∏–∑–º —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –∫–∞–∫ –Ω–∞ –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å."
    if code == "yellow":
        return "–ó–∞–º–µ—Ç–Ω—ã –∫–æ–ª–µ–±–∞–Ω–∏—è ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ –ª—ë–≥–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –ø–æ–≥–æ–¥–µ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é."
    return "–°–∏–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è ‚Äî –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Ç–µ—Å—å –∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é –∏ —Å–Ω–∏–∂–∞–π—Ç–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏."

def get_schumann_with_fallback() -> Dict[str, Any]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ schumann.get_schumann(), –∏–Ω–∞—á–µ —á–∏—Ç–∞–µ–º JSON.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.
    """
    try:
        import schumann  # –ª–æ–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
        if hasattr(schumann, "get_schumann"):
            payload = schumann.get_schumann() or {}
            return {
                "freq": payload.get("freq"),
                "amp": payload.get("amp"),
                "trend": payload.get("trend", "‚Üí"),
                "trend_text": payload.get("trend_text") or _trend_text(payload.get("trend", "‚Üí")),
                "status": payload.get("status") or _freq_status(payload.get("freq"))[0],
                "status_code": payload.get("status_code") or _freq_status(payload.get("freq"))[1],
                "h7_text": payload.get("h7_text") or _h7_text(payload.get("h7_amp"), payload.get("h7_spike")),
                "h7_amp": payload.get("h7_amp"),
                "h7_spike": payload.get("h7_spike"),
                "interpretation": payload.get("interpretation") or _gentle_interpretation(
                    payload.get("status_code") or _freq_status(payload.get("freq"))[1]
                ),
                "cached": bool(payload.get("cached")),
            }
    except Exception:
        pass

    # —Ñ–æ–ª–ª–±—ç–∫: –ª–æ–∫–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
    arr = _read_schumann_history()
    if not arr:
        return {"freq": None, "amp": None, "trend": "‚Üí",
                "trend_text": "—Å—Ç–∞–±–∏–ª—å–Ω–æ", "status": "üü° –∫–æ–ª–µ–±–∞–Ω–∏—è", "status_code": "yellow",
                "h7_text": _h7_text(None, None), "h7_amp": None, "h7_spike": None,
                "interpretation": _gentle_interpretation("yellow"), "cached": True}

    amps: List[float] = []
    last: Optional[Dict[str, Any]] = None
    for rec in arr:
        if not isinstance(rec, dict):
            continue
        if isinstance(rec.get("amp"), (int, float)):
            amps.append(float(rec["amp"]))
        last = rec

    trend = _schumann_trend(amps)
    freq = (last.get("freq") if last else None)
    amp = (last.get("amp") if last else None)
    h7_amp = (last.get("h7_amp") if last else None)
    h7_spike = (last.get("h7_spike") if last else None)
    src = ((last or {}).get("src") or "").lower()
    cached = (src == "cache")

    status, code = _freq_status(freq)
    return {
        "freq": freq if isinstance(freq, (int, float)) else None,
        "amp": amp if isinstance(amp, (int, float)) else None,
        "trend": trend,
        "trend_text": _trend_text(trend),
        "status": status,
        "status_code": code,
        "h7_text": _h7_text(h7_amp, h7_spike),
        "h7_amp": h7_amp if isinstance(h7_amp, (int, float)) else None,
        "h7_spike": h7_spike if isinstance(h7_spike, bool) else None,
        "interpretation": _gentle_interpretation(code),
        "cached": cached,
    }

def schumann_line(s: Dict[str, Any]) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 2 —Å—Ç—Ä–æ–∫–∏:
    1) —Å—Ç–∞—Ç—É—Å + —á–∏—Å–ª–∞ + —Ç—Ä–µ–Ω–¥ + H7
    2) –º—è–≥–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç —á–∏—Å–µ–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É –±–µ–∑ ¬´–Ω/–¥ –ì—Ü / –Ω/–¥¬ª.
    """
    freq = s.get("freq")
    amp  = s.get("amp")
    trend_text = s.get("trend_text") or _trend_text(s.get("trend", "‚Üí"))
    status = s.get("status") or _freq_status(freq)[0]
    h7line = s.get("h7_text") or _h7_text(s.get("h7_amp"), s.get("h7_spike"))
    interp = s.get("interpretation") or _gentle_interpretation(s.get("status_code") or _freq_status(freq)[1])

    if not isinstance(freq, (int, float)) and not isinstance(amp, (int, float)):
        main = f"{status} –®—É–º–∞–Ω: –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É; —Ç—Ä–µ–Ω–¥: {trend_text} ‚Ä¢ {h7line}"
        return main + "\n" + interp

    fstr = f"{freq:.2f}" if isinstance(freq, (int, float)) else "–Ω/–¥"
    astr = f"{amp:.2f} pT" if isinstance(amp, (int, float)) else "–Ω/–¥"
    main = f"{status} –®—É–º–∞–Ω: {fstr} –ì—Ü / {astr} ‚Äî —Ç—Ä–µ–Ω–¥: {trend_text} ‚Ä¢ {h7line}"
    return main + "\n" + interp

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Safecast / —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _read_json(path: Path) -> Optional[Dict[str, Any]]:
    try:
        if not path.exists():
            return None
        data = json.loads(path.read_text("utf-8"))
        return data if isinstance(data, dict) else None
    except Exception as e:
        logging.warning("Safecast read error from %s: %s", path, e)
        return None

def load_safecast() -> Optional[Dict[str, Any]]:
    """
    –ò—â–µ–º JSON:
      1) env SAFECAST_FILE
      2) ./data/safecast_kaliningrad.json
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ—Ç/—É—Å—Ç–∞—Ä–µ–ª–æ.
    """
    paths: List[Path] = []
    if os.getenv("SAFECAST_FILE"):
        paths.append(Path(os.getenv("SAFECAST_FILE")))
    here = Path(__file__).parent
    paths.append(here / "data" / "safecast_kaliningrad.json")

    sc: Optional[Dict[str, Any]] = None
    for p in paths:
        sc = _read_json(p)
        if sc:
            break
    if not sc:
        return None

    # —Å–≤–µ–∂–µ—Å—Ç—å –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
    ts = sc.get("ts")
    if not isinstance(ts, (int, float)):
        return None
    now_ts = pendulum.now("UTC").int_timestamp
    if now_ts - int(ts) > 24 * 3600:
        return None
    return sc

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ä–∏—Å–∫/—à–∫–∞–ª—ã –¥–ª—è —Ä–∞–¥–∏–∞—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def safecast_usvh_risk(x: float) -> tuple[str, str]:
    if x <= 0.15:
        return "üü¢", "–Ω–∏–∑–∫–∏–π"
    if x <= 0.30:
        return "üü°", "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
    return "üîµ", "–≤—ã—à–µ –Ω–æ—Ä–º—ã"

def official_usvh_risk(x: float) -> tuple[str, str]:
    if x <= 0.15:
        return "üü¢", "–Ω–∏–∑–∫–∏–π"
    if x <= 0.30:
        return "üü°", "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π"
    return "üî¥", "–≤—ã—Å–æ–∫–∏–π"

def safecast_pm_level(pm25: Optional[float], pm10: Optional[float]) -> Tuple[str, str]:
    """–ü–æ —Ö—É–¥—à–µ–º—É –∏–∑ PM2.5/PM10."""
    def level_pm25(x: float) -> int:
        if x <= 15: return 0
        if x <= 35: return 1
        if x <= 55: return 2
        return 3
    def level_pm10(x: float) -> int:
        if x <= 30: return 0
        if x <= 50: return 1
        if x <= 100: return 2
        return 3
    worst = -1
    if isinstance(pm25, (int, float)): worst = max(worst, level_pm25(float(pm25)))
    if isinstance(pm10, (int, float)): worst = max(worst, level_pm10(float(pm10)))
    if worst < 0: return "‚ö™", "–Ω/–¥"
    return (["üü¢","üü°","üü†","üî¥"][worst],
            ["–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"][worst])

def safecast_block_lines() -> List[str]:
    """–°—Ç—Ä–æ–∫–∏ SafeCast –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞¬ª."""
    sc = load_safecast()
    if not sc:
        return []
    lines: List[str] = []
    pm25 = sc.get("pm25"); pm10 = sc.get("pm10")
    if isinstance(pm25, (int, float)) or isinstance(pm10, (int, float)):
        em, lbl = safecast_pm_level(pm25, pm10)
        parts = []
        if isinstance(pm25, (int, float)): parts.append(f"PM‚ÇÇ.‚ÇÖ {pm25:.0f}")
        if isinstance(pm10, (int, float)): parts.append(f"PM‚ÇÅ‚ÇÄ {pm10:.0f}")
        lines.append(f"üß™ Safecast: {em} {lbl} ¬∑ " + " | ".join(parts))
    cpm = sc.get("cpm")
    usvh = sc.get("radiation_usvh")
    if not isinstance(usvh, (int, float)) and isinstance(cpm, (int, float)):
        usvh = float(cpm) * CPM_TO_USVH
    if isinstance(usvh, (int, float)):
        em, lbl = safecast_usvh_risk(float(usvh))
        if isinstance(cpm, (int, float)):
            lines.append(f"üìü –†–∞–¥–∏–∞—Ü–∏—è (Safecast): {cpm:.0f} CPM ‚âà {usvh:.3f} ŒºSv/h ‚Äî {em} {lbl} (–º–µ–¥–∏–∞–Ω–∞ 6 —á)")
        else:
            lines.append(f"üìü –†–∞–¥–∏–∞—Ü–∏—è (Safecast): ‚âà {usvh:.3f} ŒºSv/h ‚Äî {em} {lbl} (–º–µ–¥–∏–∞–Ω–∞ 6 —á)")
    elif isinstance(cpm, (int, float)):
        lines.append(f"üìü –†–∞–¥–∏–∞—Ü–∏—è (Safecast): {cpm:.0f} CPM (–º–µ–¥–∏–∞–Ω–∞ 6 —á)")
    return lines

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∞–¥–∏–∞—Ü–∏—è (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def radiation_line(lat: float, lon: float) -> Optional[str]:
    """
    –ë–µ—Ä—ë–º –¥–æ–∑—É –∏–∑ get_radiation(lat, lon) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ—Å—Ç–∞
    —Å–æ —Å—Ç—Ä–æ–≥–æ–π —à–∫–∞–ª–æ–π —ç–º–æ–¥–∑–∏ üü¢/üü°/üî¥. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.
    """
    data = get_radiation(lat, lon) or {}
    dose = data.get("dose")
    if isinstance(dose, (int, float)):
        em, lbl = official_usvh_risk(float(dose))
        return f"{em} –†–∞–¥–∏–∞—Ü–∏—è: {float(dose):.3f} ŒºSv/h ({lbl})"
    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–æ–¥–∏–∞–∫–∏ ‚Üí —Å–∏–º–≤–æ–ª—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ZODIAC = {
    "–û–≤–µ–Ω": "‚ôà","–¢–µ–ª–µ—Ü": "‚ôâ","–ë–ª–∏–∑–Ω–µ—Ü—ã": "‚ôä","–†–∞–∫": "‚ôã","–õ–µ–≤": "‚ôå",
    "–î–µ–≤–∞": "‚ôç","–í–µ—Å—ã": "‚ôé","–°–∫–æ—Ä–ø–∏–æ–Ω": "‚ôè","–°—Ç—Ä–µ–ª–µ—Ü": "‚ôê",
    "–ö–æ–∑–µ—Ä–æ–≥": "‚ôë","–í–æ–¥–æ–ª–µ–π": "‚ôí","–†—ã–±—ã": "‚ôì",
}
def zsym(s: str) -> str:
    for name, sym in ZODIAC.items():
        s = s.replace(name, sym)
    return s

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ß—Ç–µ–Ω–∏–µ lunar_calendar.json –∏ VoC ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def load_calendar(path: str = "lunar_calendar.json") -> dict:
    """
    –ß–∏—Ç–∞–µ—Ç lunar_calendar.json –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–Ω–µ–π {YYYY-MM-DD: rec}.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ ¬´–ø–ª–æ—Å–∫–∏–π¬ª, –∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –æ–±—ë—Ä—Ç–∫–æ–π {"days": ...}.
    """
    try:
        data = json.loads(Path(path).read_text("utf-8"))
    except Exception:
        return {}
    if isinstance(data, dict) and isinstance(data.get("days"), dict):
        return data["days"]
    return data if isinstance(data, dict) else {}

def _parse_voc_dt(s: str, tz: pendulum.tz.timezone.Timezone):
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ISO –∏ —Ñ–æ—Ä–º–∞—Ç 'DD.MM HH:mm'."""
    if not s:
        return None
    try:
        return pendulum.parse(s).in_tz(tz)
    except Exception:
        pass
    try:
        dmy, hm = s.split()
        d, m = map(int, dmy.split("."))
        hh, mm = map(int, hm.split(":"))
        year = pendulum.today(tz).year
        return pendulum.datetime(year, m, d, hh, mm, tz=tz)
    except Exception:
        return None

def voc_interval_for_date(rec: dict, tz_local: str = "Asia/Nicosia"):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (start_dt, end_dt) –¥–ª—è VoC –∏–∑ –∑–∞–ø–∏—Å–∏ –¥–Ω—è –∏–ª–∏ None.
    –í JSON VoC —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ "DD.MM HH:mm" (–ª–æ–∫–∞–ª—å–Ω–∞—è TZ) –∏–ª–∏ ISO.
    """
    if not isinstance(rec, dict):
        return None
    voc = (rec.get("void_of_course")
           or rec.get("voc")
           or rec.get("void")
           or {})
    if not isinstance(voc, dict):
        return None
    s = voc.get("start") or voc.get("from") or voc.get("start_time")
    e = voc.get("end")   or voc.get("to")   or voc.get("end_time")
    if not s or not e:
        return None
    tz = pendulum.timezone(tz_local)
    t1 = _parse_voc_dt(s, tz)
    t2 = _parse_voc_dt(e, tz)
    if not t1 or not t2:
        return None
    return (t1, t2)

def format_voc_for_post(start: pendulum.DateTime, end: pendulum.DateTime, label: str = "—Å–µ–≥–æ–¥–Ω—è") -> str:
    """–§–æ—Ä–º–∞—Ç: '‚ö´Ô∏è VoC —Å–µ–≥–æ–¥–Ω—è 09:10‚Äì13:25.' (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ, –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ —É—Ç–∏–ª–∏—Ç—É)."""
    if not start or not end:
        return ""
    return f"‚ö´Ô∏è VoC {label} {start.format('HH:mm')}‚Äì{end.format('HH:mm')}."

def lunar_advice_for_date(cal: dict, date_obj) -> list[str]:
    """
    –î–æ—Å—Ç–∞—ë—Ç —Å–æ–≤–µ—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    date_obj: pendulum.Date/DateTime –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ 'YYYY-MM-DD'.
    """
    key = date_obj.to_date_string() if hasattr(date_obj, "to_date_string") else str(date_obj)
    rec = (cal or {}).get(key, {}) or {}
    adv = rec.get("advice")
    return [str(x).strip() for x in adv][:3] if isinstance(adv, list) and adv else []

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (–º–∏–∫—Ä–æ-LLM + VoC) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _astro_llm_bullets(date_str: str, phase: str, percent: int, sign: str, voc_text: str) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –±–ª–æ–∫–∞ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª.
    –ö—ç—à: .cache/astro_YYYY-MM-DD.txt
    """
    cache_file = CACHE_DIR / f"astro_{date_str}.txt"
    if cache_file.exists():
        lines = [l.strip() for l in cache_file.read_text("utf-8").splitlines() if l.strip()]
        if lines:
            return lines[:3]

    if not USE_DAILY_LLM:
        return []

    system = (
        "–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –ê—Å—Ç—Ä–æ–≠–∫—Å–ø–µ—Ä—Ç, —Ç—ã –ª—É—á—à–µ –≤—Å–µ—Ö –∑–Ω–∞–µ—à—å –∫–∞–∫ —ç–Ω–µ—Ä–≥–∏–∏ –ª—É–Ω—ã –∏ –∑–≤–µ–∑–¥ –≤–ª–∏—è—é—Ç –Ω–∞ –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫–∞."
        "–¢—ã –¥–µ–ª–∞–µ—à—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É (2‚Äì3 —Å—Ç—Ä–æ–∫–∏). "
        "–ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, –±–µ–∑ –∫–ª–∏—à–µ. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: "
        "—Ñ–∞–∑–∞ –õ—É–Ω—ã, –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å, –∑–Ω–∞–∫ –õ—É–Ω—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª Void-of-Course. "
        "–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –¥—Ä—É–≥–∏—Ö –ø–ª–∞–Ω–µ—Ç –∏ –∞—Å–ø–µ–∫—Ç–æ–≤. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ–¥–∑–∏."
    )
    prompt = (
        f"–î–∞—Ç–∞: {date_str}. –§–∞–∑–∞ –õ—É–Ω—ã: {phase} ({percent}% –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏), –∑–Ω–∞–∫: {sign or '–Ω/–¥'}. "
        f"Void-of-Course: {voc_text or '–Ω–µ—Ç'}."
    )
    try:
        txt = gpt_complete(prompt=prompt, system=system, temperature=0.5, max_tokens=180)
        lines = [l.strip() for l in (txt or "").splitlines() if l.strip()]
        if lines:
            cache_file.write_text("\n".join(lines[:3]), "utf-8")
            return lines[:3]
    except Exception:
        pass
    return []

def build_astro_section(date_local: Optional[pendulum.Date] = None,
                        tz_local: str = "Asia/Nicosia") -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –±–ª–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª: 2‚Äì3 —Å—Ç—Ä–æ–∫–∏ –æ—Ç LLM (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) +
    VoC (–ø–æ–ª–Ω–æ—Å—Ç—å—é, –µ—Å–ª–∏ –µ—Å—Ç—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å). –î–∞–Ω–Ω—ã–µ –±–µ—Ä—ë–º –∏–∑ lunar_calendar.json (–∫–ª—é—á–∏ days).
    """
    tz = pendulum.timezone(tz_local)
    date_local = date_local or pendulum.today(tz)
    date_key = date_local.format("YYYY-MM-DD")

    cal = load_calendar("lunar_calendar.json")  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {YYYY-MM-DD: rec}
    rec = cal.get(date_key, {}) if isinstance(cal, dict) else {}

    # –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π
    phase_raw = (rec.get("phase_name") or rec.get("phase") or "").strip()
    phase_name = re.sub(r"^[^\w–ê-–Ø–∞-—è–Å—ë]+", "", phase_raw).split(",")[0].strip()

    percent = rec.get("percent") or rec.get("illumination") or rec.get("illum") or 0
    try:
        percent = int(round(float(percent)))
    except Exception:
        percent = 0

    sign = rec.get("sign") or rec.get("zodiac") or ""

    # VoC –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π TZ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é, –±–µ–∑ ¬´—á–∞—Å–æ–≤ –±–æ–¥—Ä—Å—Ç–≤–æ–≤–∞–Ω–∏—è¬ª
    voc_text = ""
    voc = voc_interval_for_date(rec, tz_local=tz_local)
    if voc:
        t1, t2 = voc
        voc_text = f"{t1.format('HH:mm')}‚Äì{t2.format('HH:mm')}"

    # 1) –ø—Ä–æ–±—É–µ–º LLM
    bullets = _astro_llm_bullets(
        date_local.format("DD.MM.YYYY"),
        phase_name,
        int(percent or 0),
        sign,
        voc_text
    )

    # 2) —Ñ–æ–ª–±—ç–∫ ‚Äì —Å–æ–≤–µ—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    if not bullets:
        adv = rec.get("advice") or []
        bullets = [f"‚Ä¢ {a}" for a in adv[:3]] if adv else []

    # 3) –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–æ–ª–±—ç–∫ ‚Äì ¬´–∂—ë—Å—Ç–∫–∏–π¬ª
    if not bullets:
        base = f"üåô –§–∞–∑–∞: {phase_name}" if phase_name else "üåô –õ—É–Ω–Ω—ã–π –¥–µ–Ω—å –≤ –Ω–æ—Ä–º–µ"
        prm  = f" ({percent}%)" if isinstance(percent, int) and percent else ""
        bullets = [base + prm, (f"‚ôí –ó–Ω–∞–∫: {sign}" if sign else "‚Äî –∑–Ω–∞–∫ –õ—É–Ω—ã –Ω/–¥")]

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫
    lines = ["üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>"]
    lines += [zsym(x) for x in bullets[:3]]
    if voc_text:
        lines.append(f"‚ö´Ô∏è VoC: {voc_text}")
    return "\n".join(lines)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–º–æ—â–Ω–∏–∫–∏: hourly –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–≤–µ—Ç–µ—Ä/–¥–∞–≤–ª–µ–Ω–∏–µ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _pick(d: Dict[str, Any], *keys, default=None):
    for k in keys:
        if k in d:
            return d[k]
    return default

def _hourly_times(wm: Dict[str, Any]) -> List[pendulum.DateTime]:
    hourly = wm.get("hourly") or {}
    times = hourly.get("time") or hourly.get("time_local") or hourly.get("timestamp") or []
    out: List[pendulum.DateTime] = []
    for t in times:
        try:
            out.append(pendulum.parse(str(t)))
        except Exception:
            continue
    return out

def _nearest_index_for_day(times: List[pendulum.DateTime], date_obj: pendulum.Date, prefer_hour: int, tz: pendulum.Timezone) -> Optional[int]:
    if not times:
        return None
    target = pendulum.datetime(date_obj.year, date_obj.month, date_obj.day, prefer_hour, 0, tz=tz)
    best_i, best_dt, best_diff = None, None, None
    for i, dt in enumerate(times):
        # times —É–∂–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (–∫–∞–∫ –≤–µ—Ä–Ω—É–ª weather.get_weather), –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π:
        try:
            dt_local = dt.in_tz(tz)
        except Exception:
            dt_local = dt
        if dt_local.date() != date_obj:
            continue
        diff = abs((dt_local - target).total_seconds())
        if best_diff is None or diff < best_diff:
            best_i, best_dt, best_diff = i, dt_local, diff
    return best_i

def _circular_mean_deg(deg_list: List[float]) -> Optional[float]:
    if not deg_list:
        return None
    x = sum(math.cos(math.radians(d)) for d in deg_list)
    y = sum(math.sin(math.radians(d)) for d in deg_list)
    if x == 0 and y == 0:
        return None
    ang = math.degrees(math.atan2(y, x))
    return (ang + 360.0) % 360.0

def pick_tomorrow_header_metrics(wm: Dict[str, Any], tz: pendulum.Timezone) -> Tuple[Optional[float], Optional[int], Optional[int], str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      wind_ms (float|None), wind_dir_deg (int|None),
      pressure_hpa (int|None), pressure_trend ("‚Üë","‚Üì","‚Üí")
    –ë–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à–µ–µ –∫ 12:00; —Ç—Ä–µ–Ω–¥ ‚Äî –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ 06:00.
    """
    hourly = wm.get("hourly") or {}
    times = _hourly_times(wm)
    if not times:
        return None, None, None, "‚Üí"

    tomorrow = pendulum.now(tz).add(days=1).date()

    idx_noon = _nearest_index_for_day(times, tomorrow, prefer_hour=12, tz=tz)
    idx_morn = _nearest_index_for_day(times, tomorrow, prefer_hour=6, tz=tz)
    if idx_noon is None:
        # –≤–æ–∑—å–º—ë–º —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –¥–µ–Ω—å
        idxs = [i for i, t in enumerate(times) if t.in_tz(tz).date() == tomorrow]
        if not idxs:
            return None, None, None, "‚Üí"
        # –≤–µ—Ç–µ—Ä ‚Äî —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ, –¥–∞–≤–ª–µ–Ω–∏–µ ‚Äî –º–µ–¥–∏–∞–Ω–∞/—Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        spd_key = _pick(hourly, "windspeed_10m", "windspeed", default=[])
        dir_key = _pick(hourly, "winddirection_10m", "winddirection", default=[])
        prs_key = _pick(hourly, "surface_pressure", default=[])
        try:
            speeds = [float(spd_key[i]) for i in idxs if i < len(spd_key)]
        except Exception:
            speeds = []
        try:
            dirs = [float(dir_key[i]) for i in idxs if i < len(dir_key)]
        except Exception:
            dirs = []
        try:
            prs_vals = [float(prs_key[i]) for i in idxs if i < len(prs_key)]
        except Exception:
            prs_vals = []
        wind_ms = kmh_to_ms(sum(speeds)/len(speeds)) if speeds else None
        wind_dir = int(round(_circular_mean_deg(dirs))) if dirs and _circular_mean_deg(dirs) is not None else None
        press_val = int(round(sum(prs_vals)/len(prs_vals))) if prs_vals else None
        return wind_ms, wind_dir, press_val, "‚Üí"

    # —Ç–æ—á–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–æ–∫–æ–ª–æ 12:00 –∏ 06:00)
    spd_arr = _pick(hourly, "windspeed_10m", "windspeed", default=[])
    dir_arr = _pick(hourly, "winddirection_10m", "winddirection", default=[])
    prs_arr = hourly.get("surface_pressure", [])
    try:
        spd = float(spd_arr[idx_noon]) if idx_noon < len(spd_arr) else None
    except Exception:
        spd = None
    try:
        wdir = float(dir_arr[idx_noon]) if idx_noon < len(dir_arr) else None
    except Exception:
        wdir = None
    try:
        p_noon = float(prs_arr[idx_noon]) if idx_noon < len(prs_arr) else None
    except Exception:
        p_noon = None
    try:
        p_morn = float(prs_arr[idx_morn]) if (idx_morn is not None and idx_morn < len(prs_arr)) else None
    except Exception:
        p_morn = None

    wind_ms = kmh_to_ms(spd) if isinstance(spd, (int, float)) else None
    wind_dir = int(round(wdir)) if isinstance(wdir, (int, float)) else None

    trend = "‚Üí"
    if isinstance(p_noon, (int, float)) and isinstance(p_morn, (int, float)):
        diff = p_noon - p_morn
        if diff >= 0.3: trend = "‚Üë"
        elif diff <= -0.3: trend = "‚Üì"

    press_val = int(round(p_noon)) if isinstance(p_noon, (int, float)) else None
    return wind_ms, wind_dir, press_val, trend

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message(region_name: str,
                  sea_label: str, sea_cities,
                  other_label: str, other_cities,
                  tz: Union[pendulum.Timezone, str]) -> str:

    tz_obj = _as_tz(tz)
    tz_name = tz_obj.name

    P: List[str] = []
    today = pendulum.now(tz_obj).date()
    tom   = today.add(days=1)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ {region_name}: –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tom.format('DD.MM.YYYY')})</b>")

    # –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ ‚Äî –¥–µ–Ω—å/–Ω–æ—á—å, –≤–µ—Ç–µ—Ä, RH, –¥–∞–≤–ª–µ–Ω–∏–µ
    stats = day_night_stats(KLD_LAT, KLD_LON, tz=tz_name)
    wm    = get_weather(KLD_LAT, KLD_LON) or {}

    # –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –∫–æ–¥ –ø–æ–≥–æ–¥—ã –±–µ—Ä—ë–º –∏–∑ daily[1]
    wcarr = (wm.get("daily", {}) or {}).get("weathercode", [])
    wc    = wcarr[1] if isinstance(wcarr, list) and len(wcarr) > 1 else None

    # RH –∏ t –ø–æ –Ω–∞—à–∏–º helper‚Äô–∞–º
    rh_min = stats.get("rh_min"); rh_max = stats.get("rh_max")
    t_day_max = stats.get("t_day_max"); t_night_min = stats.get("t_night_min")

    # –í–µ—Ç–µ—Ä/–¥–∞–≤–ª–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–æ–≥–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏–∑ hourly (–æ–∫–æ–ª–æ 12:00)
    wind_ms, wind_dir_deg, press_val, press_trend = pick_tomorrow_header_metrics(wm, tz_obj)
    wind_part = (
        f"üí® {wind_ms:.1f} –º/—Å ({compass(wind_dir_deg)})" if isinstance(wind_ms, (int, float)) and wind_dir_deg is not None
        else (f"üí® {wind_ms:.1f} –º/—Å" if isinstance(wind_ms, (int, float)) else "üí® –Ω/–¥")
    )
    press_part = f"{press_val} –≥–ü–∞ {press_trend}" if isinstance(press_val, int) else "–Ω/–¥"

    desc = code_desc(wc)
    kal_parts = [
        f"üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å {t_day_max:.0f}/{t_night_min:.0f} ¬∞C" if (t_day_max is not None and t_night_min is not None)
        else "üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å –Ω/–¥",
        desc or None,
        wind_part,
        (f"üíß RH {rh_min:.0f}‚Äì{rh_max:.0f}%" if rh_min is not None and rh_max is not None else None),
        f"üîπ {press_part}",
    ]
    P.append(" ‚Ä¢ ".join([x for x in kal_parts if x]))
    P.append("‚Äî‚Äî‚Äî")

    # –ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ø-5)
    temps_sea: Dict[str, Tuple[float, float, int, float | None]] = {}
    for city, (la, lo) in sea_cities:
        tmax, tmin = fetch_tomorrow_temps(la, lo, tz=tz_name)
        if tmax is None:
            continue
        wcx = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wcx = wcx[1] if isinstance(wcx, list) and len(wcx) > 1 else 0
        temps_sea[city] = (tmax, tmin or tmax, wcx, get_sst(la, lo))
    if temps_sea:
        P.append(f"üéñÔ∏è <b>{sea_label}</b>")
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        for i, (city, (d, n, wcx, sst_c)) in enumerate(sorted(temps_sea.items(),
                                                              key=lambda kv: kv[1][0], reverse=True)[:5]):
            line = f"{medals[i]} {city}: {d:.1f}/{n:.1f}"
            descx = code_desc(wcx)
            if descx:
                line += f", {descx}"
            if sst_c is not None:
                line += f" üåä {sst_c:.1f}"
            P.append(line)
        P.append("‚Äî‚Äî‚Äî")

    # –¢—ë–ø–ª—ã–µ/—Ö–æ–ª–æ–¥–Ω—ã–µ
    temps_oth: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in other_cities:
        tmax, tmin = fetch_tomorrow_temps(la, lo, tz=tz_name)
        if tmax is None:
            continue
        wcx = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wcx = wcx[1] if isinstance(wcx, list) and len(wcx) > 1 else 0
        temps_oth[city] = (tmax, tmin or tmax, wcx)
    if temps_oth:
        P.append("üî• <b>–¢—ë–ø–ª—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0], reverse=True)[:3]:
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d:.1f}/{n:.1f}" + (f" {descx}" if descx else ""))
        P.append("‚ùÑÔ∏è <b>–•–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0])[:3]:
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d:.1f}/{n:.1f}" + (f" {descx}" if descx else ""))
        P.append("‚Äî‚Äî‚Äî")

    # Air + Safecast + –ø—ã–ª—å—Ü–∞ + —Ä–∞–¥–∏–∞—Ü–∏—è (–æ—Ñ–∏—Ü.)
    P.append("üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    air = get_air(KLD_LAT, KLD_LON) or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")

    # Safecast (–º—è–≥–∫–∞—è —à–∫–∞–ª–∞)
    P.extend(safecast_block_lines())

    # –¥—ã–º–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ –Ω–∏–∑–∫–æ–µ/–Ω/–¥
    em_sm, lbl_sm = smoke_index(air.get("pm25"), air.get("pm10"))
    if lbl_sm and str(lbl_sm).lower() not in ("–Ω–∏–∑–∫–æ–µ", "–Ω–∏–∑–∫–∏–π", "–Ω–µ—Ç", "–Ω/–¥"):
        P.append(f"üî• –ó–∞–¥—ã–º–ª–µ–Ω–∏–µ: {em_sm} {lbl_sm}")

    if (p := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {p['tree']} | –¢—Ä–∞–≤—ã: {p['grass']} | –°–æ—Ä–Ω—è–∫–∏: {p['weed']} ‚Äî —Ä–∏—Å–∫ {p['risk']}")

    # –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ä–∞–¥–∏–∞—Ü–∏—è (—Å—Ç—Ä–æ–≥–∞—è —à–∫–∞–ª–∞)
    if (rl := radiation_line(KLD_LAT, KLD_LON)):
        P.append(rl)
    P.append("‚Äî‚Äî‚Äî")

    # –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp (—Å–æ —Å–≤–µ–∂–µ—Å—Ç—å—é)
    kp_tuple = get_kp() or (None, "–Ω/–¥", None, "n/d")
    try:
        kp, ks, kp_ts, kp_src = kp_tuple
    except Exception:
        kp = kp_tuple[0] if isinstance(kp_tuple, (list, tuple)) and len(kp_tuple) > 0 else None
        ks = kp_tuple[1] if isinstance(kp_tuple, (list, tuple)) and len(kp_tuple) > 1 else "–Ω/–¥"
        kp_ts, kp_src = None, "n/d"

    age_txt = ""
    if isinstance(kp_ts, int) and kp_ts > 0:
        try:
            age_min = int((pendulum.now("UTC").int_timestamp - kp_ts) / 60)
            if age_min > 180:
                age_txt = f", üïì {age_min // 60}—á –Ω–∞–∑–∞–¥"
            elif age_min >= 0:
                age_txt = f", {age_min} –º–∏–Ω –Ω–∞–∑–∞–¥"
        except Exception:
            age_txt = ""

    if isinstance(kp, (int, float)):
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({ks}{age_txt})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    # –°–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä (Bz/Bt/v/n)
    sw = get_solar_wind() or {}
    bz = sw.get("bz"); bt = sw.get("bt"); v = sw.get("speed_kms"); n = sw.get("density")
    wind_status = sw.get("status", "–Ω/–¥")
    parts = []
    if isinstance(bz, (int, float)): parts.append(f"Bz {bz:.1f} nT")
    if isinstance(bt, (int, float)): parts.append(f"Bt {bt:.1f} nT")
    if isinstance(v,  (int, float)): parts.append(f"v {v:.0f} –∫–º/—Å")
    if isinstance(n,  (int, float)): parts.append(f"n {n:.1f} —Å–º‚Åª¬≥")
    if parts:
        P.append("üå¨Ô∏è –°–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä: " + ", ".join(parts) + f" ‚Äî {wind_status}")
    try:
        if (isinstance(kp, (int, float)) and kp >= 5) and isinstance(wind_status, str) and ("—Å–ø–æ–∫–æ–π" in wind_status.lower()):
            P.append("‚ÑπÔ∏è –ü–æ –≤–µ—Ç—Ä—É —Å–µ–π—á–∞—Å —Å–ø–æ–∫–æ–π–Ω–æ; Kp ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞ 3 —á.")
    except Exception:
        pass

    # –®—É–º–∞–Ω
    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (LLM+VoC –∏–∑ lunar_calendar.json) ‚Äî –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ Asia/Nicosia
    tz_nic = pendulum.timezone("Asia/Nicosia")
    date_for_astro = pendulum.today(tz_nic).add(days=1)
    P.append(build_astro_section(date_local=date_for_astro, tz_local="Asia/Nicosia"))
    P.append("‚Äî‚Äî‚Äî")

    # –í—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã
    culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if isinstance(kp, (int, float)) and ks and ks.lower() == "–±—É—Ä—è" else "–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"
    P.append("üìú <b>–í—ã–≤–æ–¥</b>")
    P.append(f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    try:
        _, tips = gpt_blurb(culprit)
        for t in tips[:3]:
            t = t.strip()
            if t:
                P.append(t)
    except Exception:
        P.append("‚Äî –±–æ–ª—å—à–µ –≤–æ–¥—ã, –º–µ–Ω—å—à–µ —Å—Ç—Ä–µ—Å—Å–∞, –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–æ–Ω")

    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(tom, region_name)}")
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_common_post(bot: Bot, chat_id: int, region_name: str,
                           sea_label: str, sea_cities, other_label: str,
                           other_cities, tz: Union[pendulum.Timezone, str]):
    msg = build_message(region_name, sea_label, sea_cities, other_label, other_cities, tz)
    await bot.send_message(
        chat_id=chat_id,
        text=msg,
        parse_mode=constants.ParseMode.HTML,
        disable_web_page_preview=True
    )

async def main_common(bot: Bot, chat_id: int, region_name: str,
                      sea_label: str, sea_cities, other_label: str,
                      other_cities, tz: Union[pendulum.Timezone, str]):
    await send_common_post(bot, chat_id, region_name, sea_label, sea_cities, other_label, other_cities, tz)
