#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_common.py ‚Äî VayboMeter (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥).

‚Ä¢ –ú–æ—Ä–µ, –ø—Ä–æ–≥–Ω–æ–∑ –ö—ë–Ω–∏–≥–∞ (–¥–µ–Ω—å/–Ω–æ—á—å, –º/—Å, RH min‚Äìmax, –¥–∞–≤–ª–µ–Ω–∏–µ)
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –≥–æ—Ä–æ–¥–æ–≤ (d/n, –∫–æ–¥ –ø–æ–≥–æ–¥—ã —Å–ª–æ–≤–∞–º–∏ + üåä)
‚Ä¢ Air (IQAir/–≤–∞—à –∏—Å—Ç–æ—á–Ω–∏–∫) + Safecast (PM –∏ CPM), –ø—ã–ª—å—Ü–∞, —Ä–∞–¥–∏–∞—Ü–∏—è
‚Ä¢ Kp, –®—É–º–∞–Ω (—Å —Ñ–æ–ª–ª–±—ç–∫–æ–º —á—Ç–µ–Ω–∏—è JSON; h7_amp/h7_spike)
‚Ä¢ –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (–∑–Ω–∞–∫ –∫–∞–∫ ‚ôà ‚Ä¶ ‚ôì; VoC > 5 –º–∏–Ω)
‚Ä¢ ¬´–í–∏–Ω–∏—Ç–µ ‚Ä¶¬ª, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ñ–∞–∫—Ç –¥–Ω—è
"""

from __future__ import annotations
import os
import re
import json
import math
import asyncio
import logging
from pathlib import Path
from typing import Any, Dict, List, Tuple, Optional

import pendulum
from telegram import Bot, constants

from utils       import compass, get_fact, AIR_EMOJI, pm_color, kp_emoji, kmh_to_ms, smoke_index
from weather     import get_weather, fetch_tomorrow_temps, day_night_stats
from air         import get_air, get_sst, get_kp
from pollen      import get_pollen
from radiation   import get_radiation
from astro       import astro_events
from gpt         import gpt_blurb
from settings_klg import SEA_SST_COORD  # not used directly, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –∏–º–ø–æ—Ä—Ç

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
KLD_LAT, KLD_LON = 54.710426, 20.452214

# –ú—ç–ø–ø–∏–Ω–≥ WMO-–∫–æ–¥–æ–≤ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç+—ç–º–æ–¥–∑–∏
WMO_DESC = {
    0:"‚òÄÔ∏è —è—Å–Ω–æ", 1:"‚õÖ —á.–æ–±–ª", 2:"‚òÅÔ∏è –æ–±–ª", 3:"üå• –ø–∞—Å–º",
    45:"üå´ —Ç—É–º–∞–Ω", 48:"üå´ –∏–∑–º–æ—Ä–æ–∑—å", 51:"üå¶ –º–æ—Ä–æ—Å—å",
    61:"üåß –¥–æ–∂–¥—å", 71:"‚ùÑÔ∏è —Å–Ω–µ–≥", 95:"‚õà –≥—Ä–æ–∑–∞",
}
def code_desc(c: Any) -> str | None:
    return WMO_DESC.get(int(c)) if isinstance(c, (int, float)) and int(c) in WMO_DESC else None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®—É–º–∞–Ω: —á—Ç–µ–Ω–∏–µ JSON-–∏—Å—Ç–æ—Ä–∏–∏ (–æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _read_schumann_history() -> List[Dict[str, Any]]:
    candidates: List[Path] = []
    env_path = os.getenv("SCHU_FILE")
    if env_path:
        candidates.append(Path(env_path))
    here = Path(__file__).parent
    candidates += [here / "schumann_hourly.json", here.parent / "schumann_hourly.json"]

    for p in candidates:
        try:
            if p.exists():
                txt = p.read_text("utf-8").strip()
                data = json.loads(txt) if txt else []
                if isinstance(data, list):
                    return data
        except Exception as e:
            logging.warning("Schumann history read error from %s: %s", p, e)
    return []

def _schumann_trend(values: List[float], delta: float = 0.1) -> str:
    if not values:
        return "‚Üí"
    tail = values[-24:] if len(values) > 24 else values
    if len(tail) < 2:
        return "‚Üí"
    avg_prev = sum(tail[:-1]) / (len(tail) - 1)
    d = tail[-1] - avg_prev
    return "‚Üë" if d >= delta else "‚Üì" if d <= -delta else "‚Üí"

def get_schumann_with_fallback() -> Dict[str, Any]:
    arr = _read_schumann_history()
    if not arr:
        return {"freq": None, "amp": None, "trend": "‚Üí", "h7_amp": None, "h7_spike": None, "cached": True}

    amps: List[float] = []
    last: Optional[Dict[str, Any]] = None
    for rec in arr:
        if not isinstance(rec, dict):
            continue
        if "freq" in rec and ("amp" in rec or "h7_amp" in rec):
            if isinstance(rec.get("amp"), (int, float)):
                amps.append(float(rec["amp"]))
            last = rec
        elif "amp" in rec:
            try:
                amps.append(float(rec["amp"]))
            except Exception:
                pass
            last = rec

    trend = _schumann_trend(amps)
    if last is None:
        return {"freq": None, "amp": None, "trend": trend, "h7_amp": None, "h7_spike": None, "cached": True}

    freq = last.get("freq", 7.83) if isinstance(last.get("freq"), (int, float)) else 7.83
    amp = last.get("amp") if isinstance(last.get("amp"), (int, float)) else None
    h7_amp = last.get("h7_amp") if isinstance(last.get("h7_amp"), (int, float)) else None
    h7_spike = last.get("h7_spike") if isinstance(last.get("h7_spike"), bool) else None
    src = (last.get("src") or "").lower()
    cached = (src == "cache")
    return {"freq": freq, "amp": amp, "trend": trend, "h7_amp": h7_amp, "h7_spike": h7_spike, "cached": cached}

def schumann_line(s: Dict[str, Any]) -> str:
    if s.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f = s["freq"]; amp = s.get("amp"); trend = s.get("trend", "‚Üí")
    h7_amp = s.get("h7_amp"); h7_spike = s.get("h7_spike")
    e = "üî¥" if f < 7.6 else "üü£" if f > 8.1 else "üü¢"
    base = f"{e} –®—É–º–∞–Ω: {float(f):.2f} –ì—Ü"
    if isinstance(amp, (int, float)): base += f" / {float(amp):.2f} pT {trend}"
    else: base += f" / –Ω/–¥ {trend}"
    if isinstance(h7_amp, (int, float)):
        base += f" ¬∑ H7 {h7_amp:.2f}"
        if isinstance(h7_spike, bool) and h7_spike: base += " ‚ö°"
    return base

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Safecast ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _read_json(path: Path) -> Optional[Dict[str, Any]]:
    try:
        if not path.exists(): return None
        data = json.loads(path.read_text("utf-8"))
        return data if isinstance(data, dict) else None
    except Exception as e:
        logging.warning("Safecast read error from %s: %s", path, e)
        return None

def load_safecast() -> Optional[Dict[str, Any]]:
    """
    –ò—â–µ–º JSON:
      1) env SAFECAST_FILE
      2) ./data/safecast_kaliningrad.json
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ—Ç/—É—Å—Ç–∞—Ä–µ–ª–æ.
    """
    paths: List[Path] = []
    if os.getenv("SAFECAST_FILE"): paths.append(Path(os.getenv("SAFECAST_FILE")))
    here = Path(__file__).parent
    paths.append(here / "data" / "safecast_kaliningrad.json")

    sc: Optional[Dict[str, Any]] = None
    for p in paths:
        sc = _read_json(p)
        if sc: break
    if not sc: return None

    # staleness: —Å—á–∏—Ç–∞–µ–º —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
    ts = sc.get("ts")
    if not isinstance(ts, (int, float)): return None
    now_ts = pendulum.now("UTC").int_timestamp
    if now_ts - int(ts) > 24*3600:  # —É—Å—Ç–∞—Ä–µ–ª–æ
        return None
    return sc

def safecast_pm_level(pm25: Optional[float], pm10: Optional[float]) -> Tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (emoji, label) –ø–æ —Ö—É–¥—à–µ–º—É –∏–∑ PM‚ÇÇ.‚ÇÖ/PM‚ÇÅ‚ÇÄ.
    –ü–æ—Ä–æ–≥–∏ ‚Äî —É—Å—Ä–µ–¥–Ω—ë–Ω–Ω—ã–µ: PM2.5 [0-15/15-35/35-55/55+], PM10 [0-30/30-50/50-100/100+]
    """
    def level_pm25(x: float) -> int:
        if x <= 15: return 0
        if x <= 35: return 1
        if x <= 55: return 2
        return 3
    def level_pm10(x: float) -> int:
        if x <= 30: return 0
        if x <= 50: return 1
        if x <= 100: return 2
        return 3

    worst = -1
    if isinstance(pm25, (int, float)): worst = max(worst, level_pm25(float(pm25)))
    if isinstance(pm10, (int, float)): worst = max(worst, level_pm10(float(pm10)))
    if worst < 0: return "‚ö™", "–Ω/–¥"
    return (["üü¢","üü°","üü†","üî¥"][worst],
            ["–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"][worst])

def safecast_block_lines() -> List[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ SafeCast –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞¬ª.
    –ù–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ([]) –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç/—É—Å—Ç–∞—Ä–µ–ª–∏.
    """
    sc = load_safecast()
    if not sc: return []

    pm25 = sc.get("pm25"); pm10 = sc.get("pm10")
    lines: List[str] = []
    if isinstance(pm25, (int, float)) or isinstance(pm10, (int, float)):
        em, lbl = safecast_pm_level(pm25, pm10)
        parts = []
        if isinstance(pm25, (int, float)): parts.append(f"PM‚ÇÇ.‚ÇÖ {pm25:.0f}")
        if isinstance(pm10, (int, float)): parts.append(f"PM‚ÇÅ‚ÇÄ {pm10:.0f}")
        lines.append(f"üß™ Safecast: {em} {lbl} ¬∑ " + " | ".join(parts))

    # –û—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π CPM (–µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª)
    if isinstance(sc.get("cpm"), (int, float)):
        lines.append(f"üìü CPM: {sc['cpm']:.0f} (–º–µ–¥–∏–∞–Ω–∞ 6 —á)")

    return lines

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∞–¥–∏–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _read_local_radiation_usvh() -> Optional[Tuple[float, str]]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å ¬´–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ¬ª –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (ŒºSv/h):
      ‚Ä¢ ENV RADIATION_FILE  (–æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫)
      ‚Ä¢ data/radiation.json
      ‚Ä¢ radiation_hourly.json (—Å–ø–∏—Å–æ–∫, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é)
    –°—á–∏—Ç–∞–µ–º —Å–≤–µ–∂–∏–º ‚â§ 12—á.
    """
    now_ts = pendulum.now("UTC").int_timestamp
    cand: List[Path] = []
    if os.getenv("RADIATION_FILE"):
        cand.append(Path(os.getenv("RADIATION_FILE")))
    here = Path(__file__).parent
    cand += [here / "data" / "radiation.json",
             here / "radiation.json",
             here / "radiation_hourly.json"]

    for p in cand:
        try:
            if not p.exists():
                continue
            txt = p.read_text("utf-8").strip()
            if not txt:
                continue
            data = json.loads(txt)
        except Exception:
            continue

        # —Ñ–æ—Ä–º–∞—Ç: –æ–±—ä–µ–∫—Ç
        if isinstance(data, dict):
            ts = data.get("ts")
            val = data.get("usvh") or data.get("dose")
            if isinstance(val, (int, float)) and (not isinstance(ts, (int, float)) or now_ts - int(ts) <= 12*3600):
                return float(val), "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ"

        # —Ñ–æ—Ä–º–∞—Ç: —Å–ø–∏—Å–æ–∫
        if isinstance(data, list):
            for rec in reversed(data):
                if not isinstance(rec, dict):
                    continue
                ts = rec.get("ts")
                val = rec.get("usvh") or rec.get("dose")
                if isinstance(val, (int, float)) and (not isinstance(ts, (int, float)) or now_ts - int(ts) <= 12*3600):
                    return float(val), "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ"

    return None

def _format_radiation_line(usvh: float, src_label: str = "") -> str:
    if usvh <= 0.15:  emoji, lvl = "üü¢", "–Ω–∏–∑–∫–∏–π"
    elif usvh <= 0.30: emoji, lvl = "üü°", "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π"
    else:              emoji, lvl = "üî¥", "–≤—ã—Å–æ–∫–∏–π"
    suffix = f" ({src_label}, {lvl})" if src_label else f" ({lvl})"
    return f"{emoji} –†–∞–¥–∏–∞—Ü–∏—è: {usvh:.3f} ŒºSv/h{suffix}"

def radiation_line(lat: float, lon: float) -> str | None:
    """
    1) –ü—Ä–æ–±—É–µ–º ¬´–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ¬ª (–ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã / –º–æ–¥—É–ª—å get_radiation)
    2) –§–æ–ª–ª–±—ç–∫ ‚Äî SafeCast:
       ‚Ä¢ –µ—Å–ª–∏ –µ—Å—Ç—å radiation_usvh ‚Äî –±–µ—Ä—ë–º –µ—ë;
       ‚Ä¢ –∏–Ω–∞—á–µ, –µ—Å–ª–∏ –µ—Å—Ç—å cpm ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: ŒºSv/h = cpm * CPM_TO_USVH
         (ENV CPM_TO_USVH, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.000571).
    """
    # 1) –ª–æ–∫–∞–ª—å–Ω—ã–µ ¬´–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ¬ª
    lr = _read_local_radiation_usvh()
    if lr:
        return _format_radiation_line(lr[0], lr[1])

    # 1b) –æ–Ω–ª–∞–π–Ω ¬´–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ¬ª
    try:
        rd = get_radiation(lat, lon) or {}
        if isinstance(rd.get("dose"), (int, float)):
            return _format_radiation_line(float(rd["dose"]), "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ")
    except Exception:
        pass

    # 2) Safecast
    sc = load_safecast()
    if not sc:
        return None

    # –ø—Ä—è–º–∞—è ŒºSv/h –∏–∑ Safecast (–µ—Å–ª–∏ collector –ø–æ–ª–æ–∂–∏–ª 'radiation_usvh')
    if isinstance(sc.get("radiation_usvh"), (int, float)):
        return _format_radiation_line(float(sc["radiation_usvh"]), "Safecast")

    # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ CPM ‚Üí ŒºSv/h
    if isinstance(sc.get("cpm"), (int, float)):
        coeff = float(os.getenv("CPM_TO_USVH", "0.000571"))
        usvh = float(sc["cpm"]) * coeff
        return _format_radiation_line(usvh, "Safecast (–∏–∑ CPM)")

    # –≤–¥—Ä—É–≥ –≤ Safecast –ø—Ä–∏—à–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–∏—Ü–µ–π ŒºSv/h –Ω–∞–ø—Ä—è–º—É—é
    unit = (sc.get("unit") or "").lower()
    val  = sc.get("value")
    if isinstance(val, (int, float)) and ("usv/h" in unit or "¬µsv/h" in unit or "Œºsv/h" in unit):
        return _format_radiation_line(float(val), "Safecast")

    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–∞–≤–ª–µ–Ω–∏–µ: –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ (—á—É–≤—Å—Ç–≤–∏—Ç. 0.3 –≥–ü–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def local_pressure_and_trend(wm: Dict[str, Any], threshold_hpa: float = 0.3) -> Tuple[Optional[int], str]:
    cur_p = (wm.get("current") or {}).get("pressure")
    if not isinstance(cur_p, (int, float)):
        hp = (wm.get("hourly", {}) or {}).get("surface_pressure", [])
        if isinstance(hp, list) and hp:
            cur_p = hp[-1]; prev = hp[-2] if len(hp) > 1 else None
        else:
            prev = None
    else:
        hp = (wm.get("hourly", {}) or {}).get("surface_pressure", [])
        prev = hp[-1] if isinstance(hp, list) and hp else None

    arrow = "‚Üí"
    if isinstance(cur_p, (int, float)) and isinstance(prev, (int, float)):
        diff = float(cur_p) - float(prev)
        if diff >= threshold_hpa: arrow = "‚Üë"
        elif diff <= -threshold_hpa: arrow = "‚Üì"

    return (int(round(cur_p)) if isinstance(cur_p, (int, float)) else None, arrow)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–æ–¥–∏–∞–∫–∏ ‚Üí —Å–∏–º–≤–æ–ª—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ZODIAC = {
    "–û–≤–µ–Ω":"‚ôà","–¢–µ–ª–µ—Ü":"‚ôâ","–ë–ª–∏–∑–Ω–µ—Ü—ã":"‚ôä","–†–∞–∫":"‚ôã","–õ–µ–≤":"‚ôå",
    ", –î–µ–≤–∞":"‚ôç","–í–µ—Å—ã":"‚ôé",", –°–∫–æ—Ä–ø–∏–æ–Ω":"‚ôè","–°—Ç—Ä–µ–ª–µ—Ü":"‚ôê",
    "–ö–æ–∑–µ—Ä–æ–≥":"‚ôë","–í–æ–¥–æ–ª–µ–π":"‚ôí","–†—ã–±—ã":"‚ôì",
}
def zsym(s: str) -> str:
    for name, sym in ZODIAC.items():
        s = s.replace(name, sym)
    return s

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message(region_name: str,
                  sea_label: str, sea_cities,
                  other_label: str, other_cities,
                  tz: pendulum.Timezone) -> str:

    P: List[str] = []
    today = pendulum.now(tz).date()
    tom   = today.add(days=1)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ {region_name}: –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tom.format('DD.MM.YYYY')})</b>")

    # –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ ‚Äî –¥–µ–Ω—å/–Ω–æ—á—å, –≤–µ—Ç–µ—Ä, RH, –¥–∞–≤–ª–µ–Ω–∏–µ
    stats = day_night_stats(KLD_LAT, KLD_LON, tz=tz.name)
    wm    = get_weather(KLD_LAT, KLD_LON) or {}
    cur   = wm.get("current", {}) or {}
    wcarr = (wm.get("daily", {}) or {}).get("weathercode", [])
    wc    = wcarr[1] if isinstance(wcarr, list) and len(wcarr) > 1 else cur.get("weathercode")
    wind_ms = kmh_to_ms(cur.get("windspeed"))
    rh_min = stats.get("rh_min"); rh_max = stats.get("rh_max")
    t_day_max = stats.get("t_day_max"); t_night_min = stats.get("t_night_min")

    p_val, p_trend = local_pressure_and_trend(wm, threshold_hpa=0.3)
    press_part = f"{p_val} –≥–ü–∞ {p_trend}" if isinstance(p_val, int) else "–Ω/–¥"

    desc = code_desc(wc)
    kal_parts = [
        f"üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å {t_day_max:.0f}/{t_night_min:.0f} ¬∞C" if (t_day_max is not None and t_night_min is not None)
        else "üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å –Ω/–¥",
        desc or None,
        f"üí® {wind_ms:.1f} –º/—Å ({compass(cur.get('winddirection', 0))})" if wind_ms is not None else f"üí® –Ω/–¥ ({compass(cur.get('winddirection', 0))})",
        (f"üíß RH {rh_min:.0f}‚Äì{rh_max:.0f}%" if rh_min is not None and rh_max is not None else None),
        f"üîπ {press_part}",
    ]
    P.append(" ‚Ä¢ ".join([x for x in kal_parts if x]))
    P.append("‚Äî‚Äî‚Äî")

    # –ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ø-5)
    temps_sea: Dict[str, Tuple[float, float, int, float | None]] = {}
    for city, (la, lo) in sea_cities:
        tmax, tmin = fetch_tomorrow_temps(la, lo, tz=tz.name)
        if tmax is None:
            continue
        wcx = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wcx = wcx[1] if isinstance(wcx, list) and len(wcx) > 1 else 0
        temps_sea[city] = (tmax, tmin or tmax, wcx, get_sst(la, lo))
    if temps_sea:
        P.append(f"üéñÔ∏è <b>{sea_label}</b>")
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        for i, (city, (d, n, wcx, sst_c)) in enumerate(sorted(temps_sea.items(),
                                                              key=lambda kv: kv[1][0], reverse=True)[:5]):
            line = f"{medals[i]} {city}: {d:.1f}/{n:.1f}"
            descx = code_desc(wcx)
            if descx:
                line += f", {descx}"
            if sst_c is not None:
                line += f" üåä {sst_c:.1f}"
            P.append(line)
        P.append("‚Äî‚Äî‚Äî")

    # –¢—ë–ø–ª—ã–µ/—Ö–æ–ª–æ–¥–Ω—ã–µ
    temps_oth: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in other_cities:
        tmax, tmin = fetch_tomorrow_temps(la, lo, tz=tz.name)
        if tmax is None:
            continue
        wcx = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wcx = wcx[1] if isinstance(wcx, list) and len(wcx) > 1 else 0
        temps_oth[city] = (tmax, tmin or tmax, wcx)
    if temps_oth:
        P.append("üî• <b>–¢—ë–ø–ª—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0], reverse=True)[:3]:
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d:.1f}/{n:.1f}" + (f" {descx}" if descx else ""))
        P.append("‚ùÑÔ∏è <b>–•–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0])[:3]:
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d:.1f}/{n:.1f}" + (f" {descx}" if descx else ""))
        P.append("‚Äî‚Äî‚Äî")

    # Air + –ø—ã–ª—å—Ü–∞ + —Ä–∞–¥–∏–∞—Ü–∏—è + Safecast
    P.append("üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    air = get_air(KLD_LAT, KLD_LON) or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | "
             f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")

    # Safecast (–µ—Å–ª–∏ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –ø–æ ¬´–≤–∞—Ä–∏–∞–Ω—Ç—É A¬ª)
    P.extend(safecast_block_lines())

    # –¥—ã–º–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å
    em, lbl = smoke_index(air.get("pm25"), air.get("pm10"))
    if lbl != "–Ω–∏–∑–∫–æ–µ":
        P.append(f"üî• –ó–∞–¥—ã–º–ª–µ–Ω–∏–µ: {em} {lbl}")

    if (p := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {p['tree']} | –¢—Ä–∞–≤—ã: {p['grass']} | –°–æ—Ä–Ω—è–∫–∏: {p['weed']} ‚Äî —Ä–∏—Å–∫ {p['risk']}")

    if (rl := radiation_line(KLD_LAT, KLD_LON)):
        P.append(rl)
    P.append("‚Äî‚Äî‚Äî")

    # Kp + –®—É–º–∞–Ω
    kp, ks = get_kp()
    P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({ks})" if kp is not None else "üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")
    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (—Å–∫—Ä—ã–≤–∞–µ–º VoC <= 5 –º–∏–Ω—É—Ç)
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    astro = astro_events(offset_days=1, show_all_voc=True)
    filtered: List[str] = []
    for line in (astro or []):
        m = re.search(r"(VoC|VOC|–õ—É–Ω–∞.*–±–µ–∑ –∫—É—Ä—Å–∞).*?(\d+)\s*–º–∏–Ω", line, re.IGNORECASE)
        if m:
            mins = int(m.group(2))
            if mins <= 5:
                continue
        filtered.append(line)
    if filtered:
        P.extend([zsym(line) for line in filtered])
    else:
        P.append("‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî")
    P.append("‚Äî‚Äî‚Äî")

    # –í—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã
    culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if kp is not None and ks and ks.lower() == "–±—É—Ä—è" else "–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"
    P.append("üìú <b>–í—ã–≤–æ–¥</b>")
    P.append(f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    try:
        _, tips = gpt_blurb(culprit)
        for t in tips[:3]:
            t = t.strip()
            if t:
                P.append(t)
    except Exception:
        P.append("‚Äî –±–æ–ª—å—à–µ –≤–æ–¥—ã, –º–µ–Ω—å—à–µ —Å—Ç—Ä–µ—Å—Å–∞, –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–æ–Ω")

    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(tom, region_name)}")
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_common_post(bot: Bot, chat_id: int, region_name: str,
                           sea_label: str, sea_cities, other_label: str,
                           other_cities, tz):
    msg = build_message(region_name, sea_label, sea_cities, other_label, other_cities, tz)
    await bot.send_message(chat_id=chat_id, text=msg,
                           parse_mode=constants.ParseMode.HTML,
                           disable_web_page_preview=True)

async def main_common(bot: Bot, chat_id: int, region_name: str,
                      sea_label: str, sea_cities, other_label: str,
                      other_cities, tz):
    await send_common_post(bot, chat_id, region_name, sea_label,
                           sea_cities, other_cities, tz)