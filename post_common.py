#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_common.py ‚Äî VayboMeter (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥).

–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:
‚Ä¢ –†–µ–∂–∏–º "morning" ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –º–∞–∫–µ—Ç –∫–∞–∫ –≤ –ö–∏–ø—Ä–µ (–∑–∞–∫–∞—Ç, AQI, –∫–æ—Å–º–æ–ø–æ–≥–æ–¥–∞, –∏—Ç–æ–≥–∏, —Å–æ–≤–µ—Ç—ã).
‚Ä¢ Kp –∫–∞–∫ –≤ –ö–∏–ø—Ä–µ/–º–∏—Ä–æ–≤–æ–º: –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫—Ä—ã—Ç—ã–π 3-—á–∞—Å–æ–≤–æ–π –±–∞—Ä SWPC (Estimated Kp),
  —Ñ–æ—Ä–º–∞—Ç ¬´–ö—Ä 3.0 (—É–º–µ—Ä–µ–Ω–Ω–æ, üïì 5—á –Ω–∞–∑–∞–¥)¬ª. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö >9—á ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω/–¥.
‚Ä¢ –£–§: –±–µ—Ä—ë–º daily uv_index_max –æ—Ç Open-Meteo (–∏–ª–∏ –ø–æ—á–∞—Å–æ–≤–æ–π –º–∞–∫—Å–∏–º—É–º), —Å—Ç—Ä–æ–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ UVI ‚â• 3.
‚Ä¢ –ö—É—Ä—Å—ã —Å –∂—ë—Å—Ç–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º —Ä—É–±–ª—è \u20BD.
‚Ä¢ –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —Ç—Ä–∏ –ø—É–Ω–∫—Ç–∞ —á–µ—Ä–µ–∑ ¬´; ¬ª.
‚Ä¢ Safecast: –ø–µ—á–∞—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ (–Ω–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–æ–¥–∏–º).
‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ –≤ —à–∞–ø–∫–µ: ¬´üîπ {value} –≥–ü–∞ {—Å—Ç—Ä–µ–ª–∫–∞}¬ª.

ENV-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏:
  POST_MODE      ‚àà {"morning","evening"} (–∫–æ—Å–º–µ—Ç–∏–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞/–º–∞–∫–µ—Ç–∞)
  DAY_OFFSET     ‚àà {"0","1",...}   ‚Äî —Ü–µ–ª–µ–≤–æ–π –¥–µ–Ω—å (0=—Å–µ–≥–æ–¥–Ω—è, 1=–∑–∞–≤—Ç—Ä–∞)
  ASTRO_OFFSET   ‚àà {"0","1",...}   ‚Äî –¥–ª—è –∞—Å—Ç—Ä–æ–±–ª–æ–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = DAY_OFFSET)
  SHOW_AIR       ‚àà {"0","1"}       ‚Äî –ø–µ—á–∞—Ç–∞—Ç—å –≤–æ–∑–¥—É—Ö/–ø—ã–ª—å—Ü—É/–æ—Ñ–∏—Ü.—Ä–∞–¥–∏–∞—Ü–∏—é
  SHOW_SPACE     ‚àà {"0","1"}       ‚Äî –ø–µ—á–∞—Ç–∞—Ç—å –∫–æ—Å–º–æ–ø–æ–≥–æ–¥—É
  SHOW_SCHUMANN  ‚àà {"0","1"}       ‚Äî –ø–µ—á–∞—Ç–∞—Ç—å –®—É–º–∞–Ω–∞ (–Ω–µ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —É—Ç—Ä–µ)

–í –ø—Ä–æ–µ–∫—Ç–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –º–æ–¥—É–ª–∏:
  utils, weather, air, pollen, radiation, gpt (+ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ schumann, fx)
"""

from __future__ import annotations

import os
import re
import json
import html
import asyncio
import logging
import math
from pathlib import Path
from typing import Any, Dict, List, Tuple, Optional, Union

import pendulum
from telegram import Bot, constants

# utils / –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
from utils        import compass, get_fact, AIR_EMOJI, pm_color, kmh_to_ms, smoke_index
from weather      import get_weather
from air          import get_air, get_sst, get_kp, get_solar_wind
from pollen       import get_pollen
from radiation    import get_radiation
from gpt          import gpt_blurb, gpt_complete  # –º–∏–∫—Ä–æ-LLM (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏/–∞—Å—Ç—Ä–æ)

# (–æ–ø—Ü.) HTTP –¥–ª—è marine (–≤–æ–ª–Ω–∞)
try:
    import requests  # type: ignore
except Exception:
    requests = None  # type: ignore

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ENV flags ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _env_on(name: str, default: bool) -> bool:
    val = os.getenv(name)
    if val is None:
        return default
    return str(val).strip().lower() in ("1", "true", "yes", "on")

POST_MODE    = (os.getenv("POST_MODE") or "").strip().lower()  # morning/evening
DAY_OFFSET   = int(os.getenv("DAY_OFFSET", "1" if POST_MODE == "evening" else "0") or 0)
ASTRO_OFFSET = int(os.getenv("ASTRO_OFFSET", str(DAY_OFFSET)) or DAY_OFFSET)

SHOW_AIR      = _env_on("SHOW_AIR", True if POST_MODE != "evening" else False)
SHOW_SPACE    = _env_on("SHOW_SPACE", True if POST_MODE != "evening" else False)
SHOW_SCHUMANN = _env_on("SHOW_SCHUMANN", True if POST_MODE != "evening" else False)

DEBUG_WATER = _env_on("DEBUG_WATER", False)
DISABLE_SCHUMANN = (os.getenv("DISABLE_SCHUMANN", "").strip().lower() in ("1","true","yes","on")) or (not SHOW_SCHUMANN)

NBSP = "\u00A0"
RUBLE = "\u20BD"  # –∂—ë—Å—Ç–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª —Ä—É–±–ª—è

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
KLD_LAT, KLD_LON = 54.710426, 20.452214
CPM_TO_USVH = float(os.getenv("CPM_TO_USVH", "0.000571"))

CACHE_DIR = Path(".cache"); CACHE_DIR.mkdir(exist_ok=True, parents=True)
USE_DAILY_LLM = os.getenv("DISABLE_LLM_DAILY", "").strip().lower() not in ("1", "true", "yes", "on")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LLM safety ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DISABLE_LLM_TIPS = os.getenv("DISABLE_LLM_TIPS", "").strip().lower() in ("1", "true", "yes", "on")
ASTRO_LLM_TEMP = float(os.getenv("ASTRO_LLM_TEMP", "0.2"))

SAFE_TIPS_FALLBACKS = {
    "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å": [
        "–≤–æ–¥–∞ –∏ –∑–∞–≤—Ç—Ä–∞–∫", "20-–º–∏–Ω –ø—Ä–æ–≥—É–ª–∫–∞ –¥–æ –ø–æ–ª—É–¥–Ω—è", "–∫–æ—Ä–æ—Ç–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –≤–µ—á–µ—Ä–æ–º"
    ],
    "–ø–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞": [
        "—Ç—ë–ø–ª—ã–µ —Å–ª–æ–∏ –∏ –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –∫—É—Ä—Ç–∫–∞", "–¥–µ–ª–∞ –ø–æ–¥ –∫—Ä—ã—à—É", "–∑–∞–ª–æ–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Ä–æ–≥—É"
    ],
    "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏": [
        "—É–º–µ–Ω—å—à–∏—Ç–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏", "–±–æ–ª—å—à–µ –≤–æ–¥—ã –∏ –º–∞–≥–Ω–∏–π", "—Ä–∞–Ω–Ω–∏–π —Å–æ–Ω –∏ –º–µ–Ω—å—à–µ —ç–∫—Ä–∞–Ω–æ–≤"
    ],
    "–ø–ª–æ—Ö–æ–π –≤–æ–∑–¥—É—Ö": [
        "—Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ", "–ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏"
    ],
    "–≤–æ–ª–Ω—ã –®—É–º–∞–Ω–∞": [
        "—Å–ø–æ–∫–æ–π–Ω—ã–π —Ç–µ–º–ø –¥–Ω—è", "–ª—ë–≥–∫–∞—è –µ–¥–∞/—Ç—ë–ø–ª—ã–π —á–∞–π", "—Ä–∞–Ω–Ω–∏–π —Å–æ–Ω"
    ],
}

def _escape_html(s: str) -> str:
    return html.escape(str(s), quote=False)

def _sanitize_line(s: str, max_len: int = 140) -> str:
    s = " ".join(str(s).split())
    s = re.sub(r"(.)\1{3,}", r"\1\1\1", s)
    s = s[:max_len-1] + "‚Ä¶" if len(s) > max_len else s
    return _escape_html(s).strip()

def _looks_gibberish(s: str) -> bool:
    if re.search(r"(.)\1{5,}", s):  # ¬´—â—â—â—â—â‚Ä¶¬ª
        return True
    letters = re.findall(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]", s)
    return (len(set(letters)) <= 2 and len("".join(letters)) >= 10)

def safe_tips(theme: str) -> list[str]:
    k = (theme or "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å").strip().lower()
    if DISABLE_LLM_TIPS:
        return SAFE_TIPS_FALLBACKS.get(k, SAFE_TIPS_FALLBACKS["–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å"])
    try:
        _, tips = gpt_blurb(k)
        out: list[str] = []
        for t in (tips or [])[:3]:
            t = _sanitize_line(t, max_len=120)
            if not t or _looks_gibberish(t): continue
            # –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã –±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ ‚Äî –ª—É—á—à–µ —Å–º–æ—Ç—Ä—è—Ç—Å—è –≤ Telegram
            out.append(t.rstrip("."))
        if out: return out
    except Exception as e:
        logging.warning("LLM tips failed: %s", e)
    return SAFE_TIPS_FALLBACKS.get(k, SAFE_TIPS_FALLBACKS["–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å"])

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ—Ä–æ–≥–∏ –≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
WSUIT_NONE   = float(os.getenv("WSUIT_NONE",   "22"))
WSUIT_SHORTY = float(os.getenv("WSUIT_SHORTY", "20"))
WSUIT_32     = float(os.getenv("WSUIT_32",     "17"))
WSUIT_43     = float(os.getenv("WSUIT_43",     "14"))
WSUIT_54     = float(os.getenv("WSUIT_54",     "12"))
WSUIT_65     = float(os.getenv("WSUIT_65",     "10"))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _as_tz(tz: Union[pendulum.Timezone, str]) -> pendulum.Timezone:
    return pendulum.timezone(tz) if isinstance(tz, str) else tz

WMO_DESC = {
    0:"‚òÄÔ∏è —è—Å–Ω–æ",1:"‚õÖ —á.–æ–±–ª",2:"‚òÅÔ∏è –æ–±–ª",3:"üå• –ø–∞—Å–º",45:"üå´ —Ç—É–º–∞–Ω",48:"üå´ –∏–∑–º–æ—Ä–æ–∑—å",
    51:"üå¶ –º–æ—Ä–æ—Å—å",61:"üåß –¥–æ–∂–¥—å",71:"‚ùÑÔ∏è —Å–Ω–µ–≥",95:"‚õà –≥—Ä–æ–∑–∞"
}
def code_desc(c: Any) -> Optional[str]:
    try: return WMO_DESC.get(int(c))
    except Exception: return None

def _hourly_times(wm: Dict[str, Any]) -> List[pendulum.DateTime]:
    hourly = wm.get("hourly") or {}
    times = hourly.get("time") or hourly.get("time_local") or hourly.get("timestamp") or []
    out: List[pendulum.DateTime] = []
    for t in times:
        try: out.append(pendulum.parse(str(t)))
        except Exception: continue
    return out

def _daily_times(wm: Dict[str, Any]) -> List[pendulum.Date]:
    daily = wm.get("daily") or {}
    times = daily.get("time") or []
    out: List[pendulum.Date] = []
    for t in times:
        try:
            dt = pendulum.parse(str(t))
            out.append(dt.date())
        except Exception:
            continue
    return out

def _nearest_index_for_day(times: List[pendulum.DateTime], date_obj: pendulum.Date, prefer_hour: int, tz: pendulum.Timezone) -> Optional[int]:
    if not times: return None
    target = pendulum.datetime(date_obj.year, date_obj.month, date_obj.day, prefer_hour, 0, tz=tz)
    best_i, best_diff = None, None
    for i, dt in enumerate(times):
        try: dt_local = dt.in_tz(tz)
        except Exception: dt_local = dt
        if dt_local.date() != date_obj: continue
        diff = abs((dt_local - target).total_seconds())
        if best_diff is None or diff < best_diff:
            best_i, best_diff = i, diff
    return best_i

def _pick(d: Dict[str, Any], *keys, default=None):
    for k in keys:
        if k in d: return d[k]
    return default

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ö–µ–¥–µ—Ä –ö—ë–Ω–∏–≥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def pick_header_metrics_for_offset(wm: Dict[str, Any], tz: pendulum.Timezone, offset_days: int) -> Tuple[Optional[float], Optional[int], Optional[int], str]:
    """–í–µ—Ç–µ—Ä/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/–¥–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥–Ω—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º (‚âà–ø–æ–ª–¥–µ–Ω—å)."""
    hourly = wm.get("hourly") or {}
    times = _hourly_times(wm)
    target_date = pendulum.now(tz).add(days=offset_days).date()

    spd_arr = _pick(hourly, "windspeed_10m", "windspeed", "wind_speed_10m", "wind_speed", default=[])
    dir_arr = _pick(hourly, "winddirection_10m", "winddirection", "wind_dir_10m", "wind_dir", default=[])
    prs_arr = hourly.get("surface_pressure", []) or hourly.get("pressure", [])

    if times:
        idx_noon = _nearest_index_for_day(times, target_date, prefer_hour=12, tz=tz)
        idx_morn = _nearest_index_for_day(times, target_date, prefer_hour=6,  tz=tz)
    else:
        idx_noon = idx_morn = None

    wind_ms = None; wind_dir = None; press_val = None; trend = "‚Üí"

    if idx_noon is not None:
        try: spd  = float(spd_arr[idx_noon]) if idx_noon < len(spd_arr) else None
        except Exception: spd = None
        try: wdir = float(dir_arr[idx_noon]) if idx_noon < len(dir_arr) else None
        except Exception: wdir = None
        try: p_noon = float(prs_arr[idx_noon]) if idx_noon < len(prs_arr) else None
        except Exception: p_noon = None
        try: p_morn = float(prs_arr[idx_morn]) if (idx_morn is not None and idx_morn < len(prs_arr)) else None
        except Exception: p_morn = None

        wind_ms  = kmh_to_ms(spd) if isinstance(spd,  (int, float)) else None
        wind_dir = int(round(wdir)) if isinstance(wdir, (int, float)) else None
        press_val = int(round(p_noon)) if isinstance(p_noon, (int, float)) else None
        if isinstance(p_noon, (int, float)) and isinstance(p_morn, (int, float)):
            diff = p_noon - p_morn
            trend = "‚Üë" if diff >= 0.3 else "‚Üì" if diff <= -0.3 else "‚Üí"

    if wind_ms is None and times:
        idxs = [i for i, t in enumerate(times) if t.in_tz(tz).date() == target_date]
        if idxs:
            try: speeds = [float(spd_arr[i]) for i in idxs if i < len(spd_arr)]
            except Exception: speeds = []
            try: dirs   = [float(dir_arr[i]) for i in idxs if i < len(dir_arr)]
            except Exception: dirs = []
            try: prs    = [float(prs_arr[i]) for i in idxs if i < len(prs_arr)]
            except Exception: prs = []
            if speeds: wind_ms = kmh_to_ms(sum(speeds)/len(speeds))
            mean_dir = _circular_mean_deg(dirs)
            wind_dir = int(round(mean_dir)) if mean_dir is not None else wind_dir
            if prs: press_val = int(round(sum(prs)/len(prs)))

    if wind_ms is None or wind_dir is None or press_val is None:
        cur = (wm.get("current") or wm.get("current_weather") or {})
        if wind_ms is None:
            spd = _pick(cur, "windspeed_10m", "windspeed", "wind_speed_10m", "wind_speed")
            wind_ms = kmh_to_ms(spd) if isinstance(spd, (int, float)) else wind_ms
        if wind_dir is None:
            wdir = _pick(cur, "winddirection_10m", "winddirection", "wind_dir_10m", "wind_dir")
            if isinstance(wdir, (int, float)): wind_dir = int(round(float(wdir)))
        if press_val is None:
            pcur = _pick(cur, "surface_pressure", "pressure")
            if isinstance(pcur, (int, float)): press_val = int(round(float(pcur)))
    return wind_ms, wind_dir, press_val, trend

def _circular_mean_deg(deg_list: List[float]) -> Optional[float]:
    if not deg_list: return None
    x = sum(math.cos(math.radians(d)) for d in deg_list)
    y = sum(math.sin(math.radians(d)) for d in deg_list)
    if x == 0 and y == 0: return None
    ang = math.degrees(math.atan2(y, x))
    return (ang + 360.0) % 360.0

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —à—Ç–æ—Ä–º-—Ñ–ª–∞–≥–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _indices_for_day_offset(wm: Dict[str, Any], tz: pendulum.Timezone, offset_days: int) -> List[int]:
    times = _hourly_times(wm)
    target_date = pendulum.now(tz).add(days=offset_days).date()
    idxs: List[int] = []
    for i, dt in enumerate(times):
        try:
            if dt.in_tz(tz).date() == target_date: idxs.append(i)
        except Exception: pass
    return idxs

def storm_flags_for_offset(wm: Dict[str, Any], tz: pendulum.Timezone, offset_days: int) -> Dict[str, Any]:
    hourly = wm.get("hourly") or {}
    idxs = _indices_for_day_offset(wm, tz, offset_days)
    if not idxs: return {"warning": False}

    def _arr(*names, default=None):
        v = _pick(hourly, *names, default=default)
        return v if isinstance(v, list) else []

    def _vals(arr):
        out=[]
        for i in idxs:
            if i < len(arr):
                try: out.append(float(arr[i]))
                except Exception: pass
        return out

    speeds_kmh = _vals(_arr("windspeed_10m","windspeed","wind_speed_10m","wind_speed", default=[]))
    gusts_kmh  = _vals(_arr("windgusts_10m","wind_gusts_10m","wind_gusts", default=[]))
    rain_mm_h  = _vals(_arr("rain", default=[]))
    tprob      = _vals(_arr("thunderstorm_probability", default=[]))

    max_speed_ms = kmh_to_ms(max(speeds_kmh)) if speeds_kmh else None
    max_gust_ms  = kmh_to_ms(max(gusts_kmh))  if gusts_kmh  else None
    heavy_rain   = (max(rain_mm_h) >= 8.0) if rain_mm_h else False
    thunder      = (max(tprob) >= 60) if tprob else False

    reasons=[]
    if isinstance(max_speed_ms,(int,float)) and max_speed_ms >= 13: reasons.append(f"–≤–µ—Ç–µ—Ä –¥–æ {max_speed_ms:.0f} –º/—Å")
    if isinstance(max_gust_ms,(int,float)) and max_gust_ms >= 17: reasons.append(f"–ø–æ—Ä—ã–≤—ã –¥–æ {max_gust_ms:.0f} –º/—Å")
    if heavy_rain: reasons.append("—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å")
    if thunder: reasons.append("–≥—Ä–æ–∑–∞")

    return {
        "max_speed_ms": max_speed_ms, "max_gust_ms": max_gust_ms,
        "heavy_rain": heavy_rain, "thunder": thunder,
        "warning": bool(reasons),
        "warning_text": "‚ö†Ô∏è <b>–®—Ç–æ—Ä–º–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>: " + ", ".join(reasons) if reasons else ""
    }

def storm_flags_for_tomorrow(wm: Dict[str, Any], tz: pendulum.Timezone) -> Dict[str, Any]:
    return storm_flags_for_offset(wm, tz, 1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–§-–∏–Ω–¥–µ–∫—Å (–∏–∑ weather) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _uv_from_weather(wm: Dict[str, Any], tz: pendulum.Timezone, offset_days: int = 0) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'uvi_now','uvi_max','label','source'}; –ø–µ—á–∞—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ uvi>=3."""
    hourly = wm.get("hourly") or {}
    daily  = wm.get("daily")  or {}
    times  = hourly.get("time") or []
    uvi_arr = hourly.get("uv_index") or hourly.get("uv_index_clear_sky") or []
    date_str = pendulum.today(tz).add(days=offset_days).to_date_string()

    def uvi_label(v: Optional[float]) -> str:
        if not isinstance(v,(int,float)): return "–Ω/–¥"
        x = float(v)
        if x < 3:  return "–Ω–∏–∑–∫–∏–π"
        if x < 6:  return "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
        if x < 8:  return "–≤—ã—Å–æ–∫–∏–π"
        if x < 11: return "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"
        return "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π"

    # —Ç–µ–∫—É—â–µ–µ (–±–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è)
    uvi_now = None
    try:
        now_hh = pendulum.now(tz).format("HH")
        for t, v in zip(times, uvi_arr):
            if not t or not t.startswith(date_str): continue
            if t[11:13] == now_hh and isinstance(v, (int, float)):
                uvi_now = float(v); break
    except Exception:
        uvi_now = None

    # –º–∞–∫—Å–∏–º—É–º –∑–∞ –¥–µ–Ω—å
    uvi_max = None
    try:
        if daily.get("uv_index_max"):
            uvi_max = float((daily["uv_index_max"] or [None])[0])
        else:
            day_vals = [float(v) for t, v in zip(times, uvi_arr) if t and t.startswith(date_str) and isinstance(v,(int,float))]
            if day_vals:
                uvi_max = max(day_vals)
    except Exception:
        pass

    return {
        "uvi": uvi_now,
        "uvi_max": uvi_max,
        "label": uvi_label(uvi_now if uvi_now is not None else uvi_max),
        "source": "daily" if (daily.get("uv_index_max")) else ("hourly" if uvi_arr else None),
    }

def uv_line_if_needed(wm: Dict[str, Any], tz: pendulum.Timezone, offset_days: int = 0) -> Optional[str]:
    u = _uv_from_weather(wm, tz, offset_days)
    uvi = u.get("uvi") if isinstance(u.get("uvi"), (int, float)) else u.get("uvi_max")
    try:
        val = float(uvi) if uvi is not None else None
    except Exception:
        val = None
    if val is None or val < 3:
        return None
    # –∫—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    label = u.get("label") or "–≤—ã—Å–æ–∫–∏–π"
    return f"‚òÄÔ∏è –£–§: {val:.0f} ‚Äî {label} ‚Ä¢ SPF 30+ –∏ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ¬´–∫–∏–ø—Ä—Å–∫–∞—è¬ª –ª–æ–≥–∏–∫–∞ Kp ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _kp_cyprus_like() -> Tuple[Optional[float], str, Optional[int]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (kp, status, age_minutes) –∫–∞–∫ –≤ –∫–∏–ø—Ä—Å–∫–æ–º/–º–∏—Ä–æ–≤–æ–º –ø–æ—Å—Ç–µ:
    –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫—Ä—ã—Ç—ã–π 3—á –±–∞—Ä SWPC. –ï—Å–ª–∏ —Å—Ç–∞—Ä—à–µ 9 —á–∞—Å–æ–≤ ‚Äî –Ω/–¥.
    """
    try:
        # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —É get_kp –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        try:
            kp_tuple = get_kp(source="global")  # –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        except TypeError:
            kp_tuple = get_kp()
    except Exception:
        return None, "–Ω/–¥", None

    # –æ–∂–∏–¥–∞–µ–º (kp, status, ts, src), –Ω–æ —Ä–∞—Å–ø–∞–∫—É–µ–º –±–µ—Ä–µ–∂–Ω–æ
    kp = kp_tuple[0] if isinstance(kp_tuple, (list, tuple)) and len(kp_tuple) > 0 else None
    status = kp_tuple[1] if isinstance(kp_tuple, (list, tuple)) and len(kp_tuple) > 1 else "–Ω/–¥"
    ts = kp_tuple[2] if isinstance(kp_tuple, (list, tuple)) and len(kp_tuple) > 2 else None

    age_min = None
    try:
        if isinstance(ts, int):
            age_min = int((pendulum.now("UTC").int_timestamp - ts) / 60)
            if age_min > 9 * 60:   # —Å—Ç–∞—Ä—à–µ 9—á ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω/–¥
                return None, "–Ω/–¥", None
    except Exception:
        pass
    try:
        if isinstance(kp, (int, float)):
            kp = float(kp)
            if kp < 0 or kp > 9:
                kp = max(0.0, min(9.0, kp))
    except Exception:
        kp = None
    return kp, status, age_min

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—ã–≤–æ–¥ / –∏—Ç–æ–≥–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _is_air_bad(air: Dict[str, Any]) -> Tuple[bool, str, str]:
    try: aqi = float(air.get("aqi")) if air.get("aqi") is not None else None
    except Exception: aqi = None
    pm25 = air.get("pm25"); pm10 = air.get("pm10")
    worst_label="—É–º–µ—Ä–µ–Ω–Ω—ã–π"; reason_parts=[]; bad=False
    def _num(v):
        try: return float(v)
        except Exception: return None
    p25=_num(pm25); p10=_num(pm10)
    if aqi is not None and aqi >= 100:
        bad=True; 
        if aqi>=150: worst_label="–≤—ã—Å–æ–∫–∏–π"
        reason_parts.append(f"AQI {aqi:.0f}")
    if p25 is not None and p25>35:
        bad=True; 
        if p25>55: worst_label="–≤—ã—Å–æ–∫–∏–π"
        reason_parts.append(f"PM‚ÇÇ.‚ÇÖ {p25:.0f}")
    if p10 is not None and p10>50:
        bad=True; 
        if p10>100: worst_label="–≤—ã—Å–æ–∫–∏–π"
        reason_parts.append(f"PM‚ÇÅ‚ÇÄ {p10:.0f}")
    reason=", ".join(reason_parts) if reason_parts else "–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ"
    return bad, worst_label, reason

def build_conclusion(kp: Any, kp_status: str, air: Dict[str, Any], storm: Dict[str, Any], schu: Dict[str, Any]) -> List[str]:
    lines: List[str] = []
    storm_main = bool(storm.get("warning"))
    air_bad, air_label, air_reason = _is_air_bad(air)
    kp_val = float(kp) if isinstance(kp,(int,float)) else None
    kp_main = bool(kp_val is not None and kp_val >= 5)
    schu_main = (schu or {}).get("status_code") == "red"
    gust = storm.get("max_gust_ms")
    storm_text=None
    if storm_main:
        parts=[]
        if isinstance(gust,(int,float)): parts.append(f"–ø–æ—Ä—ã–≤—ã –¥–æ {gust:.0f} –º/—Å")
        if storm.get("heavy_rain"): parts.append("–ª–∏–≤–Ω–∏")
        if storm.get("thunder"): parts.append("–≥—Ä–æ–∑–∞")
        storm_text="—à—Ç–æ—Ä–º–æ–≤–∞—è –ø–æ–≥–æ–¥–∞: " + (", ".join(parts) if parts else "–≤–æ–∑–º–æ–∂–Ω—ã –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
    air_text = f"–∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞: {air_label} ({air_reason})" if air_bad else None
    kp_text  = f"–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: Kp‚âà{kp_val:.1f} ({kp_status})" if kp_main and kp_val is not None else None
    schu_text= "—Å–∏–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –®—É–º–∞–Ω–∞ (‚ö†Ô∏è)" if schu_main else None
    if storm_main: lines.append(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî {storm_text}. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–µ–ª–∞ —Å —É—á—ë—Ç–æ–º –ø–æ–≥–æ–¥—ã.")
    elif air_bad:  lines.append(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî {air_text}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ –∏ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏.")
    elif kp_main:  lines.append(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî {kp_text}. –í–æ–∑–º–æ–∂–Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É –º–µ—Ç–µ–æ–∑–∞–≤–∏—Å–∏–º—ã—Ö.")
    elif schu_main:lines.append("–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî –≤–æ–ª–Ω—ã –®—É–º–∞–Ω–∞: –æ—Ç–º–µ—á–∞—é—Ç—Å—è —Å–∏–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è. –ë–µ—Ä–µ–≥–∏—Ç–µ —Ä–µ–∂–∏–º –∏ –Ω–∞–≥—Ä—É–∑–∫—É.")
    else:          lines.append("–°–µ—Ä—å—ë–∑–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞ –Ω–µ –≤–∏–¥–Ω–æ ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ª–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã.")
    secondary=[]
    for tag,txt in (("storm",storm_text),("air",air_text),("kp",kp_text),("schu",schu_text)):
        if txt:
            if (tag=="storm" and storm_main) or (tag=="air" and air_bad) or (tag=="kp" and kp_main) or (tag=="schu" and schu_main):
                continue
            secondary.append(txt)
    if secondary: lines.append("–¢–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: " + "; ".join(secondary[:2]) + ".")
    return lines

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤–æ–¥–∞ / –≥–∏–¥—Ä–∏–∫ (–∫—Ä–∞—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _wetsuit_hint(sst: Optional[float]) -> Optional[str]:
    if not isinstance(sst, (int, float)):
        return None
    t = float(sst)
    if t >= WSUIT_NONE:   return None
    if t >= WSUIT_SHORTY: return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º —à–æ—Ä—Ç–∏ 2 –º–º"
    if t >= WSUIT_32:     return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 3/2 –º–º"
    if t >= WSUIT_43:     return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 4/3 –º–º (–±–æ—Ç—ã)"
    if t >= WSUIT_54:     return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 5/4 –º–º (–±–æ—Ç—ã, –ø–µ—Ä—á–∞—Ç–∫–∏)"
    if t >= WSUIT_65:     return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 5/4 –º–º + –∫–∞–ø—é—à–æ–Ω (–±–æ—Ç—ã, –ø–µ—Ä—á–∞—Ç–∫–∏)"
    return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 6/5 –º–º + –∫–∞–ø—é—à–æ–Ω (–±–æ—Ç—ã, –ø–µ—Ä—á–∞—Ç–∫–∏)"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Safecast –∏ —Ä–∞–¥–∏–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _read_json(path: Path) -> Optional[Dict[str, Any]]:
    try:
        if not path.exists(): return None
        data = json.loads(path.read_text("utf-8"))
        return data if isinstance(data, dict) else None
    except Exception as e:
        logging.warning("JSON read error from %s: %s", path, e)
        return None

def load_safecast() -> Optional[Dict[str, Any]]:
    paths: List[Path] = []
    if os.getenv("SAFECAST_FILE"):
        paths.append(Path(os.getenv("SAFECAST_FILE")))
    here = Path(__file__).parent
    paths.append(here / "data" / "safecast_kaliningrad.json")
    sc: Optional[Dict[str, Any]] = None
    for p in paths:
        sc = _read_json(p)
        if sc: break
    if not sc: return None
    ts = sc.get("ts")
    if not isinstance(ts, (int, float)): return None
    now_ts = pendulum.now("UTC").int_timestamp
    if now_ts - int(ts) > 24 * 3600: return None
    return sc

def safecast_usvh_risk(x: float) -> tuple[str, str]:
    if x <= 0.15: return "üü¢", "–Ω–∏–∑–∫–∏–π"
    if x <= 0.30: return "üü°", "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
    return "üîµ", "–≤—ã—à–µ –Ω–æ—Ä–º—ã"

def official_usvh_risk(x: float) -> tuple[str, str]:
    if x <= 0.15: return "üü¢", "–Ω–∏–∑–∫–∏–π"
    if x <= 0.30: return "üü°", "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π"
    return "üî¥", "–≤—ã—Å–æ–∫–∏–π"

def safecast_pm_level(pm25: Optional[float], pm10: Optional[float]) -> Tuple[str, str]:
    def l25(x: float) -> int: return 0 if x<=15 else 1 if x<=35 else 2 if x<=55 else 3
    def l10(x: float) -> int: return 0 if x<=30 else 1 if x<=50 else 2 if x<=100 else 3
    worst = -1
    if isinstance(pm25,(int,float)): worst=max(worst,l25(float(pm25)))
    if isinstance(pm10,(int,float)): worst=max(worst,l10(float(pm10)))
    if worst<0: return "‚ö™","–Ω/–¥"
    return (["üü¢","üü°","üü†","üî¥"][worst],
            ["–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"][worst])

def safecast_block_lines() -> List[str]:
    sc = load_safecast()
    if not sc: return []
    lines: List[str] = []
    pm25, pm10 = sc.get("pm25"), sc.get("pm10")
    if isinstance(pm25,(int,float)) or isinstance(pm10,(int,float)):
        em,lbl = safecast_pm_level(pm25,pm10)
        parts=[]
        if isinstance(pm25,(int,float)): parts.append(f"PM‚ÇÇ.‚ÇÖ {pm25:.0f}")
        if isinstance(pm10,(int,float)): parts.append(f"PM‚ÇÅ‚ÇÄ {pm10:.0f}")
        if parts: lines.append(f"üß™ Safecast: {em} {lbl} ¬∑ " + " | ".join(parts))
    cpm = sc.get("cpm"); usvh = sc.get("radiation_usvh")
    if not isinstance(usvh,(int,float)) and isinstance(cpm,(int,float)):
        usvh = float(cpm) * CPM_TO_USVH
    if isinstance(usvh,(int,float)):
        em,lbl = safecast_usvh_risk(float(usvh))
        if isinstance(cpm,(int,float)):
            lines.append(f"üìü –†–∞–¥–∏–∞—Ü–∏—è (Safecast): {cpm:.0f} CPM ‚âà {usvh:.3f} ŒºSv/h ‚Äî {em} {lbl} (–º–µ–¥–∏–∞–Ω–∞ 6 —á)")
        else:
            lines.append(f"üìü –†–∞–¥–∏–∞—Ü–∏—è (Safecast): ‚âà {usvh:.3f} ŒºSv/h ‚Äî {em} {lbl} (–º–µ–¥–∏–∞–Ω–∞ 6 —á)")
    elif isinstance(cpm,(int,float)):
        lines.append(f"üìü –†–∞–¥–∏–∞—Ü–∏—è (Safecast): {cpm:.0f} CPM (–º–µ–¥–∏–∞–Ω–∞ 6 —á)")
    return lines

def radiation_line(lat: float, lon: float) -> Optional[str]:
    data = get_radiation(lat, lon) or {}
    dose = data.get("dose")
    if isinstance(dose,(int,float)):
        em,lbl = official_usvh_risk(float(dose))
        return f"{em} –†–∞–¥–∏–∞—Ü–∏—è: {dose:.3f} ŒºSv/h ({lbl})"
    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤–µ—á–µ—Ä–Ω–∏–π/—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _sunset_from_weather(wm: Dict[str, Any], tz: pendulum.Timezone, offset_days: int = 0) -> Optional[str]:
    daily = wm.get("daily") or {}
    times = daily.get("time") or []
    sunset = daily.get("sunset") or []
    try:
        target = pendulum.today(tz).add(days=offset_days).date()
        for t, s in zip(times, sunset):
            if not t or not s: continue
            if pendulum.parse(str(t)).date() == target:
                return pendulum.parse(str(s)).in_tz(tz).format("HH:mm")
    except Exception:
        return None
    return None

def _top_warm_cold(other_cities, tz_name: str) -> Tuple[Optional[Tuple[str,int,int]], Optional[Tuple[str,int,int]]]:
    temps: List[Tuple[str,int,int]] = []
    for city, (la, lo) in other_cities:
        wm = get_weather(la, lo) or {}
        daily = wm.get("daily") or {}
        times = _daily_times(wm)
        try:
            idx = times.index(pendulum.today(tz_name).date())
        except ValueError:
            idx = None
        if idx is None: continue
        tmax_a = daily.get("temperature_2m_max") or []
        tmin_a = daily.get("temperature_2m_min") or []
        try:
            tmax = int(round(float(tmax_a[idx])))
            tmin = int(round(float(tmin_a[idx] if idx<len(tmin_a) else tmax)))
            temps.append((city, tmax, tmin))
        except Exception:
            continue
    if not temps: return None, None
    warm = max(temps, key=lambda x: x[1])
    cold = min(temps, key=lambda x: x[1])
    return warm, cold

def _wetsuit_today_hint() -> Optional[str]:
    try:
        sst = get_sst(KLD_LAT, KLD_LON)
        return _wetsuit_hint(float(sst)) if isinstance(sst,(int,float)) else None
    except Exception:
        return None

def _fx_line_morning(tz: pendulum.Timezone) -> Optional[str]:
    """–ö—É—Ä—Å—ã (—É—Ç—Ä–æ): USD/EUR/CNY, —Å–∏–º–≤–æ–ª —Ä—É–±–ª—è ‚Äî \u20BD. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ fx.get_rates –≤–µ—Ä–Ω—É–ª–æ—Å—å."""
    try:
        import importlib
        fx = importlib.import_module("fx")
        base_date = pendulum.today(tz)
        rates = fx.get_rates(date=base_date, tz=tz)  # type: ignore[attr-defined]
    except Exception as e:
        logging.info("FX not available: %s", e)
        return None
    if not isinstance(rates, dict): return None

    def token(code: str, name: str) -> Optional[str]:
        r = rates.get(code) or {}
        v = r.get("value"); d = r.get("delta")
        try:
            vs = f"{float(v):.2f}"
            ds = f"{float(d):.2f}" if d is not None else "0.00"
            # –∑–Ω–∞–∫ –º–∏–Ω—É—Å–∞ ‚Äî —É–∑–∫–∏–π (‚àí)
            if ds.startswith("-"):
                ds = "‚àí" + ds[1:]
            return f"{name} {vs} {RUBLE} ({ds})"
        except Exception:
            return None

    parts = [token("USD","USD"), token("EUR","EUR"), token("CNY","CNY")]
    parts = [p for p in parts if p]
    if not parts:
        return None
    return "üí± –ö—É—Ä—Å—ã (—É—Ç—Ä–æ): " + " ‚Ä¢ ".join(parts)

def _air_line(air: Dict[str, Any]) -> str:
    lvl = air.get("lvl", "–Ω/–¥")
    return f"üè≠ –í–æ–∑–¥—É—Ö: {AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) ‚Ä¢ PM‚ÇÇ.‚ÇÖ {air.get('pm25','–Ω/–¥')} / PM‚ÇÅ‚ÇÄ {air.get('pm10','–Ω/–¥')}"

def _space_lines_cyprus_like(tz: pendulum.Timezone) -> List[str]:
    kp_val, kp_status, age_min = _kp_cyprus_like()
    age_txt = ""
    if isinstance(age_min, int):
        age_txt = f", üïì {age_min // 60}—á –Ω–∞–∑–∞–¥" if age_min > 180 else f", üïì {age_min} –º–∏–Ω –Ω–∞–∑–∞–¥"
    kp_chunk = f"–ö—Ä {kp_val:.1f} ({kp_status}{age_txt})" if isinstance(kp_val,(int,float)) else "–ö—Ä –Ω/–¥"

    sw = get_solar_wind() or {}
    bz, bt, v, n = sw.get("bz"), sw.get("bt"), sw.get("speed_kms"), sw.get("density")
    wind_status = sw.get("status", "–Ω/–¥")
    parts=[]
    if isinstance(v,(int,float)):  parts.append(f"v {v:.0f} –∫–º/—Å")
    if isinstance(n,(int,float)):  parts.append(f"n {n:.1f} —Å–º‚Åª¬≥")
    sw_chunk = (" ‚Ä¢ üå¨Ô∏è " + ", ".join(parts) + f" ‚Äî {wind_status}") if parts else ""
    return [f"üß≤ –ö–æ—Å–º–æ–ø–æ–≥–æ–¥–∞: {kp_chunk}{sw_chunk}"]

def _itogo_line(air: Dict[str, Any], storm: Dict[str, Any]) -> str:
    # –≤–æ–∑–¥—É—Ö ‚Äî —Ç–æ–ª—å–∫–æ —Å–º–∞–π–ª–∏–∫ –ø–æ —É—Ä–æ–≤–Ω—é
    lvl = air.get("lvl", "–Ω/–¥")
    air_short = "üü¢" if lvl in ("—Ö–æ—Ä–æ—à–∏–π","–Ω–∏–∑–∫–∏–π") else ("üü°" if lvl in ("—É–º–µ—Ä–µ–Ω–Ω—ã–π",) else ("üü†" if lvl in ("–≤—ã—Å–æ–∫–∏–π",) else "‚ö™"))
    storm_short = "–±–µ–∑ —à—Ç–æ—Ä–º–∞" if not storm.get("warning") else "—à—Ç–æ—Ä–º"
    kp_val, kp_status, _ = _kp_cyprus_like()
    kp_short = kp_status if isinstance(kp_val,(int,float)) else "–Ω/–¥"
    return f"üîé –ò—Ç–æ–≥–æ: –≤–æ–∑–¥—É—Ö {air_short} ‚Ä¢ {storm_short} ‚Ä¢ –ö—Ä {kp_short}"

def _tips_one_liner(theme: str) -> str:
    tips = safe_tips(theme)
    return "‚úÖ –°–µ–≥–æ–¥–Ω—è: " + "; ".join(tips[:3])

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —É—Ç—Ä–µ–Ω–Ω–∏–π –º–∞–∫–µ—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message_morning_compact(
    region_name: str,
    sea_label: str, sea_cities,
    other_label: str, other_cities,
    tz: Union[pendulum.Timezone, str],
) -> str:
    tz_obj = _as_tz(tz)
    tz_name = tz_obj.name
    base = pendulum.today(tz_obj).add(days=DAY_OFFSET)

    P: List[str] = []
    hdr_when = "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è" if DAY_OFFSET == 0 else "–Ω–∞ –∑–∞–≤—Ç—Ä–∞"
    P.append(f"üüß <b>{region_name}: –ø–æ–≥–æ–¥–∞ {hdr_when} ({base.format('DD.MM.YYYY')})</b>")

    # ‚Äî —à–∞–ø–∫–∞: –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥
    wm_klg = get_weather(KLD_LAT, KLD_LON) or {}
    t_day_max = t_night_min = wc = None
    # –¥–Ω–µ–≤–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    daily = wm_klg.get("daily") or {}
    times = _daily_times(wm_klg)
    try:
        idx = times.index(base.date())
    except ValueError:
        idx = None
    if idx is not None:
        try: t_day_max = float((daily.get("temperature_2m_max") or [None])[idx])
        except Exception: pass
        try: t_night_min = float((daily.get("temperature_2m_min") or [None])[idx])
        except Exception: pass
        try: wc = int((daily.get("weathercode") or [None])[idx])
        except Exception: pass

    wind_ms, wind_dir_deg, press_val, press_trend = pick_header_metrics_for_offset(wm_klg, tz_obj, DAY_OFFSET)
    gust = storm_flags_for_offset(wm_klg, tz_obj, DAY_OFFSET).get("max_gust_ms")
    desc = code_desc(wc)

    tday_i   = int(round(t_day_max))   if isinstance(t_day_max,(int,float)) else None
    tnight_i = int(round(t_night_min)) if isinstance(t_night_min,(int,float)) else None
    kal_temp = f"{tday_i}/{tnight_i}{NBSP}¬∞C" if (tday_i is not None and tnight_i is not None) else "–Ω/–¥"
    wind_part = (
        f"üí® {wind_ms:.1f} –º/—Å ({compass(wind_dir_deg)})" if isinstance(wind_ms,(int,float)) and wind_dir_deg is not None
        else (f"üí® {wind_ms:.1f} –º/—Å" if isinstance(wind_ms,(int,float)) else "üí® –Ω/–¥")
    )
    if isinstance(gust,(int,float)):
        wind_part += f" ‚Ä¢ –ø–æ—Ä—ã–≤—ã ‚Äî {int(round(gust))}"
    press_part = f"üîπ {press_val} –≥–ü–∞ {press_trend}" if isinstance(press_val,int) else "üîπ –Ω/–¥"

    header = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ ‚Äî {kal_temp} ‚Ä¢ {desc or '–Ω/–¥'} ‚Ä¢ {wind_part} ‚Ä¢ {press_part}."
    P.append(header)

    # –ü–æ–≥—Ä–µ—Ç—å—Å—è/–æ—Å—Ç—ã—Ç—å, –≥–∏–¥—Ä–∏–∫
    warm, cold = _top_warm_cold(other_cities, tz_name)
    if warm or cold or _wetsuit_today_hint():
        parts=[]
        if warm: parts.append(f"–ü–æ–≥—Ä–µ—Ç—å—Å—è: {warm[0]} {warm[1]}/{warm[2]}{NBSP}¬∞C")
        if cold: parts.append(f"–æ—Å—Ç—ã—Ç—å: {cold[0]} {cold[1]}/{cold[2]}{NBSP}¬∞C")
        ws = _wetsuit_today_hint()
        if ws: parts.append(f"–ú–æ—Ä–µ: {ws}")
        if parts: P.append("; ".join(parts) + ".")

    P.append("‚Äî")

    # –ù–∏–∂–Ω–∏–π ¬´–∫–∏–ø—Ä—Å–∫–∏–π¬ª –±–ª–æ–∫
    sunset = _sunset_from_weather(wm_klg, tz_obj, DAY_OFFSET) or "–Ω/–¥"
    P.append(f"üèôÔ∏è –ó–∞–∫–∞—Ç: {sunset}")

    # –ö—É—Ä—Å—ã (—É—Ç—Ä–æ) ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å
    fx_line = _fx_line_morning(tz_obj)
    if fx_line:
        P.append(fx_line)

    # –í–æ–∑–¥—É—Ö, Safecast, –ø—ã–ª—å—Ü–∞, —Ä–∞–¥–∏–∞—Ü–∏—è
    air = get_air(KLD_LAT, KLD_LON) if SHOW_AIR else {}
    if SHOW_AIR and air:
        P.append(_air_line(air))
        sc_lines = safecast_block_lines()
        if sc_lines:
            P.extend(sc_lines)
        if (p := get_pollen()):
            P.append(f"üåø –ü—ã–ª—å—Ü–∞: –¥–µ—Ä–µ–≤—å—è {p['tree']} ‚Ä¢ —Ç—Ä–∞–≤—ã {p['grass']} ‚Ä¢ —Å–æ—Ä–Ω—è–∫–∏ {p['weed']} ‚Äî —Ä–∏—Å–∫ {p['risk']}")
        if (rl := radiation_line(KLD_LAT, KLD_LON)):
            P.append(rl)

    # –£–§ (–µ—Å–ª–∏ ‚â•3)
    uvi_line = uv_line_if_needed(wm_klg, tz_obj, DAY_OFFSET)
    if uvi_line:
        P.append(uvi_line)

    # –ö–æ—Å–º–æ–ø–æ–≥–æ–¥–∞ (–ö—Ä, SW) ‚Äî –∫–∞–∫ –≤ –ö–∏–ø—Ä–µ
    if SHOW_SPACE:
        P.extend(_space_lines_cyprus_like(tz_obj))

    # –ò—Ç–æ–≥–∏
    storm = storm_flags_for_offset(wm_klg, tz_obj, DAY_OFFSET)
    P.append(_itogo_line(air or {}, storm))

    # –°–æ–≤–µ—Ç—ã ‚Äî –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    theme = (
        "–ø–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞" if storm.get("warning") else
        ("–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if (_kp_cyprus_like()[0] and _kp_cyprus_like()[0] >= 5) else
         ("–ø–ª–æ—Ö–æ–π –≤–æ–∑–¥—É—Ö" if (_is_air_bad(air or {})[0]) else "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å"))
    )
    P.append(_tips_one_liner(theme))

    P.append("‚Äî")
    P.append(f"üìö {get_fact(base, region_name)}")
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–ª–Ω—ã–π –≤–µ—á–µ—Ä–Ω–∏–π (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message(
    region_name: str,
    sea_label: str, sea_cities,
    other_label: str, other_cities,
    tz: Union[pendulum.Timezone, str]
) -> str:
    # –î–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π ¬´–∫–∏–ø—Ä—Å–∫–∏–π¬ª –º–∞–∫–µ—Ç
    if POST_MODE == "morning" or DAY_OFFSET == 0:
        return build_message_morning_compact(region_name, sea_label, sea_cities, other_label, other_cities, tz)

    # –ò–Ω–∞—á–µ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π (–≤–µ—á–µ—Ä–Ω–∏–π –∞–Ω–æ–Ω—Å)
    tz_obj = _as_tz(tz)
    tz_name = tz_obj.name

    P: List[str] = []
    base = pendulum.today(tz_obj).add(days=DAY_OFFSET)
    hdr_when = "–Ω–∞ –∑–∞–≤—Ç—Ä–∞"
    P.append(f"<b>üåÖ {region_name}: –ø–æ–≥–æ–¥–∞ {hdr_when} ({base.format('DD.MM.YYYY')})</b>")

    # –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (—à–∞–ø–∫–∞)
    wm_klg = get_weather(KLD_LAT, KLD_LON) or {}
    storm  = storm_flags_for_offset(wm_klg, tz_obj, DAY_OFFSET)

    t_day_max = t_night_min = wc = None
    daily = wm_klg.get("daily") or {}
    times = _daily_times(wm_klg)
    try:
        idx = times.index(base.date())
    except ValueError:
        idx = None
    if idx is not None:
        try: t_day_max = float((daily.get("temperature_2m_max") or [None])[idx])
        except Exception: pass
        try: t_night_min = float((daily.get("temperature_2m_min") or [None])[idx])
        except Exception: pass
        try: wc = int((daily.get("weathercode") or [None])[idx])
        except Exception: pass

    wind_ms, wind_dir_deg, press_val, press_trend = pick_header_metrics_for_offset(wm_klg, tz_obj, DAY_OFFSET)
    gust = storm.get("max_gust_ms")
    desc = code_desc(wc)

    tday_i   = int(round(t_day_max))   if isinstance(t_day_max,(int,float)) else None
    tnight_i = int(round(t_night_min)) if isinstance(t_night_min,(int,float)) else None
    kal_temp = f"{tday_i}/{tnight_i}{NBSP}¬∞C" if (tday_i is not None and tnight_i is not None) else "–Ω/–¥"

    wind_part = (
        f"üí® {wind_ms:.1f} –º/—Å ({compass(wind_dir_deg)})" if isinstance(wind_ms,(int,float)) and wind_dir_deg is not None
        else (f"üí® {wind_ms:.1f} –º/—Å" if isinstance(wind_ms,(int,float)) else "üí® –Ω/–¥")
    )
    if isinstance(gust,(int,float)):
        wind_part += f" ‚Ä¢ –ø–æ—Ä—ã–≤—ã ‚Äî {int(round(gust))}"
    press_part = f"{press_val} –≥–ü–∞ {press_trend}" if isinstance(press_val,int) else "–Ω/–¥"

    kal_parts = [
        f"üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å {kal_temp}",
        desc or None,
        wind_part,
        f"üîπ {press_part}",
    ]
    P.append(" ‚Ä¢ ".join([x for x in kal_parts if x]))
    P.append("‚Äî‚Äî‚Äî")

    if storm.get("warning"):
        P.append(storm["warning_text"])
        P.append("‚Äî‚Äî‚Äî")

    # –ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
    temps_sea: Dict[str, Tuple[float, float, int, float | None]] = {}
    sea_lookup: Dict[str, Tuple[float, float]] = {}
    for city, (la, lo) in sea_cities:
        sea_lookup[city] = (la, lo)
        wm = get_weather(la, lo) or {}
        daily = wm.get("daily") or {}
        times = _daily_times(wm)
        try:
            idx = times.index(base.date())
        except ValueError:
            idx = None
        if idx is None: continue
        try: tmax = float((daily.get("temperature_2m_max") or [None])[idx])
        except Exception: tmax = None
        try: tmin = float((daily.get("temperature_2m_min") or [None])[idx])
        except Exception: tmin = None
        try: wcx = int((daily.get("weathercode") or [None])[idx])
        except Exception: wcx = 0
        temps_sea[city] = (tmax or 0, tmin or (tmax or 0), wcx, get_sst(la, lo))

    if temps_sea:
        P.append(f"üåä <b>{sea_label}</b>")
        medals = ["ü•µ","üòä","üôÑ","üòÆ‚Äçüí®"]
        for i, (city, (d, n, wcx, sst_c)) in enumerate(sorted(temps_sea.items(), key=lambda kv: kv[1][0], reverse=True)[:5]):
            d_i, n_i = int(round(d)), int(round(n))
            medal = medals[i] if i < len(medals) else "‚Ä¢"
            line = f"{medal} {city}: {d_i}/{n_i}{NBSP}¬∞C"
            descx = code_desc(wcx)
            if descx: line += f" {descx}"
            if sst_c is not None: line += f" üåä {int(round(sst_c))}{NBSP}¬∞C"
            P.append(line)
        P.append("‚Äî‚Äî‚Äî")

    # –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç—ë–ø–ª—ã–µ/—Ö–æ–ª–æ–¥–Ω—ã–µ
    temps_oth: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in other_cities:
        wm = get_weather(la, lo) or {}
        daily = wm.get("daily") or {}
        times = _daily_times(wm)
        try:
            idx = times.index(base.date())
        except ValueError:
            idx = None
        if idx is None: continue
        try: tmax = float((daily.get("temperature_2m_max") or [None])[idx])
        except Exception: tmax = None
        try: tmin = float((daily.get("temperature_2m_min") or [None])[idx])
        except Exception: tmin = None
        try: wcx = int((daily.get("weathercode") or [None])[idx])
        except Exception: wcx = 0
        if tmax is not None:
            temps_oth[city] = (tmax, tmin or tmax, wcx)

    if temps_oth:
        P.append("üî• <b>–¢—ë–ø–ª—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0], reverse=True)[:3]:
            d_i, n_i = int(round(d)), int(round(n))
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d_i}/{n_i}{NBSP}¬∞C" + (f" {descx}" if descx else ""))
        P.append("‚ùÑÔ∏è <b>–•–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0])[:3]:
            d_i, n_i = int(round(d)), int(round(n))
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d_i}/{n_i}{NBSP}¬∞C" + (f" {descx}" if descx else ""))
        P.append("‚Äî‚Äî‚Äî")

    # –£—Ç–æ—á–Ω—è—é—â–∏–µ –±–ª–æ–∫–∏ (–≤–µ—á–µ—Ä)
    if SHOW_AIR:
        P.append("üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
        air = get_air(KLD_LAT, KLD_LON) or {}
        lvl = air.get("lvl", "–Ω/–¥")
        P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")
        sc = safecast_block_lines()
        if sc: P.extend(sc)
        if (p := get_pollen()):
            P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
            P.append(f"–î–µ—Ä–µ–≤—å—è: {p['tree']} | –¢—Ä–∞–≤—ã: {p['grass']} | –°–æ—Ä–Ω—è–∫–∏: {p['weed']} ‚Äî —Ä–∏—Å–∫ {p['risk']}")
        if (rl := radiation_line(KLD_LAT, KLD_LON)):
            P.append(rl)
        P.append("‚Äî‚Äî‚Äî")
    else:
        air = {}

    if SHOW_SPACE:
        kp_val, kp_status, age_min = _kp_cyprus_like()
        age_txt = ""
        if isinstance(age_min,int):
            age_txt = f", üïì {age_min // 60}—á –Ω–∞–∑–∞–¥" if age_min > 180 else f", üïì {age_min} –º–∏–Ω –Ω–∞–∑–∞–¥"
        if isinstance(kp_val,(int,float)):
            P.append(f"üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –ö—Ä {kp_val:.1f} ({kp_status}{age_txt})")
        else:
            P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –ö—Ä –Ω/–¥")

        sw = get_solar_wind() or {}
        bz, bt, v, n = sw.get("bz"), sw.get("bt"), sw.get("speed_kms"), sw.get("density")
        wind_status = sw.get("status", "–Ω/–¥")
        parts=[]
        if isinstance(bz,(int,float)): parts.append(f"Bz {bz:.1f} nT")
        if isinstance(bt,(int,float)): parts.append(f"Bt {bt:.1f} nT")
        if isinstance(v,(int,float)):  parts.append(f"v {v:.0f} –∫–º/—Å")
        if isinstance(n,(int,float)):  parts.append(f"n {n:.1f} —Å–º‚Åª¬≥")
        if parts: P.append("üå¨Ô∏è –°–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä: " + ", ".join(parts) + f" ‚Äî {wind_status}")
        P.append("‚Äî‚Äî‚Äî")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    theme = (
        "–ø–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞" if storm.get("warning") else
        ("–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if (SHOW_SPACE and _kp_cyprus_like()[0] and _kp_cyprus_like()[0] >= 5) else
         ("–ø–ª–æ—Ö–æ–π –≤–æ–∑–¥—É—Ö" if (SHOW_AIR and _is_air_bad(air)[0]) else "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å"))
    )
    for t in safe_tips(theme):
        P.append(t)

    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(base, region_name)}")
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_common_post(
    bot: Bot,
    chat_id: int,
    region_name: str,
    sea_label: str,
    sea_cities,
    other_label: str,
    other_cities,
    tz: Union[pendulum.Timezone, str],
) -> None:
    msg = build_message(region_name, sea_label, sea_cities, other_label, other_cities, tz)
    await bot.send_message(chat_id=chat_id, text=msg, parse_mode=constants.ParseMode.HTML, disable_web_page_preview=True)

async def main_common(
    bot: Bot,
    chat_id: int,
    region_name: str,
    sea_label: str,
    sea_cities,
    other_label: str,
    other_cities,
    tz: Union[pendulum.Timezone, str],
) -> None:
    await send_common_post(
        bot=bot,
        chat_id=chat_id,
        region_name=region_name,
        sea_label=sea_label,
        sea_cities=sea_cities,
        other_label=other_label,
        other_cities=other_cities,
        tz=tz,
    )

__all__ = [
    "build_message",
    "send_common_post",
    "main_common",
    "pick_header_metrics_for_offset",
    "storm_flags_for_offset",
]
