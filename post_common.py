#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_common.py  ‚Ä¢  –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–æ–≤.

–°–æ–¥–µ—Ä–∂–∏—Ç:
  - –ë–ª–æ–∫ –ø–æ–≥–æ–¥—ã (—Ç–µ–º–ø. –≤–æ–∑–¥—É—Ö–∞, –æ–±–ª–∞—á–Ω–æ—Å—Ç—å, –≤–µ—Ç–µ—Ä, –¥–∞–≤–ª–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–¥–æ–º).
  - –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ WMO-–∫–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–≤–µ—Å—Ç–∏ 5 —Å–∞–º—ã—Ö —Ç—ë–ø–ª—ã—Ö/—Ö–æ–ª–æ–¥–Ω—ã—Ö).
  - –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –∏ –ø—ã–ª—å—Ü–∞.
  - –®—É–º–∞–Ω–æ–≤—Å–∫–∏–π —Ä–µ–∑–æ–Ω–∞–Ω—Å (—Å –∫—Ä–∞—Å–Ω–æ/—Ñ–∏–æ–ª–µ—Ç/–∑–µ–ª—ë–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π).
  - –ë–ª–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª (–≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–∑—É, —Å–æ–≤–µ—Ç—ã –∏ VoC).
  - –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Ñ–∞–∫—Ç.
  - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Telegram.

–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
  –∏–∑ post_klg.py (–∏–ª–∏ post_cyprus.py) –≤—ã–∑—ã–≤–∞–µ–º:
      text = build_msg_common(
          location_name="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
          sea_label="–ë–∞–ª—Ç–∏–π—Å–∫–æ–µ –º–æ—Ä–µ",
          cities_for_rating=cities_dict,
          use_wmo=True
      )
      send_message_common(text)
"""

from __future__ import annotations
import os
import asyncio
import json
import logging
from pathlib import Path
from typing import Dict, Any, Tuple, Optional, List

import pendulum
import requests
from requests.exceptions import RequestException
from telegram import Bot, constants, error as tg_err

from weather import get_weather, fetch_tomorrow_temps
from air     import get_air, get_sst, get_kp
from pollen  import get_pollen
from schumann import get_schumann
from astro    import astro_events
from gpt      import gpt_blurb
from lunar    import get_day_lunar_info

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ       = pendulum.timezone("Asia/Nicosia")
TODAY    = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)

TOKEN_ENV     = "TELEGRAM_TOKEN"
CHANNEL_ENV   = "CHANNEL_ID"

# Open-Meteo WMO-–∫–æ–¥—ã ‚Üí –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)
WMO_DESC: Dict[int, str] = {
    0: "—è—Å–Ω–æ", 1: "—á–∞—Å—Ç. –æ–±–ª–∞—á.", 2: "–æ–±–ª–∞—á–Ω–æ", 3: "–ø–∞—Å–º—É—Ä–Ω–æ",
    45: "—Ç—É–º–∞–Ω", 48: "–∏–∑–º–æ—Ä–æ–∑—å", 51: "—Å–ª–∞–±. –º–æ—Ä–æ—Å—å",
    61: "–¥–æ–∂–¥—å", 71: "—Å–Ω–µ–≥", 95: "–≥—Ä–æ–∑–∞",
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}
def code_desc(code: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ WMO-–∫–æ–¥–∞ –ø–æ–≥–æ–¥—ã."""
    return WMO_DESC.get(code, "‚Äî")

def pressure_arrow(hourly: Dict[str, Any]) -> str:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—É—Ç–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É."""
    pr = hourly.get("surface_pressure", [])
    if len(pr) < 2:
        return "‚Üí"
    delta = pr[-1] - pr[0]
    if delta > 1.0:
        return "‚Üë"
    if delta < -1.0:
        return "‚Üì"
    return "‚Üí"

def schumann_line(sch: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è —à—É–º–∞–Ω–∞:
      üü¢ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è (–æ–∫–æ–ª–æ 7.8 –ì—Ü)
      üî¥ –Ω–∏–∂–µ –Ω–æ—Ä–º—ã (< 7.6)
      üü£ –≤—ã—à–µ –Ω–æ—Ä–º—ã (> 8.1)
    """
    if sch.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f   = sch["freq"]
    amp = sch["amp"]
    # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    if f < 7.6:
        emoji = "üî¥"
    elif f > 8.1:
        emoji = "üü£"
    else:
        emoji = "üü¢"
    return f"{emoji} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {sch['trend']}"

def get_schumann_with_fallback() -> Dict[str, Any]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —à—É–º–∞–Ω, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞.
    """
    sch = get_schumann()
    if sch.get("freq") is not None:
        sch["cached"] = False
        return sch

    cache_path = Path(__file__).parent / "schumann_hourly.json"
    if cache_path.exists():
        try:
            arr = json.loads(cache_path.read_text(encoding="utf-8"))
            if arr:
                last = arr[-1]
                pts  = arr[-24:]
                freqs = [p["freq"] for p in pts]
                if len(freqs) >= 2:
                    avg   = sum(freqs[:-1]) / (len(freqs)-1)
                    delta = freqs[-1] - avg
                    trend = "‚Üë" if delta >= 0.1 else "‚Üì" if delta <= -0.1 else "‚Üí"
                else:
                    trend = "‚Üí"
                return {
                    "freq":  round(last["freq"], 2),
                    "amp":   round(last["amp"], 1),
                    "trend": trend,
                    "cached": True,
                    "high":  False,
                }
        except Exception as e:
            logging.warning("Schumann cache parse error: %s", e)

    return sch

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg_common(
    location_name: str,
    sea_label:      str,
    cities_for_rating: Dict[str, Tuple[float, float]],
    use_wmo:        bool = True
) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:
    1) –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π –∏ –º–µ—Å—Ç–æ–º (–¥–ª—è –∑–∞–≤—Ç—Ä–∞).
    2) –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è (sea_label).
    3) –ü—Ä–æ–≥–Ω–æ–∑ (Limassol/Cyprus) –∏–ª–∏ (Kaliningrad). –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ.
    4) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤: 5 –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω/–Ω–æ—á—å, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ use_wmo ‚Äì WMO).
    5) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞, –ø—ã–ª—å—Ü–∞.
    6) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω.
    7) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è.
    8) –í—ã–≤–æ–¥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
    9) –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π —Ñ–∞–∫—Ç.
    """
    P: list[str] = []
    # ----- 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ -----
    P.append(f"<b>üåÖ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! {location_name}: –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({TOMORROW.format('DD.MM.YYYY')})</b>")

    # ----- 2. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è -----
    if (sst := get_sst()) is not None:
        P.append(f"üåä –¢–µ–º–ø. {sea_label}: {sst:.1f} ¬∞C")

    # ----- 3. –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ (–ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ª–æ–≤–∞—Ä—è) -----
    #    –ë–µ—Ä—ë–º —Å–∞–º—ã–π —Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ ¬´–≥–ª–∞–≤–Ω–æ–≥–æ¬ª –ø—Ä–æ–≥–Ω–æ–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    main_city = next(iter(cities_for_rating))
    lat, lon  = cities_for_rating[main_city]
    # –°—É—Ç–∫–∏ (–∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å)
    day_max, night_min = fetch_tomorrow_temps(lat, lon, tz=TZ.name)
    w = get_weather(lat, lon) or {}
    cur = w.get("current", {})

    avg_temp = (day_max + night_min) / 2 if (day_max is not None and night_min is not None) else cur.get("temperature", 0.0)
    wind_kmh = cur.get("windspeed",    cur.get("wind_speed", 0.0))
    wind_deg = cur.get("winddirection", cur.get("wind_deg", 0.0))
    press    = cur.get("pressure",    w.get("hourly", {}).get("surface_pressure", [0])[0])
    clouds   = cur.get("clouds",      w.get("hourly", {}).get("cloud_cover", [0])[0])

    from utils import compass, clouds_word  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –º–æ–¥—É–ª—å util
    P.append(
        f"üå°Ô∏è –°—Ä. —Ç–µ–º–ø: {avg_temp:.0f} ¬∞C ‚Ä¢ {clouds_word(clouds)} "
        f"‚Ä¢ üí® {wind_kmh:.1f} –∫–º/—á ({compass(wind_deg)}) "
        f"‚Ä¢ üíß {press:.0f} –≥–ü–∞ {pressure_arrow(w.get('hourly', {}))}"
    )
    P.append("‚Äî‚Äî‚Äî")

    # ----- 4. –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ -----
    temps: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in cities_for_rating.items():
        d, n = fetch_tomorrow_temps(la, lo, tz=TZ.name)
        if d is None:
            continue
        wcodes = get_weather(la, lo) or {}
        # –ü–æ–ª–µ daily.weathercode: [0] ‚Äì —Å–µ–≥–æ–¥–Ω—è, [1] ‚Äì –∑–∞–≤—Ç—Ä–∞
        code_tmr = None
        if use_wmo:
            code_tmr = wcodes.get("daily", {}).get("weathercode", [])
            code_tmr = code_tmr[1] if len(code_tmr) >= 2 else 0
        temps[city] = (d, n or d, code_tmr or 0)

    if temps:
        P.append(f"üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å, {'–ø–æ–≥–æ–¥–∞' if use_wmo else '—Ç–æ–ª—å–∫–æ —Ç–µ–º–ø'})</b>")
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω—ë–º (—É–±—ã–≤–∞–Ω–∏–µ), –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ –º–æ–∂–Ω–æ –≤—Ç–æ—Ä–∏—á–Ω–æ –ø–æ –Ω–æ—á–∏
        sorted_list = sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)
        for i, (city, (d, n, code)) in enumerate(sorted_list[:5]):
            wmo_text = f", {code_desc(code)}" if use_wmo else ""
            P.append(f"{medals[i]} {city}: {d:.1f}/{n:.1f} ¬∞C{wmo_text}")
        P.append("‚Äî‚Äî‚Äî")

    # ----- 5. –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –∏ –ø—ã–ª—å—Ü–∞ -----
    from utils import AIR_EMOJI, pm_color
    air = get_air() or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | "
             f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")

    if (pollen := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {pollen['tree']} | –¢—Ä–∞–≤—ã: {pollen['grass']} | "
                 f"–°–æ—Ä–Ω—è–∫–∏: {pollen['weed']} ‚Äî —Ä–∏—Å–∫ {pollen['risk']}")
    P.append("‚Äî‚Äî‚Äî")

    # ----- 6. –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ –∏ –®—É–º–∞–Ω -----
    kp, kp_state = get_kp()
    from utils import kp_emoji
    if kp is not None:
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({kp_state})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # ----- 7. –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è -----
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    for line in astro_events():
        P.append(line)
    # –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å VoC –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ astro_events —É–∂–µ –µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç)
    P.append("‚Äî‚Äî‚Äî")

    # ----- 8. GPT-–≤—ã–≤–æ–¥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -----
    summary, tips = gpt_blurb("–ø–æ–≥–æ–¥–∞")
    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    for t in tips:
        P.append(f"‚Ä¢ {t}")
    P.append("‚Äî‚Äî‚Äî")

    # ----- 9. –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π —Ñ–∞–∫—Ç -----
    from utils import get_fact
    P.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(P)


async def send_message_common(text: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ Telegram.
    –û–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:
      - TELEGRAM_TOKEN
      - CHANNEL_ID
    """
    token   = os.getenv(TOKEN_ENV, "")
    chat_id = os.getenv(CHANNEL_ENV, "")
    if not token or not chat_id:
        logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –∏–ª–∏ CHANNEL_ID")
        return

    bot = Bot(token=token)
    try:
        await bot.send_message(
            chat_id=int(chat_id),
            text=text,
            parse_mode=constants.ParseMode.HTML,
            disable_web_page_preview=True
        )
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise

# –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ:
if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ–ª—è –∑–∞–¥–∞—ë–º, –Ω–æ send –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º)
    txt = build_msg_common(
        location_name="–õ–æ–∫–µ–π—à–Ω —Ç–µ—Å—Ç",
        sea_label="–¢–µ—Å—Ç–æ–≤–æ–µ –º–æ—Ä–µ",
        cities_for_rating={"–ì–æ—Ä–æ–¥1": (0.0, 0.0)},
        use_wmo=False
    )
    print(txt)