# post_common.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—â–∏–π –¥–≤–∏–∂–æ–∫ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ VayboMeter-–±–æ—Ç–∞.
‚Ä¢ –ß–∏—Ç–∞–µ—Ç API (weather, air, pollen, –®—É–º–∞–Ω, astro‚Ä¶)
‚Ä¢ –§–æ—Ä–º–∏—Ä—É–µ—Ç HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –®–ª—ë—Ç –≤ Telegram

–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ–±—è–∑–∞–Ω:
1) –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å build_msg() –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
2) –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é build_city_blocks()
3) –ø–µ—Ä–µ–¥–∞—Ç—å TELEGRAM_TOKEN / CHANNEL_ID
"""

from __future__ import annotations
import os, asyncio, json, logging
from pathlib import Path
from typing import Dict, Any, List, Tuple, Optional

import pendulum, requests
from telegram import Bot, error as tg_err
from requests.exceptions import RequestException

# ‚îÄ‚îÄ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ (–æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from utils    import compass, clouds_word, get_fact, AIR_EMOJI, pm_color, kp_emoji
from weather  import get_weather, fetch_tomorrow_temps
from air      import get_air, get_sst, get_kp
from pollen   import get_pollen
from schumann import get_schumann
from astro    import astro_events
from gpt      import gpt_blurb
from lunar    import get_day_lunar_info

# ‚îÄ‚îÄ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ          = pendulum.timezone("Europe/Kaliningrad")   # –¥–µ—Ñ–æ–ª—Ç; —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
TODAY       = pendulum.now(TZ).date()
TOMORROW    = TODAY.add(days=1)

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ MINI-utilities (–Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
WMO_DESC = {
    0: "—è—Å–Ω–æ", 1: "—á–∞—Å—Ç. –æ–±–ª–∞—á.", 2: "–æ–±–ª–∞—á–Ω–æ", 3: "–ø–∞—Å–º—É—Ä–Ω–æ",
    45: "—Ç—É–º–∞–Ω", 48: "–∏–∑–º–æ—Ä–æ–∑—å", 51: "–º–æ—Ä–æ—Å—å", 61: "–¥–æ–∂–¥—å",
    71: "—Å–Ω–µ–≥", 95: "–≥—Ä–æ–∑–∞",
}
def code_desc(code:int) -> str: return WMO_DESC.get(code, "‚Äî")

def pressure_arrow(hourly: Dict[str, Any]) -> str:
    pr = hourly.get("surface_pressure", [])
    if len(pr) < 2: return "‚Üí"
    delta = pr[-1]-pr[0]
    return "‚Üë" if delta>1 else "‚Üì" if delta<-1 else "‚Üí"

def schumann_line(s: Dict[str, Any]) -> str:
    if s.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f = s["freq"]; amp = s["amp"]
    emoji = "üî¥" if f<7.6 else "üü£" if f>8.1 else "üü¢"
    return f"{emoji} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {s.get('trend','‚Üí')}"

def get_schumann_with_fallback() -> Dict[str, Any]:
    sch = get_schumann()
    if sch.get("freq") is not None:
        sch["trend"]="‚Üí"; return sch
    fp = Path(__file__).parent / "schumann_hourly.json"
    if fp.exists():
        try:
            arr=json.loads(fp.read_text())
            last=arr[-1]; return {"freq":round(last['freq'],2),
                                  "amp":round(last['amp'],1),
                                  "trend":"‚Üí"}
        except Exception: pass
    return sch


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  –®–ê–ë–õ–û–ù –°–û–û–ë–©–ï–ù–ò–Ø ‚Äî –≤ –Ω—ë–º –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è build_city_blocks()
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg(region_name:str,
              city_blocks:str,
              culprit:str="–ø–æ–≥–æ–¥–∞") -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.

    Args:
        region_name: ¬´–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å¬ª (–¥–ª—è —à–∞–ø–∫–∏).
        city_blocks: —Ä–µ–∑—É–ª—å—Ç–∞—Ç build_city_blocks().
        culprit:     ¬´–≤–∏–Ω–æ–≤–Ω–∏–∫ –≤—ã–≤–æ–¥–∞¬ª –¥–ª—è GPT-–±–ª–æ–∫–∞.
    """
    P: List[str] = []
    P.append(f"<b>üåÖ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! {region_name}: –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ "
             f"({TOMORROW.format('DD.MM.YYYY')})</b>")

    # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (sst := get_sst()) is not None:
        P.append(f"üåä –¢–µ–º–ø. –º–æ—Ä—è: {sst:.1f} ¬∞C")

    # –≤—Å—Ç–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –≥–æ—Ä–æ–¥–æ–≤
    P.extend(city_blocks.splitlines())
    P.append("‚Äî‚Äî‚Äî")

    # –≤–æ–∑–¥—É—Ö & –ø—ã–ª—å—Ü–∞
    air = get_air() or {}; lvl = air.get("lvl","–Ω/–¥")
    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | "
             f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")
    if (pol := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {pol['tree']} | –¢—Ä–∞–≤—ã: {pol['grass']} | "
                 f"–°–æ—Ä–Ω—è–∫–∏: {pol['weed']} ‚Äî —Ä–∏—Å–∫ {pol['risk']}")
    P.append("‚Äî‚Äî‚Äî")

    # –∫–æ—Å–º–æ-–ø–æ–≥–æ–¥–∞
    kp,state = get_kp()
    P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({state})" if kp else "üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")
    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    for ln in astro_events():
        P.append(ln)
    P.append("‚Äî‚Äî‚Äî")

    # GPT-–±–ª–æ–∫
    summary, tips = gpt_blurb(culprit)
    summary = summary.replace("–≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥–∞", "–≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥—É")
    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    tips = tips + ["–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å üòä"]*(3-len(tips))
    for t in tips[:3]: P.append(t)
    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(TOMORROW)}")
    return "\n".join(P)


# ‚îÄ‚îÄ telegram helper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def tg_send(token:str, chat_id:int, text:str) -> None:
    bot = Bot(token=token)
    try:
        await bot.send_message(chat_id, text,
                               parse_mode="HTML",
                               disable_web_page_preview=True)
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)


# ------------- —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç: ---------------
# ‚Ä¢ build_msg
# ‚Ä¢ tg_send
# –∏ –æ–±—è–∑–∞–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å build_city_blocks()
# ---------------------------------------------------------------
