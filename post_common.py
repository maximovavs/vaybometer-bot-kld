#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
post_common.py  ‚Ä¢ –æ–±—â–∏–π ¬´–¥–≤–∏–∂–æ–∫¬ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.

–°–æ–¥–µ—Ä–∂–∏—Ç:
  - –ü–æ–≥–æ–¥–∞ (Open-Meteo)
  - –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å, WMO-–∫–æ–¥—ã)
  - –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –∏ –ø—ã–ª—å—Ü–∞
  - –®—É–º–∞–Ω —Å —Ü–≤–µ—Ç–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
  - –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (—Ñ–∞–∑–∞, VOC, —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞, next_event)
  - GPT-–±–ª–æ–∫ (–≤—ã–≤–æ–¥ + —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞)
  - –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
  - –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ ¬´–ø–æ–≥–æ–¥–∞¬ª
  - CTA: ¬´–ê –≤—ã —É–∂–µ —Ä–µ—à–∏–ª–∏, –∫–∞–∫ –ø—Ä–æ–≤–µ–¥—ë—Ç–µ –≤–µ—á–µ—Ä? üåÜ¬ª
"""

from __future__ import annotations
import os
import asyncio
import logging
import json
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple

import requests
import pendulum
from requests.exceptions import RequestException
from telegram import Bot, constants, error as tg_err

from utils import (
    compass, clouds_word, get_fact,
    AIR_EMOJI, pm_color, kp_emoji
)
from weather import get_weather, fetch_tomorrow_temps
from air     import get_air, get_sst, get_kp
from pollen  import get_pollen
from schumann import get_schumann
from astro   import astro_events
from gpt     import gpt_blurb

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Constants ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ       = pendulum.timezone("Asia/Nicosia")
TODAY    = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)

# –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, —Ç–æ –°–û–ë–ò–†–ê–ô–¢–ï –°–í–û–ò CITIES –≤ post_klg.py
CITIES: Dict[str, Tuple[float, float]] = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
    "Troodos" : (34.916, 32.823),
}

POLL_QUESTION = "–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î"
POLL_OPTIONS  = [
    "üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏",
    "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
    "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)",
    "ü§í –í—Å—ë –ø–ª–æ—Ö–æ",
]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ WMO Weather Interpretation Codes ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
WMO_DESC = {
    0:  "—è—Å–Ω–æ",
    1:  "—á–∞—Å—Ç. –æ–±–ª–∞—á.",
    2:  "–æ–±–ª–∞—á–Ω–æ",
    3:  "–ø–∞—Å–º—É—Ä–Ω–æ",
    45: "—Ç—É–º–∞–Ω",
    48: "–∏–∑–º–æ—Ä–æ–∑—å",
    51: "—Å–ª–∞–±. –º–æ—Ä–æ—Å—å",
    61: "–¥–æ–∂–¥—å",
    71: "—Å–Ω–µ–≥",
    95: "–≥—Ä–æ–∑–∞",
    # –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é
}

def code_desc(code: int) -> str:
    return WMO_DESC.get(code, "‚Äî")


def pressure_arrow(hourly: Dict[str, Any]) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –¥–∞–≤–ª–µ–Ω–∏—è –ø–æ –¥–∞–Ω–Ω—ã–º hourly Open-Meteo.
    –ï—Å–ª–∏ –Ω–∞ –∫–æ–Ω–µ—Ü —Å—É—Ç–æ–∫ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤—ã—à–µ –Ω–∞—á–∞–ª–∞ > +1 ‚Üí "‚Üë",
    –Ω–∏–∂–µ < -1 ‚Üí "‚Üì", –∏–Ω–∞—á–µ "‚Üí".
    """
    pr = hourly.get("surface_pressure", [])
    if len(pr) < 2:
        return "‚Üí"
    delta = pr[-1] - pr[0]
    if delta > 1.0:
        return "‚Üë"
    if delta < -1.0:
        return "‚Üì"
    return "‚Üí"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Schumann display ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def schumann_line(sch: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –®—É–º–∞–Ω–∞ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º:
      üî¥  f < 7.6
      üü¢  7.6 ‚â§ f ‚â§ 8.1
      üü£  f > 8.1
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ (‚Üë/‚Üì/‚Üí).
    """
    if sch.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f   = sch["freq"]
    amp = sch["amp"]
    trend = sch.get("trend", "‚Üí")
    if f < 7.6:
        emoji = "üî¥"
    elif f > 8.1:
        emoji = "üü£"
    else:
        emoji = "üü¢"
    return f"{emoji} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {trend}"


def get_schumann_with_fallback() -> Dict[str, Any]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (get_schumann()).
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –±–µ—Ä–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ schumann_hourly.json
    –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 24 —á–∞—Å–∞–º.
    """
    sch = get_schumann()
    if sch.get("freq") is not None:
        sch["cached"] = False
        return sch

    cache_path = Path(__file__).parent / "schumann_hourly.json"
    if cache_path.exists():
        try:
            arr = json.loads(cache_path.read_text())
            if arr:
                last = arr[-1]
                pts  = arr[-24:]
                freqs = [p["freq"] for p in pts if "freq" in p]
                if len(freqs) >= 2:
                    avg   = sum(freqs[:-1]) / max(1, len(freqs)-1)
                    delta = freqs[-1] - avg
                    trend = "‚Üë" if delta >= 0.1 else "‚Üì" if delta <= -0.1 else "‚Üí"
                else:
                    trend = "‚Üí"
                return {
                    "freq":  round(last["freq"], 2),
                    "amp":   round(last["amp"], 1),
                    "trend": trend,
                    "cached": True,
                    "high":  False,
                }
        except Exception as e:
            logging.warning("Schumann cache parse error: %s", e)

    return sch


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Main message builder ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg_common(
    region_name: str,
    cities: Dict[str, Tuple[float, float]],
    sea_label: str = "–º–æ—Ä—è",
    sea_coords: Tuple[float, float] | None = None,
) -> str:
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      region_name  ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ ("–ö–∏–ø—Ä–µ", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏" –∏ —Ç. –¥.)
      cities       ‚Äî —Å–ª–æ–≤–∞—Ä—å {¬´–ò–º—è –≥–æ—Ä–æ–¥–∞¬ª: (lat, lon)}
      sea_label    ‚Äî —Å–ª–æ–≤–æ –¥–ª—è ¬´–≤–æ–¥–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏¬ª ("–º–æ—Ä—è", "–º–æ—Ä–µ", "–æ–∑–µ—Ä–∞" –∏ —Ç. –ø.)
      sea_coords   ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (lat, lon) –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã
                      (–µ—Å–ª–∏ None, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É ¬´–¢–µ–º–ø. –º–æ—Ä—è¬ª).
    """
    P: List[str] = []

    # 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({TOMORROW.format('DD.MM.YYYY')})</b>")

    # 2) –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ¬´–º–æ—Ä—è¬ª
    if sea_coords:
        sst = get_sst(*sea_coords)
        if sst is not None:
            P.append(f"üåä –¢–µ–º–ø. {sea_label}: {sst:.1f} ¬∞C")

    # 3) –û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ cities)
    #    (–Ω–∞–ø—Ä–∏–º–µ—Ä: Limassol –¥–ª—è –ö–∏–ø—Ä–∞, Kaliningrad –¥–ª—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞)
    main_city = list(cities.keys())[0]
    lat_main, lon_main = cities[main_city]
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ min/max + —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏–∑ Open-Meteo
    day_max, night_min = fetch_tomorrow_temps(lat_main, lon_main, tz=TZ.name)
    w = get_weather(lat_main, lon_main) or {}
    cur = w.get("current", {}) or w.get("current_weather", {})

    if day_max is not None and night_min is not None:
        avg_temp = (day_max + night_min) / 2
    else:
        avg_temp = cur.get("temperature", 0)

    wind_kmh  = cur.get("windspeed") or cur.get("wind_speed") or 0
    wind_deg  = cur.get("winddirection") or cur.get("wind_deg") or 0
    press     = cur.get("pressure") or w.get("hourly", {}).get("surface_pressure", [1013])[0]
    clouds_pct = cur.get("clouds") or w.get("hourly", {}).get("cloud_cover", [0])[0]

    arrow = pressure_arrow(w.get("hourly", {}))
    P.append(
        f"üå°Ô∏è –°—Ä. —Ç–µ–º–ø: {avg_temp:.0f} ¬∞C ‚Ä¢ {clouds_word(clouds_pct)} "
        f"‚Ä¢ üí® {wind_kmh:.1f} –∫–º/—á ({compass(wind_deg)}) "
        f"‚Ä¢ üíß {press:.0f} –≥–ü–∞ {arrow}"
    )
    P.append("‚Äî‚Äî‚Äî")

    # 4) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å, WMO-–∫–æ–¥)
    temps: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in cities.items():
        dd, nn = fetch_tomorrow_temps(la, lo, tz=TZ.name)
        if dd is None:
            continue
        wcodes = get_weather(la, lo) or {}
        # –±–µ—Ä–µ–º daily.weathercode: [—Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞], –ø–æ—ç—Ç–æ–º—É [1]
        code_tmr = wcodes.get("daily", {}).get("weathercode", [])[1] if wcodes else 0
        temps[city] = (dd, nn or dd, code_tmr)

    if temps:
        P.append(f"üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ ({region_name}, –¥–Ω./–Ω–æ—á—å, –ø–æ–≥–æ–¥–∞)</b>")
        medals = ["ü•á","ü•à","ü•â","4Ô∏è‚É£","5Ô∏è‚É£"]
        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ (—É–±—ã–≤.), –±–µ—Ä–µ–º —Ç–æ–ø-5
        sorted_list = sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)[:5]
        for i, (city, (dd, nn, code)) in enumerate(sorted_list):
            P.append(f"{medals[i]} {city}: {dd:.1f}/{nn:.1f} ¬∞C, {code_desc(code)}")
        P.append("‚Äî‚Äî‚Äî")

    # 5) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –∏ –ø—ã–ª—å—Ü–∞
    air = get_air() or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(
        f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | "
        f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}"
    )
    if (pollen := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(
            f"–î–µ—Ä–µ–≤—å—è: {pollen['tree']} | "
            f"–¢—Ä–∞–≤—ã: {pollen['grass']} | "
            f"–°–æ—Ä–Ω—è–∫–∏: {pollen['weed']} ‚Äî —Ä–∏—Å–∫ {pollen['risk']}"
        )
    P.append("‚Äî‚Äî‚Äî")

    # 6) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ –∏ –®—É–º–∞–Ω
    kp, kp_state = get_kp()
    if kp is not None:
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({kp_state})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # 7) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (—Ñ–∞–∑–∞ –õ—É–Ω—ã, VOC, —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞, next_event)
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    for line in astro_events():
        P.append(line)
    P.append("‚Äî‚Äî‚Äî")

    # 8) GPT-–±–ª–æ–∫ (¬´–í—ã–≤–æ–¥¬ª + ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª)
    culprit = "–ø–æ–≥–æ–¥–∞"
    summary, tips = gpt_blurb(culprit)
    # –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–ª–æ–Ω—è–µ–º —Å–ª–æ–≤–æ ¬´–ø–æ–≥–æ–¥–∞¬ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞/—è–∑—ã–∫–∞
    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    for tip in tips:
        P.append(f"‚Ä¢ {tip}")
    P.append("‚Äî‚Äî‚Äî")

    # 9) –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
    P.append(f"üìö {get_fact(TOMORROW)}")

    # 10) CTA
    P.append("‚Äî‚Äî‚Äî")
    P.append("–ê –≤—ã —É–∂–µ —Ä–µ—à–∏–ª–∏, –∫–∞–∫ –ø—Ä–æ–≤–µ–¥—ë—Ç–µ –≤–µ—á–µ—Ä? üåÜ")

    return "\n".join(P)


async def send_common_post(
    bot: Bot,
    region_name: str,
    cities: Dict[str, Tuple[float, float]],
    sea_label: str = "–º–æ—Ä—è",
    sea_coords: Tuple[float, float] | None = None,
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API Telegram.
    """
    text = build_msg_common(region_name, cities, sea_label, sea_coords)
    try:
        await bot.send_message(
            chat_id=CHAT_ID,
            text=text,
            parse_mode=constants.ParseMode.HTML,
            disable_web_page_preview=True,
        )
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise


async def send_poll_if_friday(bot: Bot) -> None:
    """
    –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –æ–ø—Ä–æ—Å –≤ –ø—è—Ç–Ω–∏—Ü—É.
    """
    if pendulum.now(TZ).weekday() == 4:
        try:
            await bot.send_poll(
                CHAT_ID,
                question=POLL_QUESTION,
                options=POLL_OPTIONS,
                is_anonymous=False,
                allows_multiple_answers=False
            )
        except tg_err.TelegramError as e:
            logging.warning("Poll send error: %s", e)


async def main_common(
    region_name: str,
    cities: Dict[str, Tuple[float, float]],
    sea_label: str = "–º–æ—Ä—è",
    sea_coords: Tuple[float, float] | None = None,
) -> None:
    bot = Bot(token=os.getenv("TELEGRAM_TOKEN") or "")
    await send_common_post(bot, region_name, cities, sea_label, sea_coords)
    await send_poll_if_friday(bot)


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä \"–ª–æ–∫–∞–ª—å–Ω–æ–≥–æ\" –∑–∞–ø—É—Å–∫–∞:
    # –î–ª—è –ö–∏–ø—Ä–∞:
    asyncio.run(main_common(
        region_name="–ö–∏–ø—Ä–µ",
        cities=CITIES,
        sea_label="–º–æ—Ä—è",
        sea_coords=(34.707, 33.022),
    ))