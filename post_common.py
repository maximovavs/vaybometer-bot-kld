#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_common.py ‚Äî VayboMeter (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥).

‚Ä¢ –ú–æ—Ä–µ, –ø—Ä–æ–≥–Ω–æ–∑ –ö—ë–Ω–∏–≥–∞ (–¥–µ–Ω—å/–Ω–æ—á—å, –º/—Å, RH min‚Äìmax, –¥–∞–≤–ª–µ–Ω–∏–µ)
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –≥–æ—Ä–æ–¥–æ–≤ (d/n, –∫–æ–¥ –ø–æ–≥–æ–¥—ã —Å–ª–æ–≤–∞–º–∏ + üåä)
‚Ä¢ Air (+ üî• –ó–∞–¥—ã–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∏–∑–∫–æ–µ), –ø—ã–ª—å—Ü–∞, —Ä–∞–¥–∏–∞—Ü–∏—è
‚Ä¢ Kp, –®—É–º–∞–Ω
‚Ä¢ –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (–∑–Ω–∞–∫ –∫–∞–∫ ‚ôà ‚Ä¶ ‚ôì)
‚Ä¢ ¬´–í–∏–Ω–∏—Ç–µ ‚Ä¶¬ª, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ñ–∞–∫—Ç –¥–Ω—è
"""

from __future__ import annotations
import asyncio
import json
import logging
from pathlib import Path
from typing import Any, Dict, List, Tuple, Optional

import pendulum
from telegram import Bot, constants

from utils import (
    compass, clouds_word, get_fact, AIR_EMOJI, pm_color, kp_emoji,
    kmh_to_ms, smoke_index, pressure_trend, _get,
)
from weather     import get_weather, fetch_tomorrow_temps, day_night_stats
import air as airmod                       # –º–æ–∂–µ—Ç –±—ã—Ç—å ¬´—Å—Ç–∞—Ä–∞—è¬ª –≤–µ—Ä—Å–∏—è ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –º—è–≥–∫–æ
from pollen      import get_pollen
from schumann    import get_schumann
from astro       import astro_events
from gpt         import gpt_blurb
from radiation   import get_radiation
from settings_klg import SEA_SST_COORD     # —Ç–æ—á–∫–∞ –≤ –∑–∞–ª–∏–≤–µ

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
KLD_LAT, KLD_LON = 54.710426, 20.452214

# –ú—ç–ø–ø–∏–Ω–≥ WMO-–∫–æ–¥–æ–≤ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç+—ç–º–æ–¥–∑–∏
WMO_DESC = {
    0:"‚òÄÔ∏è —è—Å–Ω–æ", 1:"‚õÖ —á.–æ–±–ª", 2:"‚òÅÔ∏è –æ–±–ª", 3:"üå• –ø–∞—Å–º",
    45:"üå´ —Ç—É–º–∞–Ω", 48:"üå´ –∏–∑–º–æ—Ä–æ–∑—å", 51:"üå¶ –º–æ—Ä–æ—Å—å",
    61:"üåß –¥–æ–∂–¥—å", 71:"‚ùÑÔ∏è —Å–Ω–µ–≥", 95:"‚õà –≥—Ä–æ–∑–∞",
}
def code_desc(c: Any) -> Optional[str]:
    return WMO_DESC.get(int(c)) if isinstance(c, (int, float)) and int(c) in WMO_DESC else None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –Ω–∞–¥ air.* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _get_sst_safe(lat: float, lon: float) -> Optional[float]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å SST –∏–∑ airmod.get_sst(); –µ—Å–ª–∏ –≤ –º–æ–¥—É–ª–µ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç ‚Äî
    –±–µ—Ä—ë–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Open‚ÄëMeteo Marine –ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É –ø—Ä–æ—à–µ–¥—à–µ–º—É —á–∞—Å—É.
    """
    try:
        if hasattr(airmod, "get_sst"):
            return airmod.get_sst(lat, lon)  # type: ignore[attr-defined]
    except Exception as e:
        logging.warning("air.get_sst error: %s", e)

    # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫ (Open‚ÄëMeteo Marine)
    try:
        j = _get(
            "https://marine-api.open-meteo.com/v1/marine",
            latitude=lat, longitude=lon,
            hourly="sea_surface_temperature", timezone="UTC",
        )
        if not j or "hourly" not in j:
            return None
        h = j["hourly"]
        times = h.get("time", []) or []
        vals  = h.get("sea_surface_temperature", []) or []
        if not times or not vals or len(times) != len(vals):
            return None
        # –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–æ—à–µ–¥—à–∏–π —á–∞—Å UTC
        import time as _t
        now_iso = _t.strftime("%Y-%m-%dT%H:00", _t.gmtime())
        idxs = [i for i, t in enumerate(times) if isinstance(t, str) and t <= now_iso]
        idx = max(idxs) if idxs else 0
        v = vals[idx]
        return float(v) if isinstance(v, (int, float)) else None
    except Exception as e:
        logging.warning("local SST fallback error: %s", e)
        return None

def _get_air_safe(lat: float, lon: float) -> Dict[str, Any]:
    try:
        if hasattr(airmod, "get_air"):
            return airmod.get_air(lat, lon)  # type: ignore[attr-defined]
    except Exception as e:
        logging.warning("air.get_air error: %s", e)
    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç
    return {"lvl": "–Ω/–¥", "aqi": "–Ω/–¥", "pm25": None, "pm10": None}

def _get_kp_safe() -> Tuple[Optional[float], str]:
    try:
        if hasattr(airmod, "get_kp"):
            return airmod.get_kp()  # type: ignore[attr-defined]
    except Exception as e:
        logging.warning("air.get_kp error: %s", e)
    return None, "–Ω/–¥"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®—É–º–∞–Ω ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_schumann_with_fallback() -> Dict[str, Any]:
    sch = get_schumann()
    if sch.get("freq") is not None:
        sch["cached"] = False
        return sch
    cache = Path(__file__).parent / "schumann_hourly.json"
    if cache.exists():
        try:
            arr = json.loads(cache.read_text("utf-8"))
            if arr:
                last = arr[-1]; pts = arr[-24:]
                freqs = [p.get("freq") for p in pts if isinstance(p.get("freq"), (int, float))]
                trend = "‚Üí"
                if len(freqs) > 1:
                    avg = sum(freqs[:-1]) / (len(freqs) - 1)
                    d = freqs[-1] - avg
                    trend = "‚Üë" if d >= .1 else "‚Üì" if d <= -.1 else "‚Üí"
                return {
                    "freq": round(last.get("freq", 0.0), 2),
                    "amp": round(last.get("amp", 0.0), 1),
                    "trend": trend,
                    "cached": True
                }
        except Exception as e:
            logging.warning("Schumann cache err: %s", e)
    return sch

def schumann_line(s: Dict[str, Any]) -> str:
    if s.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f, amp = s["freq"], s["amp"]
    e = "üî¥" if f < 7.6 else "üü£" if f > 8.1 else "üü¢"
    return f"{e} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {s.get('trend','')}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∞–¥–∏–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def radiation_line(lat: float, lon: float) -> str | None:
    data = get_radiation(lat, lon) or {}
    dose = data.get("dose")
    if dose is None:
        return None
    if dose <= 0.15:
        emoji, lvl = "üü¢", "–Ω–∏–∑–∫–∏–π"
    elif dose <= 0.30:
        emoji, lvl = "üü°", "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π"
    else:
        emoji, lvl = "üî¥", "–≤—ã—Å–æ–∫–∏–π"
    return f"{emoji} –†–∞–¥–∏–∞—Ü–∏—è: {dose:.3f} ŒºSv/h ({lvl})"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–æ–¥–∏–∞–∫–∏ ‚Üí —Å–∏–º–≤–æ–ª—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ZODIAC = {
    "–û–≤–µ–Ω":"‚ôà","–¢–µ–ª–µ—Ü":"‚ôâ","–ë–ª–∏–∑–Ω–µ—Ü—ã":"‚ôä","–†–∞–∫":"‚ôã","–õ–µ–≤":"‚ôå",
    "–î–µ–≤–∞":"‚ôç","–í–µ—Å—ã":"‚ôé","–°–∫–æ—Ä–ø–∏–æ–Ω":"‚ôè","–°—Ç—Ä–µ–ª–µ—Ü":"‚ôê",
    "–ö–æ–∑–µ—Ä–æ–≥":"‚ôë","–í–æ–¥–æ–ª–µ–π":"‚ôí","–†—ã–±—ã":"‚ôì",
}
def zsym(s: str) -> str:
    for name, sym in ZODIAC.items():
        s = s.replace(name, sym)
    return s

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message(region_name: str, chat_id: int,
                  sea_label: str, sea_cities, other_label: str,
                  other_cities, tz: pendulum.Timezone) -> str:

    P: List[str] = []
    today = pendulum.now(tz).date()
    tom   = today.add(days=1)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ {region_name}: –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tom.format('DD.MM.YYYY')})</b>")

    # –ú–æ—Ä–µ (—Å—Ä–µ–¥–Ω—è—è SST –≤ —Ç–æ—á–∫–µ)
    sst = _get_sst_safe(*SEA_SST_COORD)
    P.append(f"üåä –¢–µ–º–ø. –º–æ—Ä—è (—Ü–µ–Ω—Ç—Ä –∑–∞–ª–∏–≤–∞): {sst:.1f} ¬∞C" if sst is not None
             else "üåä –¢–µ–º–ø. –º–æ—Ä—è (—Ü–µ–Ω—Ç—Ä –∑–∞–ª–∏–≤–∞): –Ω/–¥")

    # –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ ‚Äî –¥–µ–Ω—å/–Ω–æ—á—å, –∫–æ–¥ —Å–ª–æ–≤–∞–º–∏ (–µ—Å–ª–∏ –Ω–∞–¥—ë–∂–µ–Ω), –≤–µ—Ç–µ—Ä –º/—Å, RH min‚Äìmax, –¥–∞–≤–ª–µ–Ω–∏–µ
    stats = day_night_stats(KLD_LAT, KLD_LON, tz=tz.name)
    wm    = get_weather(KLD_LAT, KLD_LON) or {}
    cur   = wm.get("current", {}) or {}
    wcarr = (wm.get("daily", {}) or {}).get("weathercode", [])
    wc    = wcarr[1] if isinstance(wcarr, list) and len(wcarr) > 1 else cur.get("weathercode")
    wind_ms = kmh_to_ms(cur.get("windspeed"))
    rh_min = stats.get("rh_min"); rh_max = stats.get("rh_max")
    t_day_max = stats.get("t_day_max"); t_night_min = stats.get("t_night_min")

    # –¥–∞–≤–ª–µ–Ω–∏–µ: –±–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–µ (–∏–∑ current –∏–ª–∏ –∏–∑ hourly), –ø–ª—é—Å —Ç—Ä–µ–Ω–¥
    pressure_val = cur.get("pressure")
    if pressure_val is None:
        hp = (wm.get("hourly", {}) or {}).get("surface_pressure", [])
        if isinstance(hp, list) and hp:
            pressure_val = hp[-1]
    press_part = f"{int(round(pressure_val))} –≥–ü–∞ {pressure_trend(wm)}" if isinstance(pressure_val, (int, float)) else "–Ω/–¥"

    desc = code_desc(wc)  # –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å None ‚Äî —Ç–æ–≥–¥–∞ –Ω–µ –≤—ã–≤–æ–¥–∏–º
    kal_parts = [
        f"üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å {t_day_max:.0f}/{t_night_min:.0f} ¬∞C" if (t_day_max is not None and t_night_min is not None)
        else "üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å –Ω/–¥",
        desc or None,
        f"üí® {wind_ms:.1f} –º/—Å ({compass(cur.get('winddirection', 0))})" if wind_ms is not None else f"üí® –Ω/–¥ ({compass(cur.get('winddirection', 0))})",
        (f"üíß RH {rh_min:.0f}‚Äì{rh_max:.0f}%" if rh_min is not None and rh_max is not None else None),
        f"üîπ {press_part}",
    ]
    P.append(" ‚Ä¢ ".join([x for x in kal_parts if x]))
    P.append("‚Äî‚Äî‚Äî")

    # –ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ø‚Äë5)
    temps_sea: Dict[str, Tuple[float, float, int, float | None]] = {}
    for city, (la, lo) in sea_cities:
        tmax, tmin = fetch_tomorrow_temps(la, lo, tz=tz.name)
        if tmax is None:
            continue
        wcx = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wcx = wcx[1] if isinstance(wcx, list) and len(wcx) > 1 else 0
        temps_sea[city] = (tmax, tmin or tmax, wcx, _get_sst_safe(la, lo))
    if temps_sea:
        P.append(f"üéñÔ∏è <b>{sea_label}</b>")
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        for i, (city, (d, n, wcx, sst_c)) in enumerate(sorted(temps_sea.items(),
                                                              key=lambda kv: kv[1][0], reverse=True)[:5]):
            line = f"{medals[i]} {city}: {d:.1f}/{n:.1f}"
            descx = code_desc(wcx)
            if descx:
                line += f", {descx}"
            if sst_c is not None:
                line += f" üåä {sst_c:.1f}"
            P.append(line)
        P.append("‚Äî‚Äî‚Äî")

    # –¢—ë–ø–ª—ã–µ/—Ö–æ–ª–æ–¥–Ω—ã–µ (—Ç–æ–ø‚Äë3 / —Ç–æ–ø‚Äë3)
    temps_oth: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in other_cities:
        tmax, tmin = fetch_tomorrow_temps(la, lo, tz=tz.name)
        if tmax is None:
            continue
        wcx = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wcx = wcx[1] if isinstance(wcx, list) and len(wcx) > 1 else 0
        temps_oth[city] = (tmax, tmin or tmax, wcx)
    if temps_oth:
        P.append("üî• <b>–¢—ë–ø–ª—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0], reverse=True)[:3]:
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d:.1f}/{n:.1f}" + (f" {descx}" if descx else ""))
        P.append("‚ùÑÔ∏è <b>–•–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0])[:3]:
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d:.1f}/{n:.1f}" + (f" {descx}" if descx else ""))
        P.append("‚Äî‚Äî‚Äî")

    # Air + –ø—ã–ª—å—Ü–∞ + —Ä–∞–¥–∏–∞—Ü–∏—è
    air = _get_air_safe(KLD_LAT, KLD_LON) or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | "
             f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")
    em, lbl = smoke_index(air.get("pm25"), air.get("pm10"))
    if lbl != "–Ω–∏–∑–∫–æ–µ":
        P.append(f"üî• –ó–∞–¥—ã–º–ª–µ–Ω–∏–µ: {em} {lbl}")
    if (p := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {p['tree']} | –¢—Ä–∞–≤—ã: {p['grass']} | –°–æ—Ä–Ω—è–∫–∏: {p['weed']} ‚Äî —Ä–∏—Å–∫ {p['risk']}")
    if (rl := radiation_line(KLD_LAT, KLD_LON)):
        P.append(rl)
    P.append("‚Äî‚Äî‚Äî")

    # Kp + –®—É–º–∞–Ω
    kp, ks = _get_kp_safe()
    P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({ks})" if kp is not None else "üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")
    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    astro = astro_events(offset_days=1, show_all_voc=True)
    if astro:
        P.extend([zsym(line) for line in astro])
    else:
        P.append("‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî")
    P.append("‚Äî‚Äî‚Äî")

    # –í—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã
    culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if kp is not None and ks and ks.lower() == "–±—É—Ä—è" else "–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"
    P.append("üìú <b>–í—ã–≤–æ–¥</b>")
    P.append(f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    try:
        _, tips = gpt_blurb(culprit)
        for t in tips[:3]:
            P.append(t.strip())
    except Exception:
        P.append("‚Äî –±–æ–ª—å—à–µ –≤–æ–¥—ã, –º–µ–Ω—å—à–µ —Å—Ç—Ä–µ—Å—Å–∞, –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–æ–Ω")

    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(tom, region_name)}")
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_common_post(bot: Bot, chat_id: int, region_name: str,
                           sea_label: str, sea_cities, other_label: str,
                           other_cities, tz):
    msg = build_message(region_name, chat_id, sea_label, sea_cities,
                        other_label, other_cities, tz)
    await bot.send_message(chat_id=chat_id, text=msg,
                           parse_mode=constants.ParseMode.HTML,
                           disable_web_page_preview=True)

async def main_common(bot: Bot, chat_id: int, region_name: str,
                      sea_label: str, sea_cities, other_label: str,
                      other_cities, tz):
    await send_common_post(bot, chat_id, region_name, sea_label,
                           sea_cities, other_label, other_cities, tz)
