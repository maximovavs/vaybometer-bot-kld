#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_common.py ‚Äî VayboMeter (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥).

‚Ä¢ –ú–æ—Ä–µ, –ø—Ä–æ–≥–Ω–æ–∑ –ö—ë–Ω–∏–≥–∞ (–¥–µ–Ω—å/–Ω–æ—á—å, –º/—Å, RH min‚Äìmax, –¥–∞–≤–ª–µ–Ω–∏–µ)
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –≥–æ—Ä–æ–¥–æ–≤ (d/n, –∫–æ–¥ –ø–æ–≥–æ–¥—ã —Å–ª–æ–≤–∞–º–∏ + üåä)
‚Ä¢ Air (+ üî• –ó–∞–¥—ã–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∏–∑–∫–æ–µ), –ø—ã–ª—å—Ü–∞, —Ä–∞–¥–∏–∞—Ü–∏—è, Safecast
‚Ä¢ Kp, –®—É–º–∞–Ω (—Å —Ñ–æ–ª–ª–±—ç–∫–æ–º —á—Ç–µ–Ω–∏—è JSON; h7_amp/h7_spike)
‚Ä¢ –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (–∑–Ω–∞–∫ –∫–∞–∫ ‚ôà ‚Ä¶ ‚ôì; VoC > 5 –º–∏–Ω)
‚Ä¢ ¬´–í–∏–Ω–∏—Ç–µ ‚Ä¶¬ª, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ñ–∞–∫—Ç –¥–Ω—è
"""

from __future__ import annotations
import os
import re
import json
import math
import asyncio
import logging
from pathlib import Path
from typing import Any, Dict, List, Tuple, Optional

import pendulum
from telegram import Bot, constants

from utils       import compass, get_fact, AIR_EMOJI, pm_color, kp_emoji, kmh_to_ms, smoke_index
from weather     import get_weather, fetch_tomorrow_temps, day_night_stats
from air         import get_air, get_sst, get_kp
from pollen      import get_pollen
from radiation   import get_radiation
from astro       import astro_events
from gpt         import gpt_blurb
from settings_klg import SEA_SST_COORD            # —Ç–æ—á–∫–∞ –≤ –∑–∞–ª–∏–≤–µ

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
KLD_LAT, KLD_LON = 54.710426, 20.452214

# –ú—ç–ø–ø–∏–Ω–≥ WMO-–∫–æ–¥–æ–≤ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç+—ç–º–æ–¥–∑–∏
WMO_DESC = {
    0:"‚òÄÔ∏è —è—Å–Ω–æ", 1:"‚õÖ —á.–æ–±–ª", 2:"‚òÅÔ∏è –æ–±–ª", 3:"üå• –ø–∞—Å–º",
    45:"üå´ —Ç—É–º–∞–Ω", 48:"üå´ –∏–∑–º–æ—Ä–æ–∑—å", 51:"üå¶ –º–æ—Ä–æ—Å—å",
    61:"üåß –¥–æ–∂–¥—å", 71:"‚ùÑÔ∏è —Å–Ω–µ–≥", 95:"‚õà –≥—Ä–æ–∑–∞",
}
def code_desc(c: Any) -> str | None:
    return WMO_DESC.get(int(c)) if isinstance(c, (int, float)) and int(c) in WMO_DESC else None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®—É–º–∞–Ω: —á—Ç–µ–Ω–∏–µ JSON-–∏—Å—Ç–æ—Ä–∏–∏ (–æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _read_schumann_history() -> List[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏–∑ schumann_hourly.json (–º–æ–∂–µ—Ç –±—ã—Ç—å v1 –∏–ª–∏ v2).
    –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞:
      1) env SCHU_FILE
      2) ./schumann_hourly.json (—Ä—è–¥–æ–º —Å post_common.py)
      3) ../schumann_hourly.json (–∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ)
    """
    candidates: List[Path] = []
    env_path = os.getenv("SCHU_FILE")
    if env_path:
        candidates.append(Path(env_path))
    here = Path(__file__).parent
    candidates += [here / "schumann_hourly.json", here.parent / "schumann_hourly.json"]

    for p in candidates:
        try:
            if p.exists():
                txt = p.read_text("utf-8").strip()
                data = json.loads(txt) if txt else []
                if isinstance(data, list):
                    return data
        except Exception as e:
            logging.warning("Schumann history read error from %s: %s", p, e)
    return []

def _schumann_trend(values: List[float], delta: float = 0.1) -> str:
    """–°—Ç—Ä–µ–ª–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
    if not values:
        return "‚Üí"
    tail = values[-24:] if len(values) > 24 else values
    if len(tail) < 2:
        return "‚Üí"
    avg_prev = sum(tail[:-1]) / (len(tail) - 1)
    d = tail[-1] - avg_prev
    return "‚Üë" if d >= delta else "‚Üì" if d <= -delta else "‚Üí"

def get_schumann_with_fallback() -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –®—É–º–∞–Ω–∞:
      {"freq": 7.83|None, "amp": float|None, "trend": "‚Üë/‚Üí/‚Üì", "h7_amp": float|None, "h7_spike": bool|None, "cached": bool}
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON (—Å—Ç–∞—Ä—ã–π –∏ v2).
    """
    arr = _read_schumann_history()
    if not arr:
        return {"freq": None, "amp": None, "trend": "‚Üí", "h7_amp": None, "h7_spike": None, "cached": True}

    # –°–æ–±–∏—Ä–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—ã –¥–ª—è —Ç—Ä–µ–Ω–¥–∞, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∫–æ—Ä–¥
    amps: List[float] = []
    last: Optional[Dict[str, Any]] = None

    for rec in arr:
        if not isinstance(rec, dict):
            continue
        # v2 —Ñ–æ—Ä–º–∞—Ç: {"ts", "freq", "amp", "h7_amp", "h7_spike", "src", ...}
        if "freq" in rec and ("amp" in rec or "h7_amp" in rec):
            if isinstance(rec.get("amp"), (int, float)):
                amps.append(float(rec["amp"]))
            last = rec
        # —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–∫–ª—é—á–∏ –º–æ–≥–ª–∏ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
        elif "amp" in rec:
            try:
                amps.append(float(rec["amp"]))
            except Exception:
                pass
            last = rec

    trend = _schumann_trend(amps)

    if last is None:
        return {"freq": None, "amp": None, "trend": trend, "h7_amp": None, "h7_spike": None, "cached": True}

    freq = last.get("freq", 7.83) if isinstance(last.get("freq"), (int, float)) else 7.83
    amp = last.get("amp") if isinstance(last.get("amp"), (int, float)) else None
    h7_amp = last.get("h7_amp") if isinstance(last.get("h7_amp"), (int, float)) else None
    h7_spike = last.get("h7_spike") if isinstance(last.get("h7_spike"), bool) else None
    src = (last.get("src") or "").lower()
    cached = (src == "cache")

    return {"freq": freq, "amp": amp, "trend": trend, "h7_amp": h7_amp, "h7_spike": h7_spike, "cached": cached}

def schumann_line(s: Dict[str, Any]) -> str:
    """
    –†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞.
    –ü—Ä–∏–º–µ—Ä: üü¢ –®—É–º–∞–Ω: 7.83 –ì—Ü / 4.2 pT ‚Üë  (H7: 0.9 ‚ö°)
    """
    if s.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f = s["freq"]
    amp = s.get("amp")
    trend = s.get("trend", "‚Üí")
    h7_amp = s.get("h7_amp")
    h7_spike = s.get("h7_spike")

    # —ç–º–æ–¥–∑–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–µ (—É—Å–ª–æ–≤–Ω–æ)
    e = "üî¥" if f < 7.6 else "üü£" if f > 8.1 else "üü¢"

    base = f"{e} –®—É–º–∞–Ω: {float(f):.2f} –ì—Ü"
    if isinstance(amp, (int, float)):
        base += f" / {float(amp):.2f} pT {trend}"
    else:
        base += f" / –Ω/–¥ {trend}"

    if isinstance(h7_amp, (int, float)):
        base += f" ¬∑ H7 {h7_amp:.2f}"
        if isinstance(h7_spike, bool):
            base += " ‚ö°" if h7_spike else ""
    return base

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∞–¥–∏–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def radiation_line(lat: float, lon: float) -> str | None:
    data = get_radiation(lat, lon) or {}
    dose = data.get("dose")
    if dose is None:
        return None
    if dose <= 0.15:
        emoji, lvl = "üü¢", "–Ω–∏–∑–∫–∏–π"
    elif dose <= 0.30:
        emoji, lvl = "üü°", "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π"
    else:
        emoji, lvl = "üî¥", "–≤—ã—Å–æ–∫–∏–π"
    return f"{emoji} –†–∞–¥–∏–∞—Ü–∏—è: {dose:.3f} ŒºSv/h ({lvl})"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–∞–≤–ª–µ–Ω–∏–µ: –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ (—á—É–≤—Å—Ç–≤–∏—Ç. 0.3 –≥–ü–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def local_pressure_and_trend(wm: Dict[str, Any], threshold_hpa: float = 0.3) -> Tuple[Optional[int], str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–¥–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ü–∞ –æ–∫—Ä—É–≥–ª., —Å—Ç—Ä–µ–ª–∫–∞ —Ç—Ä–µ–Ω–¥–∞).
    –¢—Ä–µ–Ω–¥ —Å—á–∏—Ç–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–≤—É–º —Ç–æ—á–∫–∞–º surface_pressure (–µ—Å–ª–∏ –µ—Å—Ç—å) —Å –ø–æ—Ä–æ–≥–æ–º threshold_hpa.
    """
    # —Ç–µ–∫—É—â–µ–µ –∏–∑ current
    cur_p = (wm.get("current") or {}).get("pressure")
    if not isinstance(cur_p, (int, float)):
        hp = (wm.get("hourly", {}) or {}).get("surface_pressure", [])
        if isinstance(hp, list) and hp:
            cur_p = hp[-1]
            prev = hp[-2] if len(hp) > 1 else None
        else:
            prev = None
    else:
        # –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑ hourly
        hp = (wm.get("hourly", {}) or {}).get("surface_pressure", [])
        prev = hp[-1] if isinstance(hp, list) and hp else None

    arrow = "‚Üí"
    if isinstance(cur_p, (int, float)) and isinstance(prev, (int, float)):
        diff = float(cur_p) - float(prev)
        if diff >= threshold_hpa:
            arrow = "‚Üë"
        elif diff <= -threshold_hpa:
            arrow = "‚Üì"

    return (int(round(cur_p)) if isinstance(cur_p, (int, float)) else None, arrow)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Safecast (–≥–∏–±–∫–∏–π –ø–∞—Ä—Å–µ—Ä –ª–æ–∫–∞–ª—å–Ω—ã—Ö JSON) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _pick_latest_record(obj: Any) -> Optional[Dict[str, Any]]:
    if isinstance(obj, dict):
        if all(k in obj for k in ("pm25", "pm10")):
            return obj
        if "records" in obj and isinstance(obj["records"], list) and obj["records"]:
            return _pick_latest_record(obj["records"][-1])
    if isinstance(obj, list) and obj:
        return _pick_latest_record(obj[-1])
    return None

def _read_safecast_any(path: Path) -> Optional[Dict[str, Any]]:
    try:
        if not path.exists():
            return None
        data = json.loads(path.read_text("utf-8"))
        rec = _pick_latest_record(data)
        if not isinstance(rec, dict):
            return None
        out: Dict[str, Any] = {}
        for k in ("pm25", "pm10", "aqi", "voc_minutes", "voc", "time", "ts"):
            if k in rec:
                out[k] = rec[k]
        # –∏–Ω–æ–≥–¥–∞ —á–∏—Å–ª–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å—Ç—Ä–æ–∫–∞–º–∏
        for k in ("pm25", "pm10", "aqi", "voc_minutes"):
            if k in out and isinstance(out[k], str):
                try:
                    out[k] = float(out[k])
                except Exception:
                    pass
        return out or None
    except Exception as e:
        logging.warning("Safecast read error from %s: %s", path, e)
        return None

def get_safecast() -> Optional[Dict[str, Any]]:
    """
    –ò—Å—Ç–æ—á–Ω–∏–∫:
      1) env SAFECAST_FILE
      2) data/safecast_kaliningrad.json
      3) data/safecast_cyprus.json
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏: pm25, pm10, aqi (–µ—Å–ª–∏ –µ—Å—Ç—å), voc_minutes/voc (–µ—Å–ª–∏ –µ—Å—Ç—å).
    """
    paths: List[Path] = []
    if os.getenv("SAFECAST_FILE"):
        paths.append(Path(os.getenv("SAFECAST_FILE")))
    here = Path(__file__).parent
    paths += [here / "data" / "safecast_kaliningrad.json",
              here / "data" / "safecast_cyprus.json"]
    for p in paths:
        rec = _read_safecast_any(p)
        if rec:
            return rec
    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–æ–¥–∏–∞–∫–∏ ‚Üí —Å–∏–º–≤–æ–ª—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ZODIAC = {
    "–û–≤–µ–Ω":"‚ôà","–¢–µ–ª–µ—Ü":"‚ôâ","–ë–ª–∏–∑–Ω–µ—Ü—ã":"‚ôä","–†–∞–∫":"‚ôã","–õ–µ–≤":"‚ôå",
    "–î–µ–≤–∞":"‚ôç","–í–µ—Å—ã":"‚ôé","–°–∫–æ—Ä–ø–∏–æ–Ω":"‚ôè","–°—Ç—Ä–µ–ª–µ—Ü":"‚ôê",
    "–ö–æ–∑–µ—Ä–æ–≥":"‚ôë","–í–æ–¥–æ–ª–µ–π":"‚ôí","–†—ã–±—ã":"‚ôì",
}
def zsym(s: str) -> str:
    for name, sym in ZODIAC.items():
        s = s.replace(name, sym)
    return s

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message(region_name: str,
                  sea_label: str, sea_cities,
                  other_label: str, other_cities,
                  tz: pendulum.Timezone) -> str:

    P: List[str] = []
    today = pendulum.now(tz).date()
    tom   = today.add(days=1)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ {region_name}: –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tom.format('DD.MM.YYYY')})</b>")

    # (—Å—Ç—Ä–æ–∫–∞ ¬´–¢–µ–º–ø. –º–æ—Ä—è (—Ü–µ–Ω—Ç—Ä –∑–∞–ª–∏–≤–∞)¬ª ‚Äî —É–±—Ä–∞–Ω–∞ –ø–æ –ø–æ–∂–µ–ª–∞–Ω–∏—é)

    # –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ ‚Äî –¥–µ–Ω—å/–Ω–æ—á—å, –∫–æ–¥ —Å–ª–æ–≤–∞–º–∏ (–µ—Å–ª–∏ –Ω–∞–¥—ë–∂–µ–Ω), –≤–µ—Ç–µ—Ä –º/—Å, RH min‚Äìmax, –¥–∞–≤–ª–µ–Ω–∏–µ
    stats = day_night_stats(KLD_LAT, KLD_LON, tz=tz.name)
    wm    = get_weather(KLD_LAT, KLD_LON) or {}
    cur   = wm.get("current", {}) or {}
    wcarr = (wm.get("daily", {}) or {}).get("weathercode", [])
    wc    = wcarr[1] if isinstance(wcarr, list) and len(wcarr) > 1 else cur.get("weathercode")
    wind_ms = kmh_to_ms(cur.get("windspeed"))
    rh_min = stats.get("rh_min"); rh_max = stats.get("rh_max")
    t_day_max = stats.get("t_day_max"); t_night_min = stats.get("t_night_min")

    # –¥–∞–≤–ª–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–¥–æ–º ‚Üë/‚Üì/‚Üí (0.3 –≥–ü–∞)
    p_val, p_trend = local_pressure_and_trend(wm, threshold_hpa=0.3)
    press_part = f"{p_val} –≥–ü–∞ {p_trend}" if isinstance(p_val, int) else "–Ω/–¥"

    desc = code_desc(wc)  # –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å None ‚Äî —Ç–æ–≥–¥–∞ –Ω–µ –≤—ã–≤–æ–¥–∏–º
    kal_parts = [
        f"üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å {t_day_max:.0f}/{t_night_min:.0f} ¬∞C" if (t_day_max is not None and t_night_min is not None)
        else "üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å –Ω/–¥",
        desc or None,
        f"üí® {wind_ms:.1f} –º/—Å ({compass(cur.get('winddirection', 0))})" if wind_ms is not None else f"üí® –Ω/–¥ ({compass(cur.get('winddirection', 0))})",
        (f"üíß RH {rh_min:.0f}‚Äì{rh_max:.0f}%" if rh_min is not None and rh_max is not None else None),
        f"üîπ {press_part}",
    ]
    P.append(" ‚Ä¢ ".join([x for x in kal_parts if x]))
    P.append("‚Äî‚Äî‚Äî")

    # –ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ø‚Äë5)
    temps_sea: Dict[str, Tuple[float, float, int, float | None]] = {}
    for city, (la, lo) in sea_cities:
        tmax, tmin = fetch_tomorrow_temps(la, lo, tz=tz.name)
        if tmax is None:
            continue
        wcx = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wcx = wcx[1] if isinstance(wcx, list) and len(wcx) > 1 else 0
        temps_sea[city] = (tmax, tmin or tmax, wcx, get_sst(la, lo))
    if temps_sea:
        P.append(f"üéñÔ∏è <b>{sea_label}</b>")
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        for i, (city, (d, n, wcx, sst_c)) in enumerate(sorted(temps_sea.items(),
                                                              key=lambda kv: kv[1][0], reverse=True)[:5]):
            line = f"{medals[i]} {city}: {d:.1f}/{n:.1f}"
            descx = code_desc(wcx)
            if descx:
                line += f", {descx}"
            if sst_c is not None:
                line += f" üåä {sst_c:.1f}"
            P.append(line)
        P.append("‚Äî‚Äî‚Äî")

    # –¢—ë–ø–ª—ã–µ/—Ö–æ–ª–æ–¥–Ω—ã–µ (—Ç–æ–ø‚Äë3 / —Ç–æ–ø‚Äë3)
    temps_oth: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in other_cities:
        tmax, tmin = fetch_tomorrow_temps(la, lo, tz=tz.name)
        if tmax is None:
            continue
        wcx = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wcx = wcx[1] if isinstance(wcx, list) and len(wcx) > 1 else 0
        temps_oth[city] = (tmax, tmin or tmax, wcx)
    if temps_oth:
        P.append("üî• <b>–¢—ë–ø–ª—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0], reverse=True)[:3]:
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d:.1f}/{n:.1f}" + (f" {descx}" if descx else ""))
        P.append("‚ùÑÔ∏è <b>–•–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0])[:3]:
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d:.1f}/{n:.1f}" + (f" {descx}" if descx else ""))
        P.append("‚Äî‚Äî‚Äî")

    # Air + –ø—ã–ª—å—Ü–∞ + —Ä–∞–¥–∏–∞—Ü–∏—è + Safecast
    air = get_air(KLD_LAT, KLD_LON) or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | "
             f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")

    # –¥–æ–±–∞–≤–∫–∞ –∏–∑ Safecast (–µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    sc = get_safecast()
    if sc:
        parts = []
        if isinstance(sc.get("pm25"), (int, float)):
            parts.append(f"PM‚ÇÇ.‚ÇÖ {float(sc['pm25']):.0f}")
        if isinstance(sc.get("pm10"), (int, float)):
            parts.append(f"PM‚ÇÅ‚ÇÄ {float(sc['pm10']):.0f}")
        if isinstance(sc.get("aqi"), (int, float)):
            parts.append(f"AQI {int(round(sc['aqi']))}")
        if parts:
            P.append("üß™ Safecast: " + " | ".join(parts))

    em, lbl = smoke_index(air.get("pm25"), air.get("pm10"))
    if lbl != "–Ω–∏–∑–∫–æ–µ":
        P.append(f"üî• –ó–∞–¥—ã–º–ª–µ–Ω–∏–µ: {em} {lbl}")
    if (p := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {p['tree']} | –¢—Ä–∞–≤—ã: {p['grass']} | –°–æ—Ä–Ω—è–∫–∏: {p['weed']} ‚Äî —Ä–∏—Å–∫ {p['risk']}")
    if (rl := radiation_line(KLD_LAT, KLD_LON)):
        P.append(rl)
    P.append("‚Äî‚Äî‚Äî")

    # Kp + –®—É–º–∞–Ω
    kp, ks = get_kp()
    P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({ks})" if kp is not None else "üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")
    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (—Å–∫—Ä—ã–≤–∞–µ–º VoC <= 5 –º–∏–Ω—É—Ç)
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    astro = astro_events(offset_days=1, show_all_voc=True)  # –ø–æ–ª—É—á–∞–µ–º –≤—Å—ë, –ø–æ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    filtered: List[str] = []
    for line in (astro or []):
        m = re.search(r"(VoC|VOC|–õ—É–Ω–∞.*–±–µ–∑ –∫—É—Ä—Å–∞).*?(\d+)\s*–º–∏–Ω", line, re.IGNORECASE)
        if m:
            mins = int(m.group(2))
            if mins <= 5:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ VoC
        filtered.append(line)
    if filtered:
        P.extend([zsym(line) for line in filtered])
    else:
        P.append("‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî")
    P.append("‚Äî‚Äî‚Äî")

    # –í—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã
    culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if kp is not None and ks and ks.lower() == "–±—É—Ä—è" else "–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"
    P.append("üìú <b>–í—ã–≤–æ–¥</b>")
    P.append(f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    try:
        _, tips = gpt_blurb(culprit)
        for t in tips[:3]:
            t = t.strip()
            if t:
                P.append(t)
    except Exception:
        P.append("‚Äî –±–æ–ª—å—à–µ –≤–æ–¥—ã, –º–µ–Ω—å—à–µ —Å—Ç—Ä–µ—Å—Å–∞, –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–æ–Ω")

    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(tom, region_name)}")
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_common_post(bot: Bot, chat_id: int, region_name: str,
                           sea_label: str, sea_cities, other_label: str,
                           other_cities, tz):
    msg = build_message(region_name, sea_label, sea_cities, other_label, other_cities, tz)
    await bot.send_message(chat_id=chat_id, text=msg,
                           parse_mode=constants.ParseMode.HTML,
                           disable_web_page_preview=True)

async def main_common(bot: Bot, chat_id: int, region_name: str,
                      sea_label: str, sea_cities, other_label: str,
                      other_cities, tz):
    await send_common_post(bot, chat_id, region_name, sea_label,
                           sea_cities, other_label, other_cities, tz)
