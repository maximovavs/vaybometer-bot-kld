#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_common.py  ‚Ä¢  –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ ¬´VayboMeter¬ª (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥).

‚Ä¢ –ë–∞–ª—Ç–∏–π—Å–∫–æ–µ –º–æ—Ä–µ, –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ö—ë–Ω–∏–≥–∞
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –º–æ—Ä—Å–∫–∏—Ö, —Ç—ë–ø–ª—ã—Ö, —Ö–æ–ª–æ–¥–Ω—ã—Ö
‚Ä¢ –í–æ–∑–¥—É—Ö, –ø—ã–ª—å—Ü–∞, —Ä–∞–¥–∏–∞—Ü–∏—è
‚Ä¢ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞, —Ä–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞
‚Ä¢ –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è, ¬´–í–∏–Ω–∏—Ç–µ ‚Ä¶¬ª, —Å–æ–≤–µ—Ç—ã, —Ñ–∞–∫—Ç –¥–Ω—è
"""

from __future__ import annotations
import asyncio, json, logging
from pathlib import Path
from typing import Any, Dict, List, Tuple

import pendulum
from telegram import Bot, error as tg_err, constants

from utils      import compass, clouds_word, get_fact, AIR_EMOJI, pm_color, kp_emoji
from weather    import get_weather, fetch_tomorrow_temps
from air        import get_air, get_sst, get_kp
from pollen     import get_pollen
from schumann   import get_schumann
from astro      import astro_events
from gpt        import gpt_blurb
from radiation  import get_radiation                      # üÜï –±–ª–æ–∫ —Ä–∞–¥–∏–∞—Ü–∏–∏
from settings_klg import SEA_SST_COORD                   # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ë–∞–ª—Ç–∏–π—Å–∫–æ–º –∑–∞–ª–∏–≤–µ

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
KLD_LAT, KLD_LON = 54.710426, 20.452214

WMO_DESC = {
    0:  "‚òÄÔ∏è —è—Å–Ω–æ", 1: "‚õÖ —á.–æ–±–ª", 2: "‚òÅÔ∏è –æ–±–ª", 3: "üå• –ø–∞—Å–º",
    45: "üå´ —Ç—É–º–∞–Ω", 48: "üå´ –∏–∑–º–æ—Ä–æ–∑—å", 51: "üå¶ –º–æ—Ä–æ—Å—å",
    61: "üåß –¥–æ–∂–¥—å", 71: "‚ùÑÔ∏è —Å–Ω–µ–≥", 95: "‚õà –≥—Ä–æ–∑–∞",
}
code_desc = lambda c: WMO_DESC.get(c, "‚Äî")

def pressure_arrow(hourly: Dict[str, Any]) -> str:
    """–°—Ç—Ä–µ–ª–∫–∞ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –¥–∞–≤–ª–µ–Ω–∏—è: ‚Üë >+1 hPa, ‚Üì <‚àí1 hPa, –∏–Ω–∞—á–µ ‚Üí."""
    pr = hourly.get("surface_pressure", [])
    if len(pr) < 2:
        return "‚Üí"
    delta = pr[-1] - pr[0]
    return "‚Üë" if delta > 1 else "‚Üì" if delta < -1 else "‚Üí"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®—É–º–∞–Ω ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_schumann_with_fallback() -> Dict[str, Any]:
    sch = get_schumann()
    if sch.get("freq") is not None:
        sch["cached"] = False
        return sch

    cache = Path(__file__).parent / "schumann_hourly.json"
    if cache.exists():
        try:
            arr = json.loads(cache.read_text(encoding="utf-8"))
            if arr:
                last  = arr[-1]
                pts   = arr[-24:]
                freqs = [p["freq"] for p in pts if isinstance(p.get("freq"), (int, float))]
                trend = "‚Üí"
                if len(freqs) > 1:
                    avg = sum(freqs[:-1]) / (len(freqs) - 1)
                    d   = freqs[-1] - avg
                    trend = "‚Üë" if d >= 0.1 else "‚Üì" if d <= -0.1 else "‚Üí"
                return {
                    "freq":  round(last["freq"], 2),
                    "amp":   round(last["amp"], 1),
                    "trend": trend,
                    "cached": True,
                }
        except Exception as e:
            logging.warning("Schumann cache parse error: %s", e)
    return sch

def schumann_line(s: Dict[str, Any]) -> str:
    if s.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f, amp = s["freq"], s["amp"]
    emoji = "üî¥" if f < 7.6 else "üü£" if f > 8.1 else "üü¢"
    return f"{emoji} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {s['trend']}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∞–¥–∏–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def radiation_line(lat: float, lon: float) -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–æ —Ä–∞–¥–∏–∞—Ü–∏—é –∏–ª–∏ None,
    –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç (—á—Ç–æ–±—ã –±–ª–æ–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å).
    """
    data = get_radiation(lat, lon) or {}
    dose = data.get("dose")
    if dose is None:
        return None                       # ‚Üê –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –Ω–µ—Ç —Å—Ç—Ä–æ–∫–∏

    # –ø—Ä–æ—Å—Ç–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –≥—Ä–∞–¥–∞—Ü–∏—è
    if dose <= 0.15:
        emoji, level = "üü¢", "–Ω–∏–∑–∫–∏–π"
    elif dose <= 0.30:
        emoji, level = "üü°", "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π"
    else:
        emoji, level = "üî¥", "–≤—ã—Å–æ–∫–∏–π"
    return f"{emoji} –†–∞–¥–∏–∞—Ü–∏—è: {dose:.3f} ŒºSv/h ({level})"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message(
    region_name: str,
    chat_id: int,
    sea_label: str,
    sea_cities: List[Tuple[str, Tuple[float, float]]],
    other_label: str,
    other_cities: List[Tuple[str, Tuple[float, float]]],
    tz: pendulum.Timezone,
) -> str:

    P: List[str] = []
    today    = pendulum.now(tz).date()
    tomorrow = today.add(days=1)

    # 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ {region_name}: –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow.format('DD.MM.YYYY')})</b>")

    # 2) –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ë–∞–ª—Ç–∏–π—Å–∫–æ–≥–æ –º–æ—Ä—è
    sst = get_sst(*SEA_SST_COORD)
    P.append(f"üåä –¢–µ–º–ø. –º–æ—Ä—è (—Ü–µ–Ω—Ç—Ä –∑–∞–ª–∏–≤–∞): {sst:.1f} ¬∞C" if sst is not None
             else "üåä –¢–µ–º–ø. –º–æ—Ä—è (—Ü–µ–Ω—Ç—Ä –∑–∞–ª–∏–≤–∞): –Ω/–¥")

    # 3) –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞
    d_max, d_min = fetch_tomorrow_temps(KLD_LAT, KLD_LON, tz=tz.name)
    wm   = get_weather(KLD_LAT, KLD_LON) or {}
    cur  = wm.get("current", {}) or {}
    avgT = ((d_max + d_min) / 2) if d_max and d_min else cur.get("temperature", 0)

    P.append(
        f"üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –°—Ä. —Ç–µ–º–ø {avgT:.0f} ¬∞C ‚Ä¢ {clouds_word(cur.get('clouds', 0))} ‚Ä¢ "
        f"üí® {cur.get('windspeed', 0):.1f} –∫–º/—á ({compass(cur.get('winddirection', 0))}) ‚Ä¢ "
        f"üíß {cur.get('pressure', 1013):.0f} –≥–ü–∞ {pressure_arrow(wm.get('hourly', {}))}"
    )
    P.append("‚Äî‚Äî‚Äî")

    # ‚Ä¶ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤, –≤–æ–∑–¥—É—Ö–∞, –ø—ã–ª—å—Ü—ã ‚Äì –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ‚Ä¶

    # 4) –í–æ–∑–¥—É—Ö –∏ –ø—ã–ª—å—Ü–∞
    air = get_air(KLD_LAT, KLD_LON) or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(
        f"{AIR_EMOJI.get(lvl, '‚ö™')} {lvl} (AQI {air.get('aqi', '–Ω/–¥')}) | "
        f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}"
    )
    if (p := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(
            f"–î–µ—Ä–µ–≤—å—è: {p['tree']} | –¢—Ä–∞–≤—ã: {p['grass']} | "
            f"–°–æ—Ä–Ω—è–∫–∏: {p['weed']} ‚Äî —Ä–∏—Å–∫ {p['risk']}"
        )

    # 5) –†–∞–¥–∏–∞—Ü–∏—è (–¥–æ–±–∞–≤–∏—Ç—Å—è –¢–û–õ–¨–ö–û, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    rad_line = radiation_line(KLD_LAT, KLD_LON)
    if rad_line:
        P.append(rad_line)

    P.append("‚Äî‚Äî‚Äî")

    # 6) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω
    kp, kp_state = get_kp()
    P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({kp_state})" if kp is not None
             else "üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")
    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # 7) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    astro = astro_events(offset_days=1, show_all_voc=True)
    P.extend(astro if astro else ["‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî"])
    P.append("‚Äî‚Äî‚Äî")

    # 8) –í—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã (—Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ, –ª–æ–≥–∏–∫–∞ –ø—Ä–µ–∂–Ω—è—è)
    culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if kp and kp_state.lower() == "–±—É—Ä—è" else "–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"
    P.append("üìú <b>–í—ã–≤–æ–¥</b>")
    P.append(f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ")
    P.append("‚Äî‚Äî‚Äî")

    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    _, tips = gpt_blurb(culprit)
    for tip in tips[:3]:
        P.append(tip.strip())
    P.append("‚Äî‚Äî‚Äî")

    # 9) –§–∞–∫—Ç –¥–Ω—è
    P.append(f"üìö {get_fact(tomorrow, region_name)}")
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_common_post(
    bot: Bot,
    chat_id: int,
    region_name: str,
    sea_label: str,
    sea_cities: List[Tuple[str, Tuple[float, float]]],
    other_label: str,
    other_cities: List[Tuple[str, Tuple[float, float]]],
    tz: pendulum.Timezone,
) -> None:
    text = build_message(
        region_name, chat_id, sea_label, sea_cities, other_label, other_cities, tz
    )
    await bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=constants.ParseMode.HTML,
        disable_web_page_preview=True,
    )

async def main_common(
    bot: Bot,
    chat_id: int,
    region_name: str,
    sea_label: str,
    sea_cities: List[Tuple[str, Tuple[float, float]]],
    other_label: str,
    other_cities: List[Tuple[str, Tuple[float, float]]],
    tz: pendulum.Timezone,
) -> None:
    await send_common_post(bot, chat_id, region_name, sea_label, sea_cities, other_label, other_cities, tz)
