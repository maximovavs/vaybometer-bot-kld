#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_common.py ‚Äî VayboMeter (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥).

‚Ä¢ –ú–æ—Ä–µ, –ø—Ä–æ–≥–Ω–æ–∑ –ö—ë–Ω–∏–≥–∞ (–¥–µ–Ω—å/–Ω–æ—á—å, –º/—Å, RH min‚Äìmax, –¥–∞–≤–ª–µ–Ω–∏–µ)
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –≥–æ—Ä–æ–¥–æ–≤ (d/n, –∫–æ–¥ –ø–æ–≥–æ–¥—ã —Å–ª–æ–≤–∞–º–∏ + üåä)
‚Ä¢ Air (IQAir/–≤–∞—à –∏—Å—Ç–æ—á–Ω–∏–∫) + Safecast (PM –∏ CPM‚ÜíŒºSv/h, –º—è–≥–∫–∞—è —à–∫–∞–ª–∞ üü¢üü°üîµ), –ø—ã–ª—å—Ü–∞
‚Ä¢ –†–∞–¥–∏–∞—Ü–∏—è –∏–∑ –æ—Ñ–∏—Ü. –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (—Å—Ç—Ä–æ–≥–∞—è —à–∫–∞–ª–∞ üü¢üü°üî¥)
‚Ä¢ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp —Å–æ ¬´—Å–≤–µ–∂–µ—Å—Ç—å—é¬ª + –°–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä (Bz/Bt/v/n + —Å—Ç–∞—Ç—É—Å)
‚Ä¢ –®—É–º–∞–Ω (—Ñ–æ–ª–ª–±—ç–∫ —á—Ç–µ–Ω–∏—è JSON; –ª–∏–±–æ –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç schumann.get_schumann())
‚Ä¢ –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (–º–∏–∫—Ä–æ-LLM 2‚Äì3 —Å—Ç—Ä–æ–∫–∏ + VoC, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ lunar_calendar.json)
‚Ä¢ –£–º–Ω—ã–π ¬´–í—ã–≤–æ–¥¬ª, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ñ–∞–∫—Ç –¥–Ω—è

(+ Water highlights) –î–ª—è –º–æ—Ä—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞ ¬´—á—Ç–æ —Å–µ–π—á–∞—Å –û–¢–õ–ò–ß–ù–û¬ª
–¥–ª—è –≤–æ–¥–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–ö–∞–π—Ç/–í–∏–Ω–≥/–í–∏–Ω–¥; SUP; –°—ë—Ä—Ñ) + –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º—É.
"""

from __future__ import annotations
import os
import re
import json
import html
import asyncio
import logging
import math
from pathlib import Path
from typing import Any, Dict, List, Tuple, Optional, Union

import pendulum
from telegram import Bot, constants

from utils        import compass, get_fact, AIR_EMOJI, pm_color, kp_emoji, kmh_to_ms, smoke_index
from weather      import get_weather, fetch_tomorrow_temps, day_night_stats
from air          import get_air, get_sst, get_kp, get_solar_wind
from pollen       import get_pollen
from radiation    import get_radiation
from gpt          import gpt_blurb, gpt_complete  # –º–∏–∫—Ä–æ-LLM –¥–ª—è ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏–π¬ª

# (–æ–ø—Ü.) –≤–æ–ª–Ω–∞ –∏–∑ Open-Meteo Marine
try:
    import requests  # type: ignore
except Exception:
    requests = None  # type: ignore

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

DEBUG_WATER = os.getenv("DEBUG_WATER", "").strip().lower() in ("1", "true", "yes", "on")
DISABLE_SCHUMANN = os.getenv("DISABLE_SCHUMANN", "").strip().lower() in ("1","true","yes","on")

# –ù–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª –¥–ª—è ¬´27/18 ¬∞C¬ª
NBSP = "\u00A0"

# –†–µ–∂–∏–º –ø–æ—Å—Ç–∞: evening (–Ω–∞ –∑–∞–≤—Ç—Ä–∞) / morning (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è)
POST_MODE = (os.getenv("POST_MODE") or os.getenv("MODE") or "evening").strip().lower()
DAY_OFFSET = 0 if POST_MODE == "morning" else 1

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
KLD_LAT, KLD_LON = 54.710426, 20.452214
CPM_TO_USVH = float(os.getenv("CPM_TO_USVH", "0.000571"))

CACHE_DIR = Path(".cache"); CACHE_DIR.mkdir(exist_ok=True, parents=True)
USE_DAILY_LLM = os.getenv("DISABLE_LLM_DAILY", "").strip().lower() not in ("1", "true", "yes", "on")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LLM safety ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DISABLE_LLM_TIPS = os.getenv("DISABLE_LLM_TIPS", "").strip().lower() in ("1", "true", "yes", "on")
ASTRO_LLM_TEMP = float(os.getenv("ASTRO_LLM_TEMP", "0.2"))

SAFE_TIPS_FALLBACKS = {
    "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å": ["üö∂ 30‚Äì40 –º–∏–Ω –ª—ë–≥–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.", "ü•§ –ü–µ–π—Ç–µ –≤–æ–¥—É –∏ –¥–µ–ª–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—É–∑—ã.", "üò¥ –°–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ 7‚Äì9 —á–∞—Å–æ–≤ —Å–Ω–∞."],
    "–ø–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞": ["üß• –¢—ë–ø–ª—ã–µ —Å–ª–æ–∏ –∏ –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –∫—É—Ä—Ç–∫–∞.", "üåß –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –¥–µ–ª–∞ –ø–æ–¥ –∫—Ä—ã—à—É; –±–æ–ª—å—à–µ –ø–∞—É–∑.", "üöó –ó–∞–ª–æ–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Ä–æ–≥—É."],
    "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏": ["üßò –£–º–µ–Ω—å—à–∏—Ç–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏, –±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞.", "üíß –ë–æ–ª—å—à–µ –≤–æ–¥—ã –∏ –º–∞–≥–Ω–∏–π/–∫–∞–ª–∏–π –≤ —Ä–∞—Ü–∏–æ–Ω–µ.", "üò¥ –†–µ–∂–∏–º —Å–Ω–∞, –º–µ–Ω—å—à–µ —ç–∫—Ä–∞–Ω–æ–≤ –≤–µ—á–µ—Ä–æ–º."],
    "–ø–ª–æ—Ö–æ–π –≤–æ–∑–¥—É—Ö": ["üòÆ‚Äçüí® –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ –∏ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è.", "ü™ü –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã/–ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏.", "üèÉ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏."],
    "–≤–æ–ª–Ω—ã –®—É–º–∞–Ω–∞": ["üßò –°–ø–æ–∫–æ–π–Ω—ã–π —Ç–µ–º–ø –¥–Ω—è, –±–µ–∑ –∞–≤—Ä–∞–ª–æ–≤.", "üçµ –õ—ë–≥–∫–∞—è –µ–¥–∞, —Ç—ë–ø–ª—ã–µ –Ω–∞–ø–∏—Ç–∫–∏.", "üò¥ –õ—ë–≥–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –∏ —Ä–∞–Ω–Ω–∏–π —Å–æ–Ω."],
}

def _escape_html(s: str) -> str:
    return html.escape(str(s), quote=False)

def _sanitize_line(s: str, max_len: int = 140) -> str:
    s = " ".join(str(s).split())
    s = re.sub(r"(.)\1{3,}", r"\1\1\1", s)
    s = s[:max_len-1] + "‚Ä¶" if len(s) > max_len else s
    return _escape_html(s).strip()

def _looks_gibberish(s: str) -> bool:
    if re.search(r"(.)\1{5,}", s):  # ¬´—â—â—â—â—â‚Ä¶¬ª
        return True
    letters = re.findall(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]", s)
    return (len(set(letters)) <= 2 and len("".join(letters)) >= 10)

def safe_tips(theme: str) -> list[str]:
    k = (theme or "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å").strip().lower()
    if DISABLE_LLM_TIPS:
        return SAFE_TIPS_FALLBACKS.get(k, SAFE_TIPS_FALLBACKS["–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å"])
    try:
        _, tips = gpt_blurb(k)
        out: list[str] = []
        for t in (tips or [])[:3]:
            t = _sanitize_line(t, max_len=140)
            if not t or _looks_gibberish(t): continue
            out.append(t)
        if out: return out
    except Exception as e:
        logging.warning("LLM tips failed: %s", e)
    return SAFE_TIPS_FALLBACKS.get(k, SAFE_TIPS_FALLBACKS["–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å"])

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ENV TUNABLES (–≤–æ–¥–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# KITE ‚Äî –º/—Å
KITE_WIND_MIN        = float(os.getenv("KITE_WIND_MIN",        "6"))
KITE_WIND_GOOD_MIN   = float(os.getenv("KITE_WIND_GOOD_MIN",   "7"))
KITE_WIND_GOOD_MAX   = float(os.getenv("KITE_WIND_GOOD_MAX",   "12"))
KITE_WIND_STRONG_MAX = float(os.getenv("KITE_WIND_STRONG_MAX", "18"))
KITE_GUST_RATIO_BAD  = float(os.getenv("KITE_GUST_RATIO_BAD",  "1.5"))
KITE_WAVE_WARN       = float(os.getenv("KITE_WAVE_WARN",       "2.5"))

# SUP ‚Äî –º/—Å –∏ –º
SUP_WIND_GOOD_MAX     = float(os.getenv("SUP_WIND_GOOD_MAX",     "4"))
SUP_WIND_OK_MAX       = float(os.getenv("SUP_WIND_OK_MAX",       "6"))
SUP_WIND_EDGE_MAX     = float(os.getenv("SUP_WIND_EDGE_MAX",     "8"))
SUP_WAVE_GOOD_MAX     = float(os.getenv("SUP_WAVE_GOOD_MAX",     "0.6"))
SUP_WAVE_OK_MAX       = float(os.getenv("SUP_WAVE_OK_MAX",       "0.8"))
SUP_WAVE_BAD_MIN      = float(os.getenv("SUP_WAVE_BAD_MIN",      "1.5"))
OFFSHORE_SUP_WIND_MIN = float(os.getenv("OFFSHORE_SUP_WIND_MIN", "5"))

# SURF ‚Äî –≤–æ–ª–Ω–∞ (–º) –∏ –≤–µ—Ç–µ—Ä (–º/—Å)
SURF_WAVE_GOOD_MIN   = float(os.getenv("SURF_WAVE_GOOD_MIN",   "0.9"))
SURF_WAVE_GOOD_MAX   = float(os.getenv("SURF_WAVE_GOOD_MAX",   "2.5"))
SURF_WIND_MAX        = float(os.getenv("SURF_WIND_MAX",        "10"))

# Wetsuit thresholds (¬∞C)
WSUIT_NONE   = float(os.getenv("WSUIT_NONE",   "22"))  # ‚â•22 ‚Äî –º–æ–∂–Ω–æ –±–µ–∑ –≥–∏–¥—Ä–∏–∫–∞/–ª–∞–π–∫—Ä–∞
WSUIT_SHORTY = float(os.getenv("WSUIT_SHORTY", "20"))
WSUIT_32     = float(os.getenv("WSUIT_32",     "17"))
WSUIT_43     = float(os.getenv("WSUIT_43",     "14"))
WSUIT_54     = float(os.getenv("WSUIT_54",     "12"))
WSUIT_65     = float(os.getenv("WSUIT_65",     "10"))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–ø–æ—Ç—ã –∏ –ø—Ä–æ—Ñ–∏–ª—å –±–µ—Ä–µ–≥–æ–≤–æ–π –ª–∏–Ω–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# face = –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ¬´–∫ –º–æ—Ä—é¬ª (–∫—É–¥–∞ —Å–º–æ—Ç—Ä–∏—Ç –±–µ—Ä–µ–≥). –î–ª—è –æ–Ω—à–æ—Ä–∞ –≤–µ—Ç–µ—Ä –¥—É–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Å —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞.
SHORE_PROFILE: Dict[str, float] = {
    "Kaliningrad": 270.0,   # –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, —Ö–æ—Ç—è –Ω–µ –º–æ—Ä—Å–∫–æ–π
    "Zelenogradsk": 285.0,
    "Svetlogorsk":  300.0,
    "Pionersky":    300.0,
    "Yantarny":     300.0,
    "Baltiysk":     270.0,
    "Primorsk":     265.0,
}

SPOT_SHORE_PROFILE: Dict[str, float] = {
    "Zelenogradsk":           285.0,
    "Svetlogorsk":            300.0,
    "Pionersky":              300.0,
    "Yantarny":               300.0,
    "Baltiysk (Spit)":        270.0,
    "Baltiysk (North beach)": 280.0,
    "Primorsk":               265.0,
    "Donskoye":               300.0,
}

def _norm_key(s: str) -> str:
    return re.sub(r"[^a-z0-9]", "", s.lower())

_SPOT_INDEX = {_norm_key(k): k for k in SPOT_SHORE_PROFILE.keys()}

def _parse_deg(val: Optional[str]) -> Optional[float]:
    if not val: return None
    try: return float(str(val).strip())
    except Exception: return None

def _env_city_key(city: str) -> str:
    return city.upper().replace(" ", "_")

def _spot_from_env(name: Optional[str]) -> Optional[Tuple[str, float]]:
    if not name: return None
    key = _norm_key(name)
    real = _SPOT_INDEX.get(key)
    if real: return real, SPOT_SHORE_PROFILE[real]
    return None

def _shore_face_for_city(city: str) -> Tuple[Optional[float], Optional[str]]:
    # 1) –ø—Ä—è–º–æ–π override —É–≥–ª–æ–º
    face_env = _parse_deg(os.getenv(f"SHORE_FACE_{_env_city_key(city)}"))
    if face_env is not None:
        return face_env, f"ENV:SHORE_FACE_{_env_city_key(city)}"
    # 2) —Å–ø–æ—Ç –¥–ª—è –≥–æ—Ä–æ–¥–∞
    spot_env = os.getenv(f"SPOT_{_env_city_key(city)}")
    sp = _spot_from_env(spot_env) if spot_env else None
    # 3) –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Ç
    if not sp:
        sp = _spot_from_env(os.getenv("ACTIVE_SPOT"))
    if sp:
        label, deg = sp
        return deg, label
    # 4) –¥–µ—Ñ–æ–ª—Ç
    if city in SHORE_PROFILE:
        return SHORE_PROFILE[city], city
    return None, None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç—ã –æ–±—â–µ–≥–æ –∫–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _as_tz(tz: Union[pendulum.Timezone, str]) -> pendulum.Timezone:
    return pendulum.timezone(tz) if isinstance(tz, str) else tz

WMO_DESC = {0:"‚òÄÔ∏è —è—Å–Ω–æ",1:"‚õÖ —á.–æ–±–ª",2:"‚òÅÔ∏è –æ–±–ª",3:"üå• –ø–∞—Å–º",45:"üå´ —Ç—É–º–∞–Ω",48:"üå´ –∏–∑–º–æ—Ä–æ–∑—å",51:"üå¶ –º–æ—Ä–æ—Å—å",61:"üåß –¥–æ–∂–¥—å",71:"‚ùÑÔ∏è —Å–Ω–µ–≥",95:"‚õà –≥—Ä–æ–∑–∞"}
def code_desc(c: Any) -> Optional[str]:
    try: return WMO_DESC.get(int(c))
    except Exception: return None

def _pick(d: Dict[str, Any], *keys, default=None):
    for k in keys:
        if k in d: return d[k]
    return default

def _hourly_times(wm: Dict[str, Any]) -> List[pendulum.DateTime]:
    hourly = wm.get("hourly") or {}
    times = hourly.get("time") or hourly.get("time_local") or hourly.get("timestamp") or []
    out: List[pendulum.DateTime] = []
    for t in times:
        try: out.append(pendulum.parse(str(t)))
        except Exception: continue
    return out

def _nearest_index_for_day(times: List[pendulum.DateTime], date_obj: pendulum.Date, prefer_hour: int, tz: pendulum.Timezone) -> Optional[int]:
    if not times: return None
    target = pendulum.datetime(date_obj.year, date_obj.month, date_obj.day, prefer_hour, 0, tz=tz)
    best_i, best_diff = None, None
    for i, dt in enumerate(times):
        try: dt_local = dt.in_tz(tz)
        except Exception: dt_local = dt
        if dt_local.date() != date_obj: continue
        diff = abs((dt_local - target).total_seconds())
        if best_diff is None or diff < best_diff:
            best_i, best_diff = i, diff
    return best_i

def _circular_mean_deg(deg_list: List[float]) -> Optional[float]:
    if not deg_list: return None
    x = sum(math.cos(math.radians(d)) for d in deg_list)
    y = sum(math.sin(math.radians(d)) for d in deg_list)
    if x == 0 and y == 0: return None
    ang = math.degrees(math.atan2(y, x))
    return (ang + 360.0) % 360.0

# === –¥–∞—Ç–∞-—É—Ç–∏–ª–∏—Ç—ã/–æ–±–æ–±—â–µ–Ω–∏—è –¥–ª—è ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞¬ª ============================

def _date_for_offset(tz: pendulum.Timezone, offset_days: int) -> pendulum.Date:
    return pendulum.now(tz).add(days=offset_days).date()

def pick_header_metrics(wm: Dict[str, Any], tz: pendulum.Timezone, offset_days: int) -> Tuple[Optional[float], Optional[int], Optional[int], str]:
    """–û–±–æ–±—â–µ–Ω–∏–µ: –≤–µ—Ç–µ—Ä/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É (‚âà–ø–æ–ª–¥–µ–Ω—å)."""
    hourly = wm.get("hourly") or {}
    times = _hourly_times(wm)
    target_date = _date_for_offset(tz, offset_days)

    spd_arr = _pick(hourly, "windspeed_10m", "windspeed", "wind_speed_10m", "wind_speed", default=[])
    dir_arr = _pick(hourly, "winddirection_10m", "winddirection", "wind_dir_10m", "wind_dir", default=[])
    prs_arr = hourly.get("surface_pressure", []) or hourly.get("pressure", [])

    if times:
        idx_noon = _nearest_index_for_day(times, target_date, prefer_hour=12, tz=tz)
        idx_morn = _nearest_index_for_day(times, target_date, prefer_hour=6,  tz=tz)
    else:
        idx_noon = idx_morn = None

    wind_ms = None; wind_dir = None; press_val = None; trend = "‚Üí"

    if idx_noon is not None:
        try: spd  = float(spd_arr[idx_noon]) if idx_noon < len(spd_arr) else None
        except Exception: spd = None
        try: wdir = float(dir_arr[idx_noon]) if idx_noon < len(dir_arr) else None
        except Exception: wdir = None
        try: p_noon = float(prs_arr[idx_noon]) if idx_noon < len(prs_arr) else None
        except Exception: p_noon = None
        try: p_morn = float(prs_arr[idx_morn]) if (idx_morn is not None and idx_morn < len(prs_arr)) else None
        except Exception: p_morn = None

        wind_ms  = kmh_to_ms(spd) if isinstance(spd,  (int, float)) else None
        wind_dir = int(round(wdir)) if isinstance(wdir, (int, float)) else None
        press_val = int(round(p_noon)) if isinstance(p_noon, (int, float)) else None
        if isinstance(p_noon, (int, float)) and isinstance(p_morn, (int, float)):
            diff = p_noon - p_morn
            trend = "‚Üë" if diff >= 0.3 else "‚Üì" if diff <= -0.3 else "‚Üí"

    if wind_ms is None and times:
        idxs = [i for i, t in enumerate(times) if t.in_tz(tz).date() == target_date]
        if idxs:
            try: speeds = [float(spd_arr[i]) for i in idxs if i < len(spd_arr)]
            except Exception: speeds = []
            try: dirs   = [float(dir_arr[i]) for i in idxs if i < len(dir_arr)]
            except Exception: dirs = []
            try: prs    = [float(prs_arr[i]) for i in idxs if i < len(prs_arr)]
            except Exception: prs = []
            if speeds: wind_ms = kmh_to_ms(sum(speeds)/len(speeds))
            mean_dir = _circular_mean_deg(dirs)
            wind_dir = int(round(mean_dir)) if mean_dir is not None else wind_dir
            if prs: press_val = int(round(sum(prs)/len(prs)))

    if wind_ms is None or wind_dir is None or press_val is None:
        cur = (wm.get("current") or wm.get("current_weather") or {})
        if wind_ms is None:
            spd = _pick(cur, "windspeed_10m", "windspeed", "wind_speed_10m", "wind_speed")
            wind_ms = kmh_to_ms(spd) if isinstance(spd, (int, float)) else wind_ms
        if wind_dir is None:
            wdir = _pick(cur, "winddirection_10m", "winddirection", "wind_dir_10m", "wind_dir")
            if isinstance(wdir, (int, float)): wind_dir = int(round(float(wdir)))
        if press_val is None:
            pcur = _pick(cur, "surface_pressure", "pressure")
            if isinstance(pcur, (int, float)): press_val = int(round(float(pcur)))
    return wind_ms, wind_dir, press_val, trend

def pick_tomorrow_header_metrics(wm: Dict[str, Any], tz: pendulum.Timezone) -> Tuple[Optional[float], Optional[int], Optional[int], str]:
    """–û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏; —Ç–µ–ø–µ—Ä—å –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç pick_header_metrics(..., offset=1)."""
    return pick_header_metrics(wm, tz, 1)

def _hourly_indices_for_offset(wm: Dict[str, Any], tz: pendulum.Timezone, offset_days: int) -> List[int]:
    times = _hourly_times(wm)
    target = _date_for_offset(tz, offset_days)
    idxs: List[int] = []
    for i, dt in enumerate(times):
        try:
            if dt.in_tz(tz).date() == target: idxs.append(i)
        except Exception: pass
    return idxs

def storm_flags_for_date_offset(wm: Dict[str, Any], tz: pendulum.Timezone, offset_days: int) -> Dict[str, Any]:
    hourly = wm.get("hourly") or {}
    idxs = _hourly_indices_for_offset(wm, tz, offset_days)
    if not idxs: return {"warning": False}

    def _arr(*names, default=None):
        v = _pick(hourly, *names, default=default)
        return v if isinstance(v, list) else []

    def _vals(arr):
        out=[]
        for i in idxs:
            if i < len(arr):
                try: out.append(float(arr[i]))
                except Exception: pass
        return out

    speeds_kmh = _vals(_arr("windspeed_10m","windspeed","wind_speed_10m","wind_speed", default=[]))
    gusts_kmh  = _vals(_arr("windgusts_10m","wind_gusts_10m","wind_gusts", default=[]))
    rain_mm_h  = _vals(_arr("rain", default=[]))
    tprob      = _vals(_arr("thunderstorm_probability", default=[]))

    max_speed_ms = kmh_to_ms(max(speeds_kmh)) if speeds_kmh else None
    max_gust_ms  = kmh_to_ms(max(gusts_kmh))  if gusts_kmh  else None
    heavy_rain   = (max(rain_mm_h) >= 8.0) if rain_mm_h else False
    thunder      = (max(tprob) >= 60) if tprob else False

    reasons=[]
    if isinstance(max_speed_ms,(int,float)) and max_speed_ms >= 13: reasons.append(f"–≤–µ—Ç–µ—Ä –¥–æ {max_speed_ms:.0f} –º/—Å")
    if isinstance(max_gust_ms,(int,float)) and max_gust_ms >= 17: reasons.append(f"–ø–æ—Ä—ã–≤—ã –¥–æ {max_gust_ms:.0f} –º/—Å")
    if heavy_rain: reasons.append("—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å")
    if thunder: reasons.append("–≥—Ä–æ–∑–∞")

    return {"max_speed_ms": max_speed_ms, "max_gust_ms": max_gust_ms, "heavy_rain": heavy_rain,
            "thunder": thunder, "warning": bool(reasons),
            "warning_text": "‚ö†Ô∏è <b>–®—Ç–æ—Ä–º–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>: " + ", ".join(reasons) if reasons else ""}

def storm_flags_for_tomorrow(wm: Dict[str, Any], tz: pendulum.Timezone) -> Dict[str, Any]:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –≤—ã–∑—ã–≤–∞–µ—Ç storm_flags_for_date_offset(..., 1)."""
    return storm_flags_for_date_offset(wm, tz, 1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Air ‚Üí –≤—ã–≤–æ–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _is_air_bad(air: Dict[str, Any]) -> Tuple[bool, str, str]:
    try: aqi = float(air.get("aqi")) if air.get("aqi") is not None else None
    except Exception: aqi = None
    pm25 = air.get("pm25"); pm10 = air.get("pm10")
    worst_label="—É–º–µ—Ä–µ–Ω–Ω—ã–π"; reason_parts=[]; bad=False
    def _num(v):
        try: return float(v)
        except Exception: return None
    p25=_num(pm25); p10=_num(pm10)
    if aqi is not None and aqi >= 100:
        bad=True; 
        if aqi>=150: worst_label="–≤—ã—Å–æ–∫–∏–π"
        reason_parts.append(f"AQI {aqi:.0f}")
    if p25 is not None and p25>35:
        bad=True; 
        if p25>55: worst_label="–≤—ã—Å–æ–∫–∏–π"
        reason_parts.append(f"PM‚ÇÇ.‚ÇÖ {p25:.0f}")
    if p10 is not None and p10>50:
        bad=True; 
        if p10>100: worst_label="–≤—ã—Å–æ–∫–∏–π"
        reason_parts.append(f"PM‚ÇÅ‚ÇÄ {p10:.0f}")
    reason=", ".join(reason_parts) if reason_parts else "–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ"
    return bad, worst_label, reason

def build_conclusion(kp: Any, kp_status: str, air: Dict[str, Any], storm: Dict[str, Any], schu: Dict[str, Any]) -> List[str]:
    lines: List[str] = []
    storm_main = bool(storm.get("warning"))
    air_bad, air_label, air_reason = _is_air_bad(air)
    kp_val = float(kp) if isinstance(kp,(int,float)) else None
    kp_main = bool(kp_val is not None and kp_val >= 5)
    schu_main = (schu or {}).get("status_code") == "red"
    gust = storm.get("max_gust_ms")
    storm_text=None
    if storm_main:
        parts=[]
        if isinstance(gust,(int,float)): parts.append(f"–ø–æ—Ä—ã–≤—ã –¥–æ {gust:.0f} –º/—Å")
        if storm.get("heavy_rain"): parts.append("–ª–∏–≤–Ω–∏")
        if storm.get("thunder"): parts.append("–≥—Ä–æ–∑–∞")
        storm_text="—à—Ç–æ—Ä–º–æ–≤–∞—è –ø–æ–≥–æ–¥–∞: " + (", ".join(parts) if parts else "–≤–æ–∑–º–æ–∂–Ω—ã –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
    air_text = f"–∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞: {air_label} ({air_reason})" if air_bad else None
    kp_text  = f"–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: Kp‚âà{kp_val:.1f} ({kp_status})" if kp_main and kp_val is not None else None
    schu_text= "—Å–∏–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –®—É–º–∞–Ω–∞ (‚ö†Ô∏è)" if schu_main else None
    if storm_main: lines.append(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî {storm_text}. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–µ–ª–∞ —Å —É—á—ë—Ç–æ–º –ø–æ–≥–æ–¥—ã.")
    elif air_bad:  lines.append(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî {air_text}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ –∏ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏.")
    elif kp_main:  lines.append(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî {kp_text}. –í–æ–∑–º–æ–∂–Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É –º–µ—Ç–µ–æ–∑–∞–≤–∏—Å–∏–º—ã—Ö.")
    elif schu_main:lines.append("–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî –≤–æ–ª–Ω—ã –®—É–º–∞–Ω–∞: –æ—Ç–º–µ—á–∞—é—Ç—Å—è —Å–∏–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è. –ë–µ—Ä–µ–≥–∏—Ç–µ —Ä–µ–∂–∏–º –∏ –Ω–∞–≥—Ä—É–∑–∫—É.")
    else:          lines.append("–°–µ—Ä—å—ë–∑–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞ –Ω–µ –≤–∏–¥–Ω–æ ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ª–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã.")
    secondary=[]
    for tag,txt in (("storm",storm_text),("air",air_text),("kp",kp_text),("schu",schu_text)):
        if txt:
            if (tag=="storm" and storm_main) or (tag=="air" and air_bad) or (tag=="kp" and kp_main) or (tag=="schu" and schu_main):
                continue
            secondary.append(txt)
    if secondary: lines.append("–¢–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: " + "; ".join(secondary[:2]) + ".")
    return lines

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ SST cache (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_sst_cached(la: float, lo: float) -> Optional[float]:
    """–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ–ª–±—ç–∫: –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ get_sst; –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –∑–∞–º–µ–Ω–∏–º –Ω–∞ –∫—ç—à."""
    try:
        v = get_sst(la, lo)
        return float(v) if isinstance(v, (int, float)) else None
    except Exception:
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤–æ–¥–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –∫–æ—Ä–æ—Ç–∫–∏–π ¬´highlights¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _deg_diff(a: float, b: float) -> float:
    return abs((a - b + 180) % 360 - 180)

def _cardinal(deg: Optional[float]) -> Optional[str]:
    if deg is None: return None
    dirs = ["N","NE","E","SE","S","SW","W","NW"]
    idx = int((deg + 22.5) // 45) % 8
    return dirs[idx]

def _shore_class(city: str, wind_from_deg: Optional[float]) -> Tuple[Optional[str], Optional[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (class, source_label). class ‚àà {onshore,cross,offshore}."""
    if wind_from_deg is None: return None, None
    face_deg, src_label = _shore_face_for_city(city)
    if face_deg is None: return None, src_label
    diff = _deg_diff(wind_from_deg, face_deg)
    if diff <= 45:  return "onshore", src_label
    if diff >= 135: return "offshore", src_label
    return "cross", src_label

def _fetch_wave_for_day(lat: float, lon: float, tz_obj: pendulum.Timezone, offset_days: int,
                        prefer_hour: int = 12) -> Tuple[Optional[float], Optional[float]]:
    if not requests:
        return None, None
    try:
        url = "https://marine-api.open-meteo.com/v1/marine"
        params = {
            "latitude": lat,
            "longitude": lon,
            "hourly": "wave_height,wave_period",
            "timezone": tz_obj.name,
        }
        r = requests.get(url, params=params, timeout=10)
        r.raise_for_status()
        j = r.json()
        hourly = j.get("hourly") or {}
        times = [pendulum.parse(t) for t in (hourly.get("time") or []) if t]
        idx = _nearest_index_for_day(times, _date_for_offset(tz_obj, offset_days), prefer_hour, tz_obj)
        if idx is None:
            return None, None
        h = hourly.get("wave_height") or []
        p = hourly.get("wave_period") or []
        w_h = float(h[idx]) if idx < len(h) and h[idx] is not None else None
        w_t = float(p[idx]) if idx < len(p) and p[idx] is not None else None
        return w_h, w_t
    except Exception as e:
        logging.warning("marine fetch failed: %s", e)
        return None, None

def _fetch_wave_for_tomorrow(lat: float, lon: float, tz_obj: pendulum.Timezone,
                             prefer_hour: int = 12) -> Tuple[Optional[float], Optional[float]]:
    # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    return _fetch_wave_for_day(lat, lon, tz_obj, offset_days=1, prefer_hour=prefer_hour)

def _wetsuit_hint(sst: Optional[float]) -> Optional[str]:
    """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ç–æ–ª—â–∏–Ω–µ –≥–∏–¥—Ä–∏–∫–∞ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –≤–æ–¥—ã (¬∞C)."""
    if not isinstance(sst, (int, float)):
        return None
    t = float(sst)
    if t >= WSUIT_NONE:   return None
    if t >= WSUIT_SHORTY: return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º —à–æ—Ä—Ç–∏ 2 –º–º"
    if t >= WSUIT_32:     return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 3/2 –º–º"
    if t >= WSUIT_43:     return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 4/3 –º–º (–±–æ—Ç—ã)"
    if t >= WSUIT_54:     return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 5/4 –º–º (–±–æ—Ç—ã, –ø–µ—Ä—á–∞—Ç–∫–∏)"
    if t >= WSUIT_65:     return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 5/4 –º–º + –∫–∞–ø—é—à–æ–Ω (–±–æ—Ç—ã, –ø–µ—Ä—á–∞—Ç–∫–∏)"
    return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 6/5 –º–º + –∫–∞–ø—é—à–æ–Ω (–±–æ—Ç—ã, –ø–µ—Ä—á–∞—Ç–∫–∏)"

def _water_highlights(
    city: str,
    la: float,
    lo: float,
    tz_obj: pendulum.Timezone,
    sst_hint: Optional[float] = None,
    offset_days: int = DAY_OFFSET
) -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è ¬´good¬ª.
    –ü—Ä–∏–º–µ—Ä: üßú‚Äç‚ôÇÔ∏è –û—Ç–ª–∏—á–Ω–æ: –ö–∞–π—Ç/–í–∏–Ω–≥/–í–∏–Ω–¥; SUP @Spot (SE/cross) ‚Ä¢ –≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 4/3 –º–º
    –ï—Å–ª–∏ good-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë—Ç None (–Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º).
    """
    wm = get_weather(la, lo) or {}

    # –≤–µ—Ç–µ—Ä/–ø–æ—Ä—ã–≤—ã/–≤–æ–ª–Ω–∞ –Ω–∞ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å
    wind_ms, wind_dir, _, _ = pick_header_metrics(wm, tz_obj, offset_days=offset_days)
    wave_h, _ = _fetch_wave_for_day(la, lo, tz_obj, offset_days=offset_days)

    def _gust_at_noon(wm: Dict[str, Any], tz: pendulum.Timezone) -> Optional[float]:
        hourly = wm.get("hourly") or {}
        times = _hourly_times(wm)
        idx = _nearest_index_for_day(times, _date_for_offset(tz, offset_days), 12, tz)
        arr = _pick(hourly, "windgusts_10m", "wind_gusts_10m", "wind_gusts", default=[])
        if idx is not None and idx < len(arr):
            try:
                return kmh_to_ms(float(arr[idx]))
            except Exception:
                return None
        return None

    gust = _gust_at_noon(wm, tz_obj)

    wind_val = float(wind_ms) if isinstance(wind_ms, (int, float)) else None
    gust_val = float(gust) if isinstance(gust, (int, float)) else None
    card = _cardinal(float(wind_dir)) if isinstance(wind_dir, (int, float)) else None
    shore, shore_src = _shore_class(city, float(wind_dir) if isinstance(wind_dir, (int, float)) else None)

    # ‚Äî –∫—Ä–∏—Ç–µ—Ä–∏–∏ good
    kite_good = False
    if wind_val is not None:
        if KITE_WIND_GOOD_MIN <= wind_val <= KITE_WIND_GOOD_MAX:
            kite_good = True
        if shore == "offshore":
            kite_good = False
        if gust_val and wind_val and (gust_val / max(wind_val, 0.1) > KITE_GUST_RATIO_BAD):
            kite_good = False
        if wave_h is not None and wave_h >= KITE_WAVE_WARN:
            kite_good = False

    sup_good = False
    if wind_val is not None:
        if (wind_val <= SUP_WIND_GOOD_MAX) and (wave_h is None or wave_h <= SUP_WAVE_GOOD_MAX):
            sup_good = True
        if shore == "offshore" and wind_val >= OFFSHORE_SUP_WIND_MIN:
            sup_good = False

    surf_good = False
    if wave_h is not None:
        if SURF_WAVE_GOOD_MIN <= wave_h <= SURF_WAVE_GOOD_MAX and (wind_val is None or wind_val <= SURF_WIND_MAX):
            surf_good = True

    goods: List[str] = []
    if kite_good: goods.append("–ö–∞–π—Ç/–í–∏–Ω–≥/–í–∏–Ω–¥")
    if sup_good:  goods.append("SUP")
    if surf_good: goods.append("–°—ë—Ä—Ñ")

    if not goods:
        if DEBUG_WATER:
            logging.info("WATER[%s]: no good. wind=%s dir=%s wave_h=%s gust=%s shore=%s",
                         city, wind_val, wind_dir, wave_h, gust_val, shore)
        return None

    sst = sst_hint if isinstance(sst_hint, (int, float)) else get_sst_cached(la, lo)
    suit_txt  = _wetsuit_hint(sst)
    suit_part = f" ‚Ä¢ {suit_txt}" if suit_txt else ""

    dir_part  = f" ({card}/{shore})" if card or shore else ""
    spot_part = f" @{shore_src}" if shore_src and shore_src not in (city, f"ENV:SHORE_FACE_{_env_city_key(city)}") else ""
    env_mark  = " (ENV)" if shore_src and str(shore_src).startswith("ENV:") else ""

    # –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    return "üßú‚Äç‚ôÇÔ∏è –û—Ç–ª–∏—á–Ω–æ: " + "; ".join(goods) + spot_part + env_mark + dir_part + suit_part

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –ø–æ offset ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _fetch_temps_for_offset(lat: float, lon: float, tz_name: str, offset_days: int) -> Tuple[Optional[float], Optional[float]]:
    """–ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å tmax/tmin –∏–∑ daily –Ω–∞ —Å–º–µ—â–µ–Ω–∏–µ offset_days; —Ñ–æ–ª–ª–±—ç–∫ ‚Äî fetch_tomorrow_temps –¥–ª—è offset=1."""
    if offset_days == 1:
        # –±—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        try:
            tmax, tmin = fetch_tomorrow_temps(lat, lon, tz=tz_name)
            return tmax, tmin
        except Exception:
            pass
    wm = get_weather(lat, lon) or {}
    daily = wm.get("daily") or {}
    tmax_arr = daily.get("temperature_2m_max") or daily.get("temperature_max") or []
    tmin_arr = daily.get("temperature_2m_min") or daily.get("temperature_min") or []
    try:
        tmax = float(tmax_arr[offset_days]) if offset_days < len(tmax_arr) else None
    except Exception:
        tmax = None
    try:
        tmin = float(tmin_arr[offset_days]) if offset_days < len(tmin_arr) else None
    except Exception:
        tmin = None
    return tmax, tmin

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message(region_name: str,
                  sea_label: str, sea_cities,
                  other_label: str, other_cities,
                  tz: Union[pendulum.Timezone, str]) -> str:

    tz_obj = _as_tz(tz)
    tz_name = tz_obj.name

    P: List[str] = []
    base_date = pendulum.today(tz_obj).add(days=DAY_OFFSET)
    title_when = "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è" if DAY_OFFSET == 0 else "–Ω–∞ –∑–∞–≤—Ç—Ä–∞"
    P.append(f"<b>üåÖ {region_name}: –ø–æ–≥–æ–¥–∞ {title_when} ({base_date.format('DD.MM.YYYY')})</b>")

    # –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (—à–∞–ø–∫–∞)
    stats = day_night_stats(KLD_LAT, KLD_LON, tz=tz_name)  # –¥–ª—è RH –∏ –¥–Ω–µ–≤–Ω/–Ω–æ—á–Ω –ø—Ä–µ–¥–µ–ª–∞
    wm    = get_weather(KLD_LAT, KLD_LON) or {}
    storm = storm_flags_for_date_offset(wm, tz_obj, DAY_OFFSET)

    wcarr = (wm.get("daily", {}) or {}).get("weathercode", [])
    wc    = wcarr[DAY_OFFSET] if isinstance(wcarr, list) and len(wcarr) > DAY_OFFSET else None

    rh_min = stats.get("rh_min"); rh_max = stats.get("rh_max")
    # tmax/tmin –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å
    t_day_max, t_night_min = _fetch_temps_for_offset(KLD_LAT, KLD_LON, tz_name, DAY_OFFSET)

    wind_ms, wind_dir_deg, press_val, press_trend = pick_header_metrics(wm, tz_obj, DAY_OFFSET)
    wind_part = (
        f"üí® {wind_ms:.1f} –º/—Å ({compass(wind_dir_deg)})" if isinstance(wind_ms, (int, float)) and wind_dir_deg is not None
        else (f"üí® {wind_ms:.1f} –º/—Å" if isinstance(wind_ms, (int, float)) else "üí® –Ω/–¥")
    )
    gust = storm.get("max_gust_ms")
    if isinstance(gust, (int, float)):
        # –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—ã–≤–æ–≤ (–±–µ–∑ –µ–¥–∏–Ω–∏—Ü)
        wind_part += f" ‚Ä¢ –ø–æ—Ä—ã–≤—ã ‚Äî {int(round(gust))}"
    press_part = f"{press_val} –≥–ü–∞ {press_trend}" if isinstance(press_val, int) else "–Ω/–¥"
    desc = code_desc(wc)

    tday_i  = int(round(t_day_max)) if isinstance(t_day_max, (int, float)) else None
    tnight_i= int(round(t_night_min)) if isinstance(t_night_min, (int, float)) else None
    kal_temp = f"{tday_i}/{tnight_i}{NBSP}¬∞C" if (tday_i is not None and tnight_i is not None) else "–Ω/–¥"

    kal_parts = [
        f"üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å {kal_temp}",
        desc or None,
        wind_part,
        (f"üíß RH {rh_min:.0f}‚Äì{rh_max:.0f}%" if rh_min is not None and rh_max is not None else None),
        f"üîπ {press_part}",
    ]
    P.append(" ‚Ä¢ ".join([x for x in kal_parts if x]))
    P.append("‚Äî‚Äî‚Äî")

    if storm.get("warning"):
        P.append(storm["warning_text"])
        P.append("‚Äî‚Äî‚Äî")

    # –ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞: d/n + –∫–æ–¥ –ø–æ–≥–æ–¥—ã + üåä + –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–¥–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    temps_sea: Dict[str, Tuple[float, float, int, float | None]] = {}
    sea_lookup: Dict[str, Tuple[float, float]] = {}
    for city, (la, lo) in sea_cities:
        sea_lookup[city] = (la, lo)
        tmax, tmin = _fetch_temps_for_offset(la, lo, tz=tz_name, offset_days=DAY_OFFSET)
        if tmax is None:
            continue
        wcx = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wcx = wcx[DAY_OFFSET] if isinstance(wcx, list) and len(wcx) > DAY_OFFSET else 0
        temps_sea[city] = (tmax, tmin or tmax, wcx, get_sst(la, lo))

    if temps_sea:
        P.append(f"üåä <b>{sea_label}</b>")
        medals = ["ü•µ", "üòä", "üôÑ", "üòÆ‚Äçüí®"]  # –º–µ–¥–∞–ª–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–º —á–µ—Ç—ã—Ä—ë–º
        for i, (city, (d, n, wcx, sst_c)) in enumerate(sorted(temps_sea.items(),
                                                              key=lambda kv: kv[1][0], reverse=True)[:5]):
            d_i, n_i = int(round(d)), int(round(n))
            medal = medals[i] if i < len(medals) else "‚Ä¢"
            line = f"{medal} {city}: {d_i}/{n_i}{NBSP}¬∞C"
            descx = code_desc(wcx)
            if descx:
                line += f" {descx}"
            if sst_c is not None:
                line += f" üåä {int(round(sst_c))}{NBSP}¬∞C"
            try:
                la, lo = sea_lookup[city]
                hl = _water_highlights(city, la, lo, tz_obj, sst_c, offset_days=DAY_OFFSET)
                if hl:
                    line += f"\n   {hl}"
            except Exception as e:
                if DEBUG_WATER:
                    logging.exception("water_highlights failed for %s: %s", city, e)
            P.append(line)
        P.append("‚Äî‚Äî‚Äî")

    # –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–µ: ¬´—Ç—ë–ø–ª—ã–µ/—Ö–æ–ª–æ–¥–Ω—ã–µ¬ª (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ tmax)
    temps_oth: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in other_cities:
        tmax, tmin = _fetch_temps_for_offset(la, lo, tz=tz_name, offset_days=DAY_OFFSET)
        if tmax is None:
            continue
        wcx = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wcx = wcx[DAY_OFFSET] if isinstance(wcx, list) and len(wcx) > DAY_OFFSET else 0
        temps_oth[city] = (tmax, tmin or tmax, wcx)

    if temps_oth:
        P.append("üî• <b>–¢—ë–ø–ª—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0], reverse=True)[:3]:
            d_i, n_i = int(round(d)), int(round(n))
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d_i}/{n_i}{NBSP}¬∞C" + (f" {descx}" if descx else ""))
        P.append("‚ùÑÔ∏è <b>–•–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0])[:3]:
            d_i, n_i = int(round(d)), int(round(n))
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d_i}/{n_i}{NBSP}¬∞C" + (f" {descx}" if descx else ""))
        P.append("‚Äî‚Äî‚Äî")

    # Air + Safecast + –ø—ã–ª—å—Ü–∞ + —Ä–∞–¥–∏–∞—Ü–∏—è
    P.append("üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    air = get_air(KLD_LAT, KLD_LON) or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")
    P.extend(safecast_block_lines())
    em_sm, lbl_sm = smoke_index(air.get("pm25"), air.get("pm10"))
    if lbl_sm and str(lbl_sm).lower() not in ("–Ω–∏–∑–∫–æ–µ", "–Ω–∏–∑–∫–∏–π", "–Ω–µ—Ç", "–Ω/–¥"):
        P.append(f"üî• –ó–∞–¥—ã–º–ª–µ–Ω–∏–µ: {em_sm} {lbl_sm}")

    if (p := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {p['tree']} | –¢—Ä–∞–≤—ã: {p['grass']} | –°–æ—Ä–Ω—è–∫–∏: {p['weed']} ‚Äî —Ä–∏—Å–∫ {p['risk']}")

    if (rl := radiation_line(KLD_LAT, KLD_LON)):
        P.append(rl)
    P.append("‚Äî‚Äî‚Äî")

    # –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ / –°–æ–ª–Ω. –≤–µ—Ç–µ—Ä
    kp_tuple = get_kp() or (None, "–Ω/–¥", None, "n/d")
    try: kp, ks, kp_ts, kp_src = kp_tuple
    except Exception:
        kp = kp_tuple[0] if isinstance(kp_tuple,(list,tuple)) and len(kp_tuple)>0 else None
        ks = kp_tuple[1] if isinstance(kp_tuple,(list,tuple)) and len(kp_tuple)>1 else "–Ω/–¥"
        kp_ts, kp_src = None, "n/d"
    age_txt = ""
    if isinstance(kp_ts,int) and kp_ts>0:
        try:
            age_min = int((pendulum.now("UTC").int_timestamp - kp_ts) / 60)
            if age_min > 180: age_txt = f", üïì {age_min // 60}—á –Ω–∞–∑–∞–¥"
            elif age_min >= 0: age_txt = f", {age_min} –º–∏–Ω –Ω–∞–∑–∞–¥"
        except Exception: age_txt = ""
    if isinstance(kp,(int,float)):
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({ks}{age_txt})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    sw = get_solar_wind() or {}
    bz, bt, v, n = sw.get("bz"), sw.get("bt"), sw.get("speed_kms"), sw.get("density")
    wind_status = sw.get("status", "–Ω/–¥")
    parts=[]
    if isinstance(bz,(int,float)): parts.append(f"Bz {bz:.1f} nT")
    if isinstance(bt,(int,float)): parts.append(f"Bt {bt:.1f} nT")
    if isinstance(v,(int,float)):  parts.append(f"v {v:.0f} –∫–º/—Å")
    if isinstance(n,(int,float)):  parts.append(f"n {n:.1f} —Å–º‚Åª¬≥")
    if parts: P.append("üå¨Ô∏è –°–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä: " + ", ".join(parts) + f" ‚Äî {wind_status}")
    try:
        if (isinstance(kp,(int,float)) and kp >= 5) and isinstance(wind_status,str) and ("—Å–ø–æ–∫–æ–π" in wind_status.lower()):
            P.append("‚ÑπÔ∏è –ü–æ –≤–µ—Ç—Ä—É —Å–µ–π—á–∞—Å —Å–ø–æ–∫–æ–π–Ω–æ; Kp ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞ 3 —á.")
    except Exception: pass

    # –®—É–º–∞–Ω (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    schu_state = {} if DISABLE_SCHUMANN else get_schumann_with_fallback()
    if not DISABLE_SCHUMANN:
        P.append(schumann_line(schu_state))
        P.append("‚Äî‚Äî‚Äî")

    # –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (–¥–ª—è Asia/Nicosia; —Å–º–µ—â–µ–Ω–∏–µ –ø–æ —Ä–µ–∂–∏–º—É)
    tz_nic = pendulum.timezone("Asia/Nicosia")
    date_for_astro = pendulum.today(tz_nic).add(days=DAY_OFFSET)
    P.append(build_astro_section(date_local=date_for_astro, tz_local="Asia/Nicosia"))
    P.append("‚Äî‚Äî‚Äî")

    # –í—ã–≤–æ–¥
    P.append("üìú <b>–í—ã–≤–æ–¥</b>")
    P.extend(build_conclusion(kp, ks, air, storm, schu_state))
    P.append("‚Äî‚Äî‚Äî")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ)
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    theme = (
        "–ø–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞" if storm.get("warning") else
        ("–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if isinstance(kp,(int,float)) and kp >= 5 else
         ("–ø–ª–æ—Ö–æ–π –≤–æ–∑–¥—É—Ö" if _is_air_bad(air)[0] else
          ("–≤–æ–ª–Ω—ã –®—É–º–∞–Ω–∞" if (schu_state or {}).get("status_code") == "red" else
           "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å"))))
    for t in safe_tips(theme):
        P.append(t)

    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(base_date, region_name)}")
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®—É–º–∞–Ω (—á—Ç–µ–Ω–∏–µ/—Ñ–æ–ª–ª–±—ç–∫) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _read_json(path: Path) -> Optional[Dict[str, Any]]:
    try:
        if not path.exists(): return None
        data = json.loads(path.read_text("utf-8"))
        return data if isinstance(data, dict) else None
    except Exception as e:
        logging.warning("Safecast read error from %s: %s", path, e)
        return None

def _read_schumann_history() -> List[Dict[str, Any]]:
    candidates: List[Path] = []
    env_path = os.getenv("SCHU_FILE")
    if env_path: candidates.append(Path(env_path))
    here = Path(__file__).parent
    candidates += [here / "schumann_hourly.json", here / "data" / "schumann_hourly.json", here.parent / "schumann_hourly.json"]
    for p in candidates:
        try:
            if p.exists():
                txt = p.read_text("utf-8").strip()
                data = json.loads(txt) if txt else []
                if isinstance(data, list): return data
        except Exception as e:
            logging.warning("Schumann history read error from %s: %s", p, e)
    return []

def _schumann_trend(values: List[float], delta: float = 0.1) -> str:
    if not values: return "‚Üí"
    tail = values[-24:] if len(values) > 24 else values
    if len(tail) < 2: return "‚Üí"
    avg_prev = sum(tail[:-1]) / (len(tail) - 1)
    d = tail[-1] - avg_prev
    return "‚Üë" if d >= delta else "‚Üì" if d <= -delta else "‚Üí"

def _freq_status(freq: Optional[float]) -> tuple[str, str]:
    if not isinstance(freq, (int, float)): return "üü° –∫–æ–ª–µ–±–∞–Ω–∏—è", "yellow"
    f = float(freq)
    if 7.4 <= f <= 8.4:
        return ("üü¢ –≤ –Ω–æ—Ä–º–µ", "green") if (7.7 <= f <= 8.1) else ("üü° –∫–æ–ª–µ–±–∞–Ω–∏—è", "yellow")
    return "üî¥ —Å–∏–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "red"

def _trend_text(sym: str) -> str:
    return {"‚Üë": "—Ä–∞—Å—Ç—ë—Ç", "‚Üì": "—Å–Ω–∏–∂–∞–µ—Ç—Å—è", "‚Üí": "—Å—Ç–∞–±–∏–ª—å–Ω–æ"}.get(sym, "—Å—Ç–∞–±–∏–ª—å–Ω–æ")

def _h7_text(h7_amp: Optional[float], h7_spike: Optional[bool]) -> str:
    if isinstance(h7_amp, (int, float)):
        return f"H7: {h7_amp:.1f} (‚ö° –≤—Å–ø–ª–µ—Å–∫)" if h7_spike else f"H7: {h7_amp:.1f} ‚Äî —Å–ø–æ–∫–æ–π–Ω–æ"
    return "H7: ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

def _is_stale(ts: Any, max_age_sec: int = 7200) -> bool:
    if not isinstance(ts, (int, float)): return False
    try:
        now_ts = pendulum.now("UTC").int_timestamp
        return (now_ts - int(ts)) > max_age_sec
    except Exception:
        return False

def _gentle_interpretation(code: str) -> str:
    if code == "green":  return "–í–æ–ª–Ω—ã –®—É–º–∞–Ω–∞ –±–ª–∏–∑–∫–∏ –∫ –Ω–æ—Ä–º–µ ‚Äî –æ—Ä–≥–∞–Ω–∏–∑–º —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –∫–∞–∫ –Ω–∞ –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å."
    if code == "yellow": return "–ó–∞–º–µ—Ç–Ω—ã –∫–æ–ª–µ–±–∞–Ω–∏—è ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ –ª—ë–≥–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –ø–æ–≥–æ–¥–µ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é."
    return "–°–∏–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è ‚Äî –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Ç–µ—Å—å –∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é –∏ —Å–Ω–∏–∂–∞–π—Ç–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏."

def get_schumann_with_fallback() -> Dict[str, Any]:
    try:
        import schumann
        if hasattr(schumann, "get_schumann"):
            payload = schumann.get_schumann() or {}
            cached = bool(payload.get("cached"))
            if not cached and isinstance(payload.get("ts"), (int, float)) and _is_stale(payload["ts"]):
                cached = True
            return {
                "freq": payload.get("freq"),
                "amp": payload.get("amp"),
                "trend": payload.get("trend", "‚Üí"),
                "trend_text": payload.get("trend_text") or _trend_text(payload.get("trend", "‚Üí")),
                "status": payload.get("status") or _freq_status(payload.get("freq"))[0],
                "status_code": payload.get("status_code") or _freq_status(payload.get("freq"))[1],
                "h7_text": payload.get("h7_text") or _h7_text(payload.get("h7_amp"), payload.get("h7_spike")),
                "h7_amp": payload.get("h7_amp"),
                "h7_spike": payload.get("h7_spike"),
                "interpretation": payload.get("interpretation") or _gentle_interpretation(
                    payload.get("status_code") or _freq_status(payload.get("freq"))[1]
                ),
                "cached": cached,
            }
    except Exception:
        pass

    arr = _read_schumann_history()
    if not arr:
        return {"freq": None, "amp": None, "trend": "‚Üí",
                "trend_text": "—Å—Ç–∞–±–∏–ª—å–Ω–æ", "status": "üü° –∫–æ–ª–µ–±–∞–Ω–∏—è", "status_code": "yellow",
                "h7_text": _h7_text(None, None), "h7_amp": None, "h7_spike": None,
                "interpretation": _gentle_interpretation("yellow"), "cached": True}

    amps: List[float] = []; last: Optional[Dict[str, Any]] = None
    for rec in arr:
        if isinstance(rec, dict) and isinstance(rec.get("amp"), (int, float)):
            amps.append(float(rec["amp"]))
        last = rec

    trend = _schumann_trend(amps)
    freq = (last.get("freq") if last else None)
    amp  = (last.get("amp")  if last else None)
    h7_amp = (last.get("h7_amp") if last else None)
    h7_spike = (last.get("h7_spike") if last else None)
    src = ((last or {}).get("src") or "").lower()
    cached = (src == "cache") or _is_stale((last or {}).get("ts"))
    status, code = _freq_status(freq)
    return {
        "freq": freq if isinstance(freq, (int, float)) else None,
        "amp":  amp  if isinstance(amp,  (int, float)) else None,
        "trend": trend, "trend_text": _trend_text(trend),
        "status": status, "status_code": code,
        "h7_text": _h7_text(h7_amp, h7_spike),
        "h7_amp": h7_amp if isinstance(h7_amp, (int, float)) else None,
        "h7_spike": h7_spike if isinstance(h7_spike, bool) else None,
        "interpretation": _gentle_interpretation(code),
        "cached": cached,
    }

def schumann_line(s: Dict[str, Any]) -> str:
    freq = s.get("freq"); amp = s.get("amp")
    trend_text = s.get("trend_text") or _trend_text(s.get("trend", "‚Üí"))
    status_lbl = s.get("status") or _freq_status(freq)[0]
    h7line = s.get("h7_text") or _h7_text(s.get("h7_amp"), s.get("h7_spike"))
    interp = s.get("interpretation") or _gentle_interpretation(s.get("status_code") or _freq_status(freq)[1])
    stale = " ‚è≥ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö —á–∏—Å–µ–ª" if s.get("cached") else ""
    if not isinstance(freq, (int, float)) and not isinstance(amp, (int, float)):
        return f"{status_lbl}{stale} ‚Ä¢ —Ç—Ä–µ–Ω–¥: {trend_text} ‚Ä¢ {h7line}\n{interp}"
    fstr = f"{freq:.2f}" if isinstance(freq, (int, float)) else "–Ω/–¥"
    astr = f"{amp:.2f} pT" if isinstance(amp, (int, float)) else "–Ω/–¥"
    return f"{status_lbl}{stale} ‚Ä¢ –®—É–º–∞–Ω: {fstr} –ì—Ü / {astr} ‚Ä¢ —Ç—Ä–µ–Ω–¥: {trend_text} ‚Ä¢ {h7line}\n{interp}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Safecast ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def load_safecast() -> Optional[Dict[str, Any]]:
    paths: List[Path] = []
    if os.getenv("SAFECAST_FILE"):
        paths.append(Path(os.getenv("SAFECAST_FILE")))
    here = Path(__file__).parent
    paths.append(here / "data" / "safecast_kaliningrad.json")
    sc: Optional[Dict[str, Any]] = None
    for p in paths:
        sc = _read_json(p)
        if sc: break
    if not sc: return None
    ts = sc.get("ts")
    if not isinstance(ts, (int, float)): return None
    now_ts = pendulum.now("UTC").int_timestamp
    if now_ts - int(ts) > 24 * 3600: return None
    return sc

def safecast_usvh_risk(x: float) -> tuple[str, str]:
    if x <= 0.15: return "üü¢", "–Ω–∏–∑–∫–∏–π"
    if x <= 0.30: return "üü°", "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
    return "üîµ", "–≤—ã—à–µ –Ω–æ—Ä–º—ã"

def official_usvh_risk(x: float) -> tuple[str, str]:
    if x <= 0.15: return "üü¢", "–Ω–∏–∑–∫–∏–π"
    if x <= 0.30: return "üü°", "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π"
    return "üî¥", "–≤—ã—Å–æ–∫–∏–π"

def safecast_pm_level(pm25: Optional[float], pm10: Optional[float]) -> Tuple[str, str]:
    def l25(x: float) -> int: return 0 if x<=15 else 1 if x<=35 else 2 if x<=55 else 3
    def l10(x: float) -> int: return 0 if x<=30 else 1 if x<=50 else 2 if x<=100 else 3
    worst = -1
    if isinstance(pm25,(int,float)): worst=max(worst,l25(float(pm25)))
    if isinstance(pm10,(int,float)): worst=max(worst,l10(float(pm10)))
    if worst<0: return "‚ö™","–Ω/–¥"
    return (["üü¢","üü°","üü†","üî¥"][worst],
            ["–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"][worst])

def safecast_block_lines() -> List[str]:
    sc = load_safecast()
    if not sc: return []
    lines: List[str] = []
    pm25, pm10 = sc.get("pm25"), sc.get("pm10")
    if isinstance(pm25,(int,float)) or isinstance(pm10,(int,float)):
        em,lbl = safecast_pm_level(pm25,pm10)
        parts=[]
        if isinstance(pm25,(int,float)): parts.append(f"PM‚ÇÇ.‚ÇÖ {pm25:.0f}")
        if isinstance(pm10,(int,float)): parts.append(f"PM‚ÇÅ‚ÇÄ {pm10:.0f}")
        lines.append(f"üß™ Safecast: {em} {lbl} ¬∑ " + " | ".join(parts))
    cpm = sc.get("cpm"); usvh = sc.get("radiation_usvh")
    if not isinstance(usvh,(int,float)) and isinstance(cpm,(int,float)):
        usvh = float(cpm) * CPM_TO_USVH
    if isinstance(usvh,(int,float)):
        em,lbl = safecast_usvh_risk(float(usvh))
        if isinstance(cpm,(int,float)):
            lines.append(f"üìü –†–∞–¥–∏–∞—Ü–∏—è (Safecast): {cpm:.0f} CPM ‚âà {usvh:.3f} ŒºSv/h ‚Äî {em} {lbl} (–º–µ–¥–∏–∞–Ω–∞ 6 —á)")
        else:
            lines.append(f"üìü –†–∞–¥–∏–∞—Ü–∏—è (Safecast): ‚âà {usvh:.3f} ŒºSv/h ‚Äî {em} {lbl} (–º–µ–¥–∏–∞–Ω–∞ 6 —á)")
    elif isinstance(cpm,(int,float)):
        lines.append(f"üìü –†–∞–¥–∏–∞—Ü–∏—è (Safecast): {cpm:.0f} CPM (–º–µ–¥–∏–∞–Ω–∞ 6 —á)")
    return lines

def radiation_line(lat: float, lon: float) -> Optional[str]:
    data = get_radiation(lat, lon) or {}
    dose = data.get("dose")
    if isinstance(dose,(int,float)):
        em,lbl = official_usvh_risk(float(dose))
        return f"{em} –†–∞–¥–∏–∞—Ü–∏—è: {dose:.3f} ŒºSv/h ({lbl})"
    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê—Å—Ç—Ä–æ–±–ª–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ZODIAC = {"–û–≤–µ–Ω":"‚ôà","–¢–µ–ª–µ—Ü":"‚ôâ","–ë–ª–∏–∑–Ω–µ—Ü—ã":"‚ôä","–†–∞–∫":"‚ôã","–õ–µ–≤":"‚ôå","–î–µ–≤–∞":"‚ôç","–í–µ—Å—ã":"‚ôé","–°–∫–æ—Ä–ø–∏–æ–Ω":"‚ôè","–°—Ç—Ä–µ–ª–µ—Ü":"‚ôê","–ö–æ–∑–µ—Ä–æ–≥":"‚ôë","–í–æ–¥–æ–ª–µ–π":"‚ôí","–†—ã–±—ã":"‚ôì"}
def zsym(s: str) -> str:
    for name,sym in ZODIAC.items(): s = s.replace(name, sym)
    return s

def load_calendar(path: str = "lunar_calendar.json") -> dict:
    try: data = json.loads(Path(path).read_text("utf-8"))
    except Exception: return {}
    if isinstance(data, dict) and isinstance(data.get("days"), dict): return data["days"]
    return data if isinstance(data, dict) else {}

def _parse_voc_dt(s: str, tz: pendulum.tz.timezone.Timezone):
    if not s: return None
    try: return pendulum.parse(s).in_tz(tz)
    except Exception: pass
    try:
        dmy, hm = s.split(); d,m = map(int,dmy.split(".")); hh,mm = map(int,hm.split(":"))
        year = pendulum.today(tz).year
        return pendulum.datetime(year, m, d, hh, mm, tz=tz)
    except Exception: return None

def voc_interval_for_date(rec: dict, tz_local: str = "Asia/Nicosia"):
    if not isinstance(rec, dict): return None
    voc = (rec.get("void_of_course") or rec.get("voc") or rec.get("void") or {})
    if not isinstance(voc, dict): return None
    s = voc.get("start") or voc.get("from") or voc.get("start_time")
    e = voc.get("end")   or voc.get("to")   or rec.get("end_time")
    if not s or not e: return None
    tz = pendulum.timezone(tz_local)
    t1 = _parse_voc_dt(s, tz); t2 = _parse_voc_dt(e, tz)
    if not t1 or not t2: return None
    return (t1, t2)

def format_voc_for_post(start: pendulum.DateTime, end: pendulum.DateTime, label: str = "—Å–µ–≥–æ–¥–Ω—è") -> str:
    if not start or not end: return ""
    return f"‚ö´Ô∏è VoC {label} {start.format('HH:mm')}‚Äì{end.format('HH:mm')}."

def lunar_advice_for_date(cal: dict, date_obj) -> list[str]:
    key = date_obj.to_date_string() if hasattr(date_obj, "to_date_string") else str(date_obj)
    rec = (cal or {}).get(key, {}) or {}
    adv = rec.get("advice")
    return [str(x).strip() for x in adv][:3] if isinstance(adv, list) and adv else []

def _astro_llm_bullets(date_str: str, phase: str, percent: int, sign: str, voc_text: str) -> List[str]:
    cache_file = CACHE_DIR / f"astro_{date_str}.txt"
    if cache_file.exists():
        lines = [l.strip() for l in cache_file.read_text("utf-8").splitlines() if l.strip()]
        if lines: return lines[:3]
    if not USE_DAILY_LLM:
        return []
    system = ("–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –ê—Å—Ç—Ä–æ–≠–∫—Å–ø–µ—Ä—Ç, —Ç—ã –ª—É—á—à–µ –≤—Å–µ—Ö –∑–Ω–∞–µ—à—å –∫–∞–∫ —ç–Ω–µ—Ä–≥–∏–∏ –ª—É–Ω—ã –∏ –∑–≤–µ–∑–¥ –≤–ª–∏—è—é—Ç –Ω–∞ –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫–∞."
              "–¢—ã –¥–µ–ª–∞–µ—à—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É (2‚Äì3 —Å—Ç—Ä–æ–∫–∏). "
              "–ü–∏—à–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ –ø–æ-—Ä—É—Å—Å–∫–∏, –±–µ–∑ –∫–ª–∏—à–µ. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: "
              "—Ñ–∞–∑–∞ –õ—É–Ω—ã, –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å, –∑–Ω–∞–∫ –õ—É–Ω—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª Void-of-Course. "
              "–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –¥—Ä—É–≥–∏—Ö –ø–ª–∞–Ω–µ—Ç –∏ –∞—Å–ø–µ–∫—Ç–æ–≤. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ–¥–∑–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω—É –º—ã—Å–ª—å.")
    prompt = (f"–î–∞—Ç–∞: {date_str}. –§–∞–∑–∞ –õ—É–Ω—ã: {phase or '–Ω/–¥'} ({percent}% –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏). "
              f"–ó–Ω–∞–∫: {sign or '–Ω/–¥'}. VoC: {voc_text or '–Ω–µ—Ç'}.")
    try:
        txt = gpt_complete(prompt=prompt, system=system, temperature=ASTRO_LLM_TEMP, max_tokens=160)
        raw_lines = [l.strip() for l in (txt or "").splitlines() if l.strip()]
        safe: List[str] = []
        for l in raw_lines:
            l = _sanitize_line(l, max_len=120)
            if not l or _looks_gibberish(l): continue
            if not re.match(r"^\W", l):
                l = "‚Ä¢ " + l
            safe.append(l)
        if safe:
            cache_file.write_text("\n".join(safe[:3]), "utf-8")
            return safe[:3]
    except Exception as e:
        logging.warning("Astro LLM failed: %s", e)
    return []

def build_astro_section(date_local: Optional[pendulum.Date] = None, tz_local: str = "Asia/Nicosia") -> str:
    tz = pendulum.timezone(tz_local)
    date_local = date_local or pendulum.today(tz)
    date_key = date_local.format("YYYY-MM-DD")
    cal = load_calendar("lunar_calendar.json")
    rec = cal.get(date_key, {}) if isinstance(cal, dict) else {}
    phase_raw = (rec.get("phase_name") or rec.get("phase") or "").strip()
    phase_name = re.sub(r"^[^\w–ê-–Ø–∞-—è–Å—ë]+", "", phase_raw).split(",")[0].strip()
    percent = rec.get("percent") or rec.get("illumination") or rec.get("illum") or 0
    try: percent = int(round(float(percent)))
    except Exception: percent = 0
    sign = rec.get("sign") or rec.get("zodiac") or ""
    voc_text = ""
    voc = voc_interval_for_date(rec, tz_local=tz_local)
    if voc:
        t1, t2 = voc; voc_text = f"{t1.format('HH:mm')}‚Äì{t2.format('HH:mm')}"
    bullets = _astro_llm_bullets(date_local.format("DD.MM.YYYY"), phase_name, int(percent or 0), sign, voc_text)
    if not bullets:
        adv = rec.get("advice") or []
        bullets = [f"‚Ä¢ {a}" for a in adv[:3]] if adv else []
    if not bullets:
        base = f"üåô –§–∞–∑–∞: {phase_name}" if phase_name else "üåô –õ—É–Ω–Ω—ã–π –¥–µ–Ω—å –≤ –Ω–æ—Ä–º–µ"
        prm  = f" ({percent}%)" if isinstance(percent, int) and percent else ""
        bullets = [base + prm, (f"‚ôí –ó–Ω–∞–∫: {sign}" if sign else "‚Äî –∑–Ω–∞–∫ –õ—É–Ω—ã –Ω/–¥")]
    lines = ["üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>"]
    # –ï—Å–ª–∏ LLM –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –º–∞–∫—Å–∏–º—É–º 2 –ø—É–Ω–∫—Ç–∞, –∏–Ω–∞—á–µ –¥–æ 3
    max_items = 3 if USE_DAILY_LLM else 2
    lines += [zsym(x) for x in bullets[:max_items]]
    llm_used = bool(bullets) and USE_DAILY_LLM
    if voc_text and not llm_used:
        lines.append(f"‚ö´Ô∏è VoC: {voc_text}")
    return "\n".join(lines)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_common_post(
    bot: Bot,
    chat_id: int,
    region_name: str,
    sea_label: str,
    sea_cities,
    other_label: str,
    other_cities,
    tz: Union[pendulum.Timezone, str],
) -> None:
    msg = build_message(region_name, sea_label, sea_cities, other_label, other_cities, tz)
    await bot.send_message(chat_id=chat_id, text=msg, parse_mode=constants.ParseMode.HTML, disable_web_page_preview=True)

async def main_common(
    bot: Bot,
    chat_id: int,
    region_name: str,
    sea_label: str,
    sea_cities,
    other_label: str,
    other_cities,
    tz: Union[pendulum.Timezone, str],
) -> None:
    await send_common_post(
        bot=bot,
        chat_id=chat_id,
        region_name=region_name,
        sea_label=sea_label,
        sea_cities=sea_cities,
        other_label=other_label,
        other_cities=other_cities,
        tz=tz,
    )

__all__ = [
    "build_message",
    "send_common_post",
    "main_common",
    "schumann_line",
    "get_schumann_with_fallback",
    "pick_tomorrow_header_metrics",
    "storm_flags_for_tomorrow",
]
