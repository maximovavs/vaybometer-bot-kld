#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_common.py ‚Äî Kaliningrad (VayboMeter).

–ì–ª–∞–≤–Ω–æ–µ:
‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç (compact): —à–∞–ø–∫–∞, ¬´–ø–æ–≥—Ä–µ—Ç—å—Å—è/–æ—Å—Ç—ã—Ç—å¬ª, –º–æ—Ä–µ (–≥–∏–¥—Ä–∏–∫), –∑–∞–∫–∞—Ç,
  –∫—É—Ä—Å—ã (—É—Ç—Ä–æ), –≤–æ–∑–¥—É—Ö, UVI (–µ—Å–ª–∏ ‚â•3), –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞+–≤–µ—Ç–µ—Ä, (–æ–ø—Ü.) –®—É–º–∞–Ω, ¬´–ò—Ç–æ–≥–æ¬ª,
  ¬´–°–µ–≥–æ–¥–Ω—è: ...; ...; ...¬ª, –ø—Ä–∞–∑–¥–Ω–∏–∫/—Ñ–∞–∫—Ç, —Ö—ç—à—Ç–µ–≥–∏.
‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç (legacy): –æ—Å—Ç–∞–≤–ª–µ–Ω —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å nightly.

ENV:
  POST_MODE      ‚àà {morning, evening}
  DAY_OFFSET     ‚Äî 0 –¥–ª—è morning (—Å–µ–≥–æ–¥–Ω—è), 1 –¥–ª—è evening (–∑–∞–≤—Ç—Ä–∞)
  ASTRO_OFFSET   ‚Äî –¥–ª—è –∞—Å—Ç—Ä–æ–±–ª–æ–∫–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  SHOW_AIR       ‚Äî –ø–µ—á–∞—Ç–∞—Ç—å –±–ª–æ–∫–∏ –≤–æ–∑–¥—É—Ö–∞/–ø—ã–ª—å—Ü—ã/—Ä–∞–¥–∏–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True –¥–ª—è morning)
  SHOW_SPACE     ‚Äî –ø–µ—á–∞—Ç–∞—Ç—å Kp/—Å–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True –¥–ª—è morning)
  SHOW_SCHUMANN  ‚Äî –ø–µ—á–∞—Ç–∞—Ç—å –®—É–º–∞–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True –¥–ª—è morning)
"""

from __future__ import annotations

import os
import re
import json
import html
import math
import logging
from pathlib import Path
from typing import Any, Dict, List, Tuple, Optional, Union

import pendulum
from telegram import Bot, constants

from utils   import compass, get_fact, AIR_EMOJI, pm_color, kp_emoji, kmh_to_ms
from weather import get_weather
from air     import get_air, get_sst, get_kp, get_solar_wind
from pollen  import get_pollen
from radiation import get_radiation

# LLM (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è ¬´—Å–æ–≤–µ—Ç—ã¬ª –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω; –∏–Ω–∞—á–µ —Ñ–æ–ª–ª–±—ç–∫)
try:
    from gpt import gpt_blurb  # type: ignore
except Exception:  # pragma: no cover
    gpt_blurb = None  # type: ignore

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ENV flags ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _env_on(name: str, default: bool) -> bool:
    v = os.getenv(name)
    if v is None:
        return default
    return str(v).strip().lower() in ("1", "true", "yes", "on")

POST_MODE    = (os.getenv("POST_MODE") or "evening").strip().lower()
DAY_OFFSET   = int(os.getenv("DAY_OFFSET", "0" if POST_MODE == "morning" else "1"))
ASTRO_OFFSET = int(os.getenv("ASTRO_OFFSET", str(DAY_OFFSET)))

SHOW_AIR      = _env_on("SHOW_AIR",      POST_MODE != "evening")
SHOW_SPACE    = _env_on("SHOW_SPACE",    POST_MODE != "evening")
SHOW_SCHUMANN = _env_on("SHOW_SCHUMANN", POST_MODE != "evening")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
NBSP = "\u00A0"
RUB  = "\u20BD"  # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä—É–±–ª—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥–º–µ–Ω—è–ª—Å—è —à—Ä–∏—Ñ—Ç–æ–º

KLD_LAT, KLD_LON = 54.710426, 20.452214
CACHE_DIR = Path(".cache"); CACHE_DIR.mkdir(exist_ok=True, parents=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ WMO ‚Üí —ç–º–æ–¥–∑–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
WMO_DESC = {
    0:"‚òÄÔ∏è —è—Å–Ω–æ",1:"‚õÖ —á.–æ–±–ª",2:"‚òÅÔ∏è –æ–±–ª",3:"üå• –ø–∞—Å–º",45:"üå´ —Ç—É–º–∞–Ω",48:"üå´ –∏–∑–º–æ—Ä–æ–∑—å",
    51:"üå¶ –º–æ—Ä–æ—Å—å",61:"üåß –¥–æ–∂–¥—å",71:"‚ùÑÔ∏è —Å–Ω–µ–≥",95:"‚õà –≥—Ä–æ–∑–∞"
}
def code_desc(c: Any) -> Optional[str]:
    try:
        return WMO_DESC.get(int(c))
    except Exception:
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _escape_html(s: str) -> str:
    return html.escape(str(s), quote=False)

def kmh_arr_to_ms(arr: List[Any]) -> List[float]:
    out=[]
    for v in arr:
        try:
            out.append(float(v) / 3.6)
        except Exception:
            pass
    return out

def _fmt_delta(x: Any) -> str:
    """–§–æ—Ä–º–∞—Ç ¬´–¥–µ–ª—Ç—ã¬ª –¥–ª—è FX: —É–∑–∫–∏–π –º–∏–Ω—É—Å, 2 –∑–Ω–∞–∫–∞."""
    try:
        v = float(x)
    except Exception:
        return "0.00"
    sign = "‚àí" if v < 0 else ""
    return f"{sign}{abs(v):.2f}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Open-Meteo helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _hourly_times(wm: Dict[str, Any]) -> List[pendulum.DateTime]:
    hourly = wm.get("hourly") or {}
    times = hourly.get("time") or hourly.get("time_local") or []
    out: List[pendulum.DateTime] = []
    for t in times:
        try:
            out.append(pendulum.parse(str(t)))
        except Exception:
            pass
    return out

def _nearest_index_for_day(times: List[pendulum.DateTime],
                           date_obj: pendulum.Date,
                           prefer_hour: int,
                           tz: pendulum.Timezone) -> Optional[int]:
    if not times:
        return None
    target = pendulum.datetime(date_obj.year, date_obj.month, date_obj.day, prefer_hour, 0, tz=tz)
    best_i, best_diff = None, None
    for i, dt in enumerate(times):
        try:
            dl = dt.in_tz(tz)
        except Exception:
            dl = dt
        if dl.date() != date_obj:
            continue
        diff = abs((dl - target).total_seconds())
        if best_diff is None or diff < best_diff:
            best_i, best_diff = i, diff
    return best_i

def _daily_times(wm: Dict[str, Any]) -> List[pendulum.Date]:
    daily = wm.get("daily") or {}
    times = daily.get("time") or []
    out: List[pendulum.Date] = []
    for t in times:
        try:
            out.append(pendulum.parse(str(t)).date())
        except Exception:
            pass
    return out

def pick_header_metrics_for_offset(wm: Dict[str, Any], tz: pendulum.Timezone, offset_days: int
) -> Tuple[Optional[float], Optional[int], Optional[int], str]:
    """–í–µ—Ç–µ—Ä (–º/—Å), –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (¬∞), –¥–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–¥ –∫ –ø–æ–ª—É–¥–Ω—é —Ü–µ–ª–µ–≤–æ–≥–æ –¥–Ω—è."""
    hourly = wm.get("hourly") or {}
    times  = _hourly_times(wm)
    tgt    = pendulum.now(tz).add(days=offset_days).date()
    idx_noon = _nearest_index_for_day(times, tgt, 12, tz)
    idx_morn = _nearest_index_for_day(times, tgt, 6, tz)

    spd_kmh = hourly.get("wind_speed_10m") or hourly.get("windspeed_10m") or []
    dir_deg = hourly.get("wind_direction_10m") or hourly.get("winddirection_10m") or []
    prs     = hourly.get("surface_pressure") or []

    wind_ms = None; wind_dir = None; press_val = None; trend = "‚Üí"
    try:
        if idx_noon is not None:
            if idx_noon < len(spd_kmh):
                wind_ms = float(spd_kmh[idx_noon]) / 3.6
            if idx_noon < len(dir_deg):
                wind_dir = int(round(float(dir_deg[idx_noon])))
            if idx_noon < len(prs):
                press_val = int(round(float(prs[idx_noon])))
            if idx_morn is not None and idx_morn < len(prs) and idx_noon is not None and idx_noon < len(prs):
                diff = float(prs[idx_noon]) - float(prs[idx_morn])
                trend = "‚Üë" if diff >= 0.3 else "‚Üì" if diff <= -0.3 else "‚Üí"
    except Exception:
        pass

    return wind_ms, wind_dir, press_val, trend

def _fetch_temps_for_offset(lat: float, lon: float, tz_name: str, offset_days: int
) -> Tuple[Optional[float], Optional[float], Optional[int]]:
    wm = get_weather(lat, lon) or {}
    daily = wm.get("daily") or {}
    times = _daily_times(wm)
    tz = pendulum.timezone(tz_name)
    target = pendulum.today(tz).add(days=offset_days).date()
    try:
        idx = times.index(target)
    except ValueError:
        return None, None, None
    def _num(arr, i):
        try:
            v = arr[i]
            return float(v) if v is not None else None
        except Exception:
            return None
    tmax = _num(daily.get("temperature_2m_max", []), idx)
    tmin = _num(daily.get("temperature_2m_min", []), idx)
    wc   = None
    try:
        wc = int((daily.get("weathercode") or [None])[idx])
    except Exception:
        wc = None
    return tmax, tmin, wc

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®—É–º–∞–Ω ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _read_json(path: Path) -> Optional[Dict[str, Any]]:
    try:
        if not path.exists():
            return None
        return json.loads(path.read_text("utf-8"))
    except Exception:
        return None

def _schu_freq_status(freq: Optional[float]) -> tuple[str, str]:
    if not isinstance(freq, (int, float)):
        return "üü° –∫–æ–ª–µ–±–∞–Ω–∏—è", "yellow"
    f = float(freq)
    if 7.4 <= f <= 8.4:
        return ("üü¢ –≤ –Ω–æ—Ä–º–µ", "green") if (7.7 <= f <= 8.1) else ("üü° –∫–æ–ª–µ–±–∞–Ω–∏—è", "yellow")
    return "üî¥ —Å–∏–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "red"

def get_schumann_with_fallback() -> Dict[str, Any]:
    # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–¥—É–ª—è, –∑–∞—Ç–µ–º ‚Äî –∏–∑ —Ñ–∞–π–ª–∞
    try:
        import schumann  # type: ignore
        if hasattr(schumann, "get_schumann"):
            payload = schumann.get_schumann() or {}
            return {
                "freq": payload.get("freq"),
                "status": payload.get("status") or _schu_freq_status(payload.get("freq"))[0],
                "status_code": payload.get("status_code") or _schu_freq_status(payload.get("freq"))[1],
            }
    except Exception:
        pass
    here = Path(__file__).parent
    data = _read_json(here / "data" / "schumann_hourly.json") or {}
    last = (data if isinstance(data, dict) else {})  # –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Ñ–æ–ª–ª–±—ç–∫
    st, code = _schu_freq_status(last.get("freq"))
    return {"freq": last.get("freq"), "status": st, "status_code": code}

def schumann_line(s: Dict[str, Any]) -> Optional[str]:
    """–ü–µ—á–∞—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–µ–ª—ë–Ω—ã–π (–ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–≤—Ç–æ—Ä–∞)."""
    if (s or {}).get("status_code") == "green":
        return None
    freq = s.get("freq")
    fstr = f"{freq:.2f} –ì—Ü" if isinstance(freq, (int, float)) else "–Ω/–¥"
    return f"{s.get('status','–Ω/–¥')} ‚Ä¢ –®—É–º–∞–Ω: {fstr}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Safecast & —Ä–∞–¥–∏–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CPM_TO_USVH = float(os.getenv("CPM_TO_USVH", "0.000571"))

def load_safecast() -> Optional[Dict[str, Any]]:
    paths: List[Path] = []
    envp = os.getenv("SAFECAST_FILE")
    if envp:
        paths.append(Path(envp))
    here = Path(__file__).parent
    paths.append(here / "data" / "safecast_kaliningrad.json")
    for p in paths:
        sc = _read_json(p)
        if not sc:
            continue
        ts = sc.get("ts")
        if not isinstance(ts, (int, float)):
            continue
        now_ts = pendulum.now("UTC").int_timestamp
        if now_ts - int(ts) <= 24 * 3600:
            return sc
    return None

def _pm_level(pm25: Optional[float], pm10: Optional[float]) -> Tuple[str, str]:
    def l25(x: float) -> int: return 0 if x<=15 else 1 if x<=35 else 2 if x<=55 else 3
    def l10(x: float) -> int: return 0 if x<=30 else 1 if x<=50 else 2 if x<=100 else 3
    worst = -1
    if isinstance(pm25,(int,float)): worst = max(worst, l25(float(pm25)))
    if isinstance(pm10,(int,float)): worst = max(worst, l10(float(pm10)))
    if worst < 0: return "‚ö™","–Ω/–¥"
    return (["üü¢","üü°","üü†","üî¥"][worst],
            ["–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"][worst])

def _rad_risk(usvh: float) -> Tuple[str, str]:
    if usvh <= 0.15: return "üü¢", "–Ω–∏–∑–∫–∏–π"
    if usvh <= 0.30: return "üü°", "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π"
    return "üî¥", "–≤—ã—Å–æ–∫–∏–π"

def safecast_summary_line() -> Optional[str]:
    sc = load_safecast()
    if not sc:
        return None
    pm25, pm10 = sc.get("pm25"), sc.get("pm10")
    cpm, usvh = sc.get("cpm"), sc.get("radiation_usvh")
    if not isinstance(usvh, (int, float)) and isinstance(cpm, (int, float)):
        usvh = float(cpm) * CPM_TO_USVH

    parts: List[str] = []
    # –í–æ–∑–¥—É—Ö –ø–æ PM
    air_emoji, air_lbl = _pm_level(pm25, pm10)
    pm_parts=[]
    if isinstance(pm25,(int,float)): pm_parts.append(f"PM‚ÇÇ.‚ÇÖ {pm25:.0f}")
    if isinstance(pm10,(int,float)): pm_parts.append(f"PM‚ÇÅ‚ÇÄ {pm10:.0f}")
    if pm_parts:
        parts.append(f"{air_emoji} {air_lbl} ¬∑ " + " | ".join(pm_parts))

    # –†–∞–¥–∏–∞—Ü–∏—è
    if isinstance(usvh,(int,float)):
        r_em, r_lbl = _rad_risk(float(usvh))
        if isinstance(cpm,(int,float)):
            parts.append(f"{int(round(cpm))} CPM ‚âà {float(usvh):.3f} ŒºSv/h ‚Äî {r_em} {r_lbl}")
        else:
            parts.append(f"‚âà {float(usvh):.3f} ŒºSv/h ‚Äî {r_em} {r_lbl}")
    elif isinstance(cpm,(int,float)):
        parts.append(f"{int(round(cpm))} CPM")

    if not parts:
        return None
    return "üß™ Safecast: " + " ¬∑ ".join(parts)

def radiation_line(lat: float, lon: float) -> Optional[str]:
    data = get_radiation(lat, lon) or {}
    dose = data.get("dose")
    if isinstance(dose,(int,float)):
        em, lbl = _rad_risk(float(dose))
        return f"{em} –†–∞–¥–∏–∞—Ü–∏—è: {float(dose):.3f} ŒºSv/h ‚Äî {lbl}"
    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UVI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def uvi_label(x: float) -> str:
    if x < 3:  return "–Ω–∏–∑–∫–∏–π"
    if x < 6:  return "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
    if x < 8:  return "–≤—ã—Å–æ–∫–∏–π"
    if x < 11: return "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"
    return "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π"

def uvi_for_offset(wm: Dict[str, Any], tz: pendulum.Timezone, offset_days: int) -> Dict[str, Optional[float | str]]:
    """–ò—â–µ–º uvi_max –≤ daily; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –º–∞–∫—Å–∏–º—É–º –ø–æ —á–∞—Å–æ–≤—ã–º –∑–∞ –¥–µ–Ω—å."""
    daily = wm.get("daily") or {}
    hourly = wm.get("hourly") or {}
    date_obj = pendulum.today(tz).add(days=offset_days).date()
    times = hourly.get("time") or []
    uvi_arr = hourly.get("uv_index") or hourly.get("uv_index_clear_sky") or []
    uvi_now = None
    try:
        # –¢–µ–∫—É—â–∏–π ‚Äî –ø–µ—Ä–≤—ã–π —á–∞—Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –º–∞—Å—Å–∏–≤–∞
        if times and uvi_arr:
            uvi_now = float(uvi_arr[0]) if isinstance(uvi_arr[0], (int, float)) else None
    except Exception:
        uvi_now = None

    # –ú–∞–∫—Å–∏–º—É–º –∑–∞ –¥–µ–Ω—å
    uvi_max = None
    # daily
    try:
        idx = None
        dts = _daily_times(wm)
        if dts:
            idx = dts.index(date_obj)
        if idx is not None:
            uvi_max = float((daily.get("uv_index_max") or [None])[idx])  # type: ignore
    except Exception:
        uvi_max = None
    # hourly ‚Üí –º–∞–∫—Å–∏–º—É–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∞—Ç—ã
    if uvi_max is None and times and uvi_arr:
        day_vals = []
        for t, v in zip(times, uvi_arr):
            if not t or not str(t).startswith(date_obj.to_date_string()):
                continue
            if isinstance(v, (int, float)):
                day_vals.append(float(v))
        if day_vals:
            uvi_max = max(day_vals)

    return {"uvi": uvi_now, "uvi_max": uvi_max, "label": (uvi_label(uvi_now) if isinstance(uvi_now,(int,float)) else (uvi_label(uvi_max) if isinstance(uvi_max,(int,float)) else None))}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–û–î–ê: –≥–∏–¥—Ä–∏–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü–æ—Ä–æ–≥–æ–≤—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã
WSUIT_NONE   = float(os.getenv("WSUIT_NONE",   "22"))
WSUIT_SHORTY = float(os.getenv("WSUIT_SHORTY", "20"))
WSUIT_32     = float(os.getenv("WSUIT_32",     "17"))
WSUIT_43     = float(os.getenv("WSUIT_43",     "14"))
WSUIT_54     = float(os.getenv("WSUIT_54",     "12"))
WSUIT_65     = float(os.getenv("WSUIT_65",     "10"))

def wetsuit_hint_by_sst(sst: Optional[float]) -> Optional[str]:
    if not isinstance(sst, (int, float)):
        return None
    t = float(sst)
    if t >= WSUIT_NONE:   return None
    if t >= WSUIT_SHORTY: return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º —à–æ—Ä—Ç–∏ 2 –º–º"
    if t >= WSUIT_32:     return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 3/2 –º–º"
    if t >= WSUIT_43:     return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 4/3 –º–º (–±–æ—Ç—ã)"
    if t >= WSUIT_54:     return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 5/4 –º–º (–±–æ—Ç—ã, –ø–µ—Ä—á–∞—Ç–∫–∏)"
    if t >= WSUIT_65:     return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 5/4 –º–º + –∫–∞–ø—é—à–æ–Ω (–±–æ—Ç—ã, –ø–µ—Ä—á–∞—Ç–∫–∏)"
    return "–≥–∏–¥—Ä–æ–∫–æ—Å—Ç—é–º 6/5 –º–º + –∫–∞–ø—é—à–æ–Ω (–±–æ—Ç—ã, –ø–µ—Ä—á–∞—Ç–∫–∏)"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FX (—É—Ç—Ä–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fx_morning_line(date_local: pendulum.DateTime, tz: pendulum.Timezone) -> Optional[str]:
    try:
        import importlib
        fx = importlib.import_module("fx")
        rates = fx.get_rates(date=date_local, tz=tz) or {}  # type: ignore[attr-defined]
    except Exception as e:
        logging.info("FX morning: –Ω–µ—Ç –º–æ–¥—É–ª—è fx/get_rates: %s", e)
        return None

    def token(code: str, name: str) -> str:
        r = rates.get(code) or {}
        val = r.get("value"); dlt = r.get("delta")
        try:
            vs = f"{float(val):.2f}"
        except Exception:
            vs = "–Ω/–¥"
        return f"{name} {vs} {RUB} ({_fmt_delta(dlt)})"

    return "üí± –ö—É—Ä—Å—ã (—É—Ç—Ä–æ): " + " ‚Ä¢ ".join([token("USD", "USD"), token("EUR", "EUR"), token("CNY", "CNY")])

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–µ—Ä–≤–∏—Å: –≤–æ–∑–¥—É—Ö/Kp/–∏—Ç–æ–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _is_air_bad(air: Dict[str, Any]) -> Tuple[bool, str]:
    """(bad?, short_label)"""
    try:
        aqi = float(air.get("aqi")) if air.get("aqi") is not None else None
    except Exception:
        aqi = None
    if isinstance(aqi,(int,float)):
        if aqi >= 150: return True, "üî¥"
        if aqi >= 100: return True, "üü†"
    # fallback –ø–æ PM
    try:
        p25 = float(air.get("pm25")) if air.get("pm25") is not None else None
        p10 = float(air.get("pm10")) if air.get("pm10") is not None else None
    except Exception:
        p25 = p10 = None
    if (p25 and p25 > 35) or (p10 and p10 > 50):
        return True, "üü†"
    return False, "üü¢"

def storm_short_text(wm: Dict[str, Any], tz: pendulum.Timezone) -> str:
    """–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ: ¬´–±–µ–∑ —à—Ç–æ—Ä–º–∞¬ª –ª–∏–±–æ ¬´—à—Ç–æ—Ä–º¬ª –ø–æ –ø–æ—Ä—ã–≤–∞–º/–ª–∏–≤–Ω—é/–≥—Ä–æ–∑–µ –∑–∞ –¥–µ–Ω—å."""
    hourly = wm.get("hourly") or {}
    times  = _hourly_times(wm)
    date_obj = pendulum.today(tz).add(days=DAY_OFFSET).date()
    idxs = []
    for i, dt in enumerate(times):
        try:
            if dt.in_tz(tz).date() == date_obj:
                idxs.append(i)
        except Exception:
            pass
    if not idxs:
        return "–±–µ–∑ —à—Ç–æ—Ä–º–∞"
    def vals(arr):
        out=[]
        for i in idxs:
            if i < len(arr) and arr[i] is not None:
                try: out.append(float(arr[i]))
                except Exception: pass
        return out
    gusts = vals(hourly.get("wind_gusts_10m") or hourly.get("windgusts_10m") or [])
    rain  = vals(hourly.get("rain") or [])
    thp   = vals(hourly.get("thunderstorm_probability") or [])
    if (max(gusts, default=0)/3.6 >= 17) or (max(rain, default=0) >= 8) or (max(thp, default=0) >= 60):
        return "—à—Ç–æ—Ä–º"
    return "–±–µ–∑ —à—Ç–æ—Ä–º–∞"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–∞—è—á–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞/—Ñ–∞–∫—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def holiday_or_fact(date_obj: pendulum.DateTime, region_name: str) -> str:
    # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ get_fact (–∫–∞–∫ –æ–±—Å—É–∂–¥–∞–ª–∏).
    return f"üìö {get_fact(date_obj, region_name)}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–ê–ö–ï–¢: Morning (compact) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message_morning_compact(region_name: str,
                                  sea_label: str, sea_cities,
                                  other_label: str, other_cities,
                                  tz: Union[pendulum.Timezone, str]) -> str:
    tz_obj = pendulum.timezone(tz) if isinstance(tz, str) else tz
    date_local = pendulum.today(tz_obj)
    header = f"<b>üåÖ {region_name}: –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({date_local.format('DD.MM.YYYY')})</b>"

    # –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–Ω—è/–Ω–æ—á–∏, –∫–æ–¥, –≤–µ—Ç–µ—Ä, –ø–æ—Ä—ã–≤—ã, –¥–∞–≤–ª–µ–Ω–∏–µ
    wm_klg = get_weather(KLD_LAT, KLD_LON) or {}
    t_day, t_night, wcode = _fetch_temps_for_offset(KLD_LAT, KLD_LON, tz_obj.name, DAY_OFFSET)
    wind_ms, wind_dir_deg, press_val, press_trend = pick_header_metrics_for_offset(wm_klg, tz_obj, DAY_OFFSET)
    gust = None
    try:
        times = _hourly_times(wm_klg); hourly = wm_klg.get("hourly") or {}
        idx_noon = _nearest_index_for_day(times, date_local.add(days=DAY_OFFSET).date(), 12, tz_obj)
        arr = hourly.get("wind_gusts_10m") or hourly.get("windgusts_10m") or []
        if idx_noon is not None and idx_noon < len(arr):
            gust = float(arr[idx_noon]) / 3.6
    except Exception:
        gust = None

    desc = code_desc(wcode) or "‚Äî"
    tday_i   = int(round(t_day))   if isinstance(t_day,(int,float)) else None
    tnight_i = int(round(t_night)) if isinstance(t_night,(int,float)) else None
    temp_txt = f"{tday_i}/{tnight_i}{NBSP}¬∞C" if (tday_i is not None and tnight_i is not None) else "–Ω/–¥"
    wind_txt = (f"üí® {wind_ms:.1f} –º/—Å ({compass(wind_dir_deg)})" if isinstance(wind_ms,(int,float)) and wind_dir_deg is not None
                else (f"üí® {wind_ms:.1f} –º/—Å" if isinstance(wind_ms,(int,float)) else "üí® –Ω/–¥"))
    if isinstance(gust,(int,float)):
        wind_txt += f" ‚Ä¢ –ø–æ—Ä—ã–≤—ã ‚Äî {int(round(gust))}"
    press_txt = f"üîπ {press_val} –≥–ü–∞ {press_trend}" if isinstance(press_val,int) else "üîπ –Ω/–¥"

    kal_line = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ ‚Äî {temp_txt} ‚Ä¢ {desc} ‚Ä¢ {wind_txt} ‚Ä¢ {press_txt}."

    # ¬´–ü–æ–≥—Ä–µ—Ç—å—Å—è/–æ—Å—Ç—ã—Ç—å¬ª
    tz_name = tz_obj.name
    warm_city, warm_vals = None, None
    cold_city, cold_vals = None, None
    for city, (la, lo) in other_cities:
        tmax, tmin, _ = _fetch_temps_for_offset(la, lo, tz_name, DAY_OFFSET)
        if tmax is None: 
            continue
        if warm_vals is None or tmax > warm_vals[0]:
            warm_city, warm_vals = city, (tmax, tmin or tmax)
        if cold_vals is None or tmax < cold_vals[0]:
            cold_city, cold_vals = city, (tmax, tmin or tmax)
    warm_txt = f"{warm_city} {int(round(warm_vals[0]))}/{int(round(warm_vals[1]))}{NBSP}¬∞C" if warm_city else "–Ω/–¥"
    cold_txt = f"{cold_city} {int(round(cold_vals[0]))}/{int(round(cold_vals[1]))}{NBSP}¬∞C" if cold_city else "–Ω/–¥"

    # –ì–∏–¥—Ä–∏–∫ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –º–æ—Ä—Å–∫—É—é —Ç–æ—á–∫—É —Å SST
    sst_hint = None
    for _, (la, lo) in (sea_cities or []):
        try:
            s = get_sst(la, lo)
            if isinstance(s,(int,float)):
                sst_hint = s; break
        except Exception:
            continue
    suit = wetsuit_hint_by_sst(sst_hint)
    sea_txt = f"–ú–æ—Ä–µ: {suit}." if suit else "–ú–æ—Ä–µ: –Ω/–¥."

    # –ó–∞–∫–∞—Ç
    sunset = None
    try:
        daily = wm_klg.get("daily") or {}
        ss = (daily.get("sunset") or [None])[0]
        if ss:
            sunset = pendulum.parse(ss).in_tz(tz_obj).format("HH:mm")
    except Exception:
        sunset = None
    sunset_line = f"üåá –ó–∞–∫–∞—Ç: {sunset}" if sunset else "üåá –ó–∞–∫–∞—Ç: –Ω/–¥"

    # –ö—É—Ä—Å—ã (—É—Ç—Ä–æ)
    fx_line = fx_morning_line(pendulum.now(tz_obj), tz_obj)

    # –í–æ–∑–¥—É—Ö
    air = get_air(KLD_LAT, KLD_LON) or {}
    air_lvl = air.get("lvl", "–Ω/–¥")
    air_line = f"üè≠ –í–æ–∑–¥—É—Ö: {AIR_EMOJI.get(air_lvl,'‚ö™')} {air_lvl} (AQI {air.get('aqi','–Ω/–¥')}) ‚Ä¢ PM‚ÇÇ.‚ÇÖ {pm_color(air.get('pm25'))} / PM‚ÇÅ‚ÇÄ {pm_color(air.get('pm10'))}"

    # UVI (–µ—Å–ª–∏ ‚â•3)
    uvi_info = uvi_for_offset(wm_klg, tz_obj, DAY_OFFSET)
    uvi_line = None
    try:
        uvi_val = None
        if isinstance(uvi_info.get("uvi"), (int, float)):
            uvi_val = float(uvi_info["uvi"])
        elif isinstance(uvi_info.get("uvi_max"), (int, float)):
            uvi_val = float(uvi_info["uvi_max"])
        if isinstance(uvi_val,(int,float)) and uvi_val >= 3:
            uvi_line = f"‚òÄÔ∏è –£–§: {uvi_val:.0f} ‚Äî {uvi_label(uvi_val)} ‚Ä¢ SPF 30+ –∏ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä"
    except Exception:
        uvi_line = None

    # –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ –∏ —Å–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä
    kp_val, kp_status, kp_ts, _ = (get_kp() or (None, "–Ω/–¥", None, "n/d"))
    age_txt = ""
    try:
        if isinstance(kp_ts,int):
            ago_min = int((pendulum.now("UTC").int_timestamp - kp_ts) / 60)
            if ago_min > 180: age_txt = f" (üïì {ago_min//60}—á –Ω–∞–∑–∞–¥)"
            elif ago_min >= 0: age_txt = f" (üïì {ago_min} –º–∏–Ω –Ω–∞–∑–∞–¥)"
    except Exception:
        age_txt = ""
    kp_line = f"{kp_emoji(kp_val)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp_val:.1f} ({kp_status}){age_txt}" if isinstance(kp_val,(int,float)) else "üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥"

    sw = get_solar_wind() or {}
    sw_parts=[]
    if isinstance(sw.get("bz"), (int,float)): sw_parts.append(f"Bz {sw['bz']:.1f} nT")
    if isinstance(sw.get("bt"), (int,float)): sw_parts.append(f"Bt {sw['bt']:.1f} nT")
    if isinstance(sw.get("speed_kms"), (int,float)): sw_parts.append(f"v {sw['speed_kms']:.0f} –∫–º/—Å")
    if isinstance(sw.get("density"), (int,float)): sw_parts.append(f"n {sw['density']:.1f} —Å–º‚Åª¬≥")
    wind_status = sw.get("status", "–Ω/–¥")
    sw_line = ("üå¨Ô∏è SW: " + ", ".join(sw_parts) + f" ‚Äî {wind_status}") if sw_parts else None

    # (–æ–ø—Ü.) Safecast ‚Äî –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    sc_line = safecast_summary_line()

    # (–æ–ø—Ü.) –û—Ñ–∏—Ü. —Ä–∞–¥–∏–∞—Ü–∏—è
    official_rad = radiation_line(KLD_LAT, KLD_LON)

    # (–æ–ø—Ü.) –®—É–º–∞–Ω (–µ—Å–ª–∏ –Ω–µ –∑–µ–ª—ë–Ω—ã–π)
    schu_line = schumann_line(get_schumann_with_fallback()) if SHOW_SCHUMANN else None

    # –ò—Ç–æ–≥–æ (–∫–æ—Ä–æ—Ç–∫–æ)
    air_bad, air_short = _is_air_bad(air)
    storm_short = storm_short_text(wm_klg, tz_obj)
    kp_short = (kp_status or "–Ω/–¥")
    itogo = f"üîé –ò—Ç–æ–≥–æ: –≤–æ–∑–¥—É—Ö {'üü†' if air_bad else 'üü¢'} ‚Ä¢ {storm_short} ‚Ä¢ Kp {kp_short}"

    # –°–µ–≥–æ–¥–Ω—è: 3 —Å–æ–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ ¬´;¬ª
    def safe_tips(theme: str) -> List[str]:
        base = {
            "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å": ["–≤–æ–¥–∞ –∏ –∑–∞–≤—Ç—Ä–∞–∫", "20-–º–∏–Ω –ø—Ä–æ–≥—É–ª–∫–∞ –¥–æ –ø–æ–ª—É–¥–Ω—è", "–∫–æ—Ä–æ—Ç–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –≤–µ—á–µ—Ä–æ–º"],
            "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏": ["–ª—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º", "5-–º–∏–Ω –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞", "—á–∞—ë–∫ —Å —Ç—Ä–∞–≤–∞–º–∏"],
            "–ø–ª–æ—Ö–æ–π –≤–æ–∑–¥—É—Ö": ["—É–º–µ–Ω—å—à–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ", "–ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π—Ç–µ –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏"],
        }
        if gpt_blurb:
            try:
                _, tips = gpt_blurb(theme)  # type: ignore
                tips = [str(x).strip() for x in (tips or []) if x]
                if tips:
                    return tips[:3]
            except Exception:
                pass
        return base.get(theme, base["–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å"])

    theme = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if (isinstance(kp_val,(int,float)) and kp_val >= 5) else ("–ø–ª–æ—Ö–æ–π –≤–æ–∑–¥—É—Ö" if air_bad else "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å")
    tips = "; ".join(safe_tips(theme))
    today_line = f"‚úÖ –°–µ–≥–æ–¥–Ω—è: {tips}"

    # –ü—Ä–∞–∑–¥–Ω–∏–∫/—Ñ–∞–∫—Ç
    footer = holiday_or_fact(date_local, region_name)

    # –°–±–æ—Ä–∫–∞
    P: List[str] = [header, kal_line, f"–ü–æ–≥—Ä–µ—Ç—å—Å—è: {warm_txt}; –æ—Å—Ç—ã—Ç—å: {cold_txt}. {sea_txt}", "", sunset_line]
    if fx_line: P.append(fx_line)
    P.append(air_line)
    if uvi_line: P.append(uvi_line)
    P.append(kp_line)
    if sw_line: P.append(sw_line)
    if sc_line: P.append(sc_line)
    if official_rad: P.append(official_rad)
    if schu_line: P.append(schu_line)
    P.append("")
    P.append(itogo)
    P.append(today_line)
    P.append("")
    P.append(footer)
    P.append("#–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ #–ø–æ–≥–æ–¥–∞ #–∑–¥–æ—Ä–æ–≤—å–µ #—Å–µ–≥–æ–¥–Ω—è #–º–æ—Ä–µ")
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–µ—á–µ—Ä–Ω–∏–π (legacy –∫–æ—Ä–æ—Ç–∫–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message_legacy_evening(region_name: str,
                                 sea_label: str, sea_cities,
                                 other_label: str, other_cities,
                                 tz: Union[pendulum.Timezone, str]) -> str:
    # –ß—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç: –ø—Ä–æ—Å—Ç–∞—è —à–∞–ø–∫–∞ + –º–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ —Å SST
    tz_obj = pendulum.timezone(tz) if isinstance(tz, str) else tz
    base = pendulum.today(tz_obj).add(days=1)
    P: List[str] = [f"<b>üåÖ {region_name}: –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({base.format('DD.MM.YYYY')})</b>"]
    wm_klg = get_weather(KLD_LAT, KLD_LON) or {}
    t_day, t_night, wcode = _fetch_temps_for_offset(KLD_LAT, KLD_LON, tz_obj.name, 1)
    wind_ms, wind_dir_deg, press_val, press_trend = pick_header_metrics_for_offset(wm_klg, tz_obj, 1)
    desc = code_desc(wcode) or "‚Äî"
    temp_txt = (f"{int(round(t_day))}/{int(round(t_night))}{NBSP}¬∞C" if isinstance(t_day,(int,float)) and isinstance(t_night,(int,float)) else "–Ω/–¥")
    wind_txt = (f"üí® {wind_ms:.1f} –º/—Å ({compass(wind_dir_deg)})" if isinstance(wind_ms,(int,float)) and wind_dir_deg is not None else "üí® –Ω/–¥")
    press_txt = f"üîπ {press_val} –≥–ü–∞ {press_trend}" if isinstance(press_val,int) else "üîπ –Ω/–¥"
    P.append(f"üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å {temp_txt} ‚Ä¢ {desc} ‚Ä¢ {wind_txt} ‚Ä¢ {press_txt}")
    P.append("‚Äî‚Äî‚Äî")
    if sea_cities:
        P.append(f"üåä <b>{sea_label}</b>")
        for city, (la, lo) in sea_cities:
            tmax, tmin, wc = _fetch_temps_for_offset(la, lo, tz_obj.name, 1)
            if tmax is None:
                continue
            sst = get_sst(la, lo)
            sst_txt = f" üåä {int(round(float(sst)))}{NBSP}¬∞C" if isinstance(sst,(int,float)) else ""
            P.append(f"‚Ä¢ {city}: {int(round(tmax))}/{int(round(tmin or tmax))}{NBSP}¬∞C {code_desc(wc) or ''}{sst_txt}")
    P.append("")
    P.append(holiday_or_fact(base, region_name))
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–Ω–µ—à–Ω–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message(region_name: str,
                  sea_label: str, sea_cities,
                  other_label: str, other_cities,
                  tz: Union[pendulum.Timezone, str]) -> str:
    if POST_MODE == "morning":
        return build_message_morning_compact(region_name, sea_label, sea_cities, other_label, other_cities, tz)
    # evening (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    return build_message_legacy_evening(region_name, sea_label, sea_cities, other_label, other_cities, tz)

async def send_common_post(
    bot: Bot,
    chat_id: int,
    region_name: str,
    sea_label: str,
    sea_cities,
    other_label: str,
    other_cities,
    tz: Union[pendulum.Timezone, str],
) -> None:
    msg = build_message(region_name, sea_label, sea_cities, other_label, other_cities, tz)
    await bot.send_message(chat_id=chat_id, text=msg, parse_mode=constants.ParseMode.HTML, disable_web_page_preview=True)

async def main_common(
    bot: Bot,
    chat_id: int,
    region_name: str,
    sea_label: str,
    sea_cities,
    other_label: str,
    other_cities,
    tz: Union[pendulum.Timezone, str],
) -> None:
    await send_common_post(
        bot=bot,
        chat_id=chat_id,
        region_name=region_name,
        sea_label=sea_label,
        sea_cities=sea_cities,
        other_label=other_label,
        other_cities=other_cities,
        tz=tz,
    )

__all__ = [
    "build_message",
    "send_common_post",
    "main_common",
    "schumann_line",
    "get_schumann_with_fallback",
    "pick_header_metrics_for_offset",
    "radiation_line",
]
