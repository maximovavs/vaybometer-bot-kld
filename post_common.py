#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_common.py  ‚Ä¢  –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ ¬´VayboMeter¬ª.

–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
    main_common(bot, chat_id, region_name, sea_label, sea_cities, other_label, other_cities, tz)

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    bot            ‚Äì —ç–∫–∑–µ–º–ø–ª—è—Ä telegram.Bot
    chat_id        ‚Äì integer, ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
    region_name    ‚Äì —Å—Ç—Ä–æ–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ (¬´–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å¬ª)
    sea_label      ‚Äì —Å—Ç—Ä–æ–∫–∞, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è ¬´–º–æ—Ä—Å–∫–∏—Ö¬ª –≥–æ—Ä–æ–¥–æ–≤
    sea_cities     ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ, (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)) –º–æ—Ä—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    other_label    ‚Äì —Å—Ç—Ä–æ–∫–∞, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è ¬´–Ω–µ-–º–æ—Ä—Å–∫–∏—Ö¬ª –≥–æ—Ä–æ–¥–æ–≤
    other_cities   ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ, (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)) –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    tz             ‚Äì pendulum.Timezone, —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Ä–µ–≥–∏–æ–Ω–∞

–í–Ω—É—Ç—Ä–∏ –±—É–¥—É—Ç –≤—ã–∑–≤–∞–Ω—ã:
‚Äî get_weather, fetch_tomorrow_temps (–∏–∑ weather.py)
‚Äî get_air, get_sst, get_kp (–∏–∑ air.py)
‚Äî get_pollen (–∏–∑ pollen.py)
‚Äî get_schumann_with_fallback (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
‚Äî astro_events (–∏–∑ astro.py)
‚Äî get_day_lunar_info (–∏–∑ lunar.py)
‚Äî gpt_blurb (–∏–∑ gpt.py)
‚Äî get_fact (–∏–∑ utils.py)
"""

from __future__ import annotations
import logging
from typing import Any, Dict, List, Optional, Tuple

import pendulum
from telegram import Bot, error as tg_err, constants

from utils      import compass, clouds_word, get_fact, AIR_EMOJI, pm_color, kp_emoji
from weather    import get_weather, fetch_tomorrow_temps
from air        import get_air, get_sst, get_kp
from pollen     import get_pollen
from schumann   import get_schumann
from astro      import astro_events
from lunar      import get_day_lunar_info
from gpt        import gpt_blurb

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Constants ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞ (—Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞)
KLD_LAT = 54.710426
KLD_LON = 20.452214


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Schumann Data ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def get_schumann_with_fallback() -> Dict[str, Any]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –®—É–º–∞–Ω–∞.
    –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏–∑ schumann_hourly.json –∏
    –≤—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥ (+/‚àí/‚Üí). –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
        {
          "freq": float –∏–ª–∏ None,
          "amp":  float –∏–ª–∏ None,
          "trend": "‚Üë"/"‚Üì"/"‚Üí",
          "high": bool,
          "cached": bool
        }
    """
    sch = get_schumann()
    if sch.get("freq") is not None:
        sch["cached"] = False
        return sch

    cache_path = __import__("pathlib").Path(__file__).parent / "schumann_hourly.json"
    if cache_path.exists():
        try:
            arr = __import__("json").loads(cache_path.read_text(encoding="utf-8"))
            if arr:
                last = arr[-1]
                pts  = arr[-24:]
                freqs = [p["freq"] for p in pts if p.get("freq") is not None]
                if len(freqs) >= 2:
                    avg   = sum(freqs[:-1]) / (len(freqs) - 1)
                    delta = freqs[-1] - avg
                    trend = "‚Üë" if delta >= 0.1 else "‚Üì" if delta <= -0.1 else "‚Üí"
                else:
                    trend = "‚Üí"
                return {
                    "freq":   round(last.get("freq", 0.0), 2),
                    "amp":    round(last.get("amp", 0.0), 1),
                    "trend":  trend,
                    "high":   (last.get("freq", 0.0) > 8.1 or last.get("amp", 0.0) > 100.0),
                    "cached": True,
                }
        except Exception as e:
            logging.warning("Schumann cache parse error: %s", e)

    # –µ—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ–∫–∞—Ç–∏–ª–æ, –≤–µ—Ä–Ω—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª (–≤–æ–∑–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ–π)
    return sch


def schumann_line(sch: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É ¬´–®—É–º–∞–Ω¬ª —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º:
    üî¥ –µ—Å–ª–∏ freq < 7.6 Hz
    üü¢ –µ—Å–ª–∏ 7.6 ‚â§ freq ‚â§ 8.1
    üü£ –µ—Å–ª–∏ freq > 8.1
    –î–æ–±–∞–≤–ª—è–µ—Ç –∞–º–ø–ª–∏—Ç—É–¥—É –∏ —Ç—Ä–µ–Ω–¥.
    """
    if sch.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"

    f   = sch["freq"]
    amp = sch["amp"]
    if f < 7.6:
        emoji = "üî¥"
    elif f > 8.1:
        emoji = "üü£"
    else:
        emoji = "üü¢"
    return f"{emoji} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {sch['trend']}"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def code_desc(code: int) -> str:
    """
    WMO Weather Interpretation Codes ‚Üí –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º + —ç–º–æ–¥–∑–∏.
    """
    WMO_DESC = {
        0:  "‚òÄÔ∏è —è—Å–Ω–æ",
        1:  "‚õÖ —á–∞—Å—Ç. –æ–±–ª–∞—á.",
        2:  "‚òÅÔ∏è –æ–±–ª–∞—á–Ω–æ",
        3:  "üå• –ø–∞—Å–º—É—Ä–Ω–æ",
        45: "üå´ —Ç—É–º–∞–Ω",
        48: "üå´ –∏–∑–º–æ—Ä–æ–∑—å",
        51: "üå¶ —Å–ª–∞–±. –º–æ—Ä–æ—Å—å",
        61: "üåß –¥–æ–∂–¥—å",
        71: "‚ùÑÔ∏è —Å–Ω–µ–≥",
        95: "‚õà –≥—Ä–æ–∑–∞",
    }
    return WMO_DESC.get(code, "‚Äî")


def pressure_arrow(hourly: Dict[str, Any]) -> str:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—É—Ç–æ–∫ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–µ–ª–æ—á–∫—É:
    ‚Üë –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ > +1 hPa, ‚Üì –µ—Å–ª–∏ < ‚àí1, –∏–Ω–∞—á–µ ‚Üí
    """
    pr = hourly.get("surface_pressure", [])
    if len(pr) < 2:
        return "‚Üí"
    delta = pr[-1] - pr[0]
    if delta > 1.0:
        return "‚Üë"
    if delta < -1.0:
        return "‚Üì"
    return "‚Üí"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Core Builder ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def build_message(
    region_name: str,
    chat_id: int,
    sea_label: str,
    sea_cities: List[Tuple[str, Tuple[float, float]]],
    other_label: str,
    other_cities: List[Tuple[str, Tuple[float, float]]],
    tz: pendulum.Timezone
) -> str:
    """
    –®–∞–≥–∏:
      1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
      2) –†–µ–π—Ç–∏–Ω–≥ ¬´–º–æ—Ä—Å–∫–∏—Ö¬ª –≥–æ—Ä–æ–¥–æ–≤ (–ø–æ–≥–æ–¥–∞ + SST)
      3) –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è ¬´–≥–ª–∞–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞¬ª (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥)
      4) –†–µ–π—Ç–∏–Ω–≥ ¬´—Ç–µ–ø–ª—ã—Ö / —Ö–æ–ª–æ–¥–Ω—ã—Ö¬ª –≥–æ—Ä–æ–¥–æ–≤ (–Ω–µ-–º–æ—Ä—Å–∫–∏–µ)
      5) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ø—ã–ª—å—Ü–∞
      6) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω
      7) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (offset_days=1, show_all_voc=True)
      8) GPT-–±–ª–æ–∫ ¬´–í—ã–≤–æ–¥¬ª & ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª (–∑–∞–º–µ–Ω–∞ ¬´–≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥–∞¬ª ‚Üí ¬´–≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥—É¬ª)
      9) –§–∞–∫—Ç (get_fact(TOMORROW, region_name))
    """
    P: List[str] = []
    TODAY = pendulum.now(tz).date()
    TOMORROW = TODAY.add(days=1)

    # 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"<b>üåÖ {region_name}: –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({TOMORROW.format('DD.MM.YYYY')})</b>"
    P.append(header)

    # 2) –†–µ–π—Ç–∏–Ω–≥ ¬´–º–æ—Ä—Å–∫–∏—Ö¬ª –≥–æ—Ä–æ–¥–æ–≤ (–∑–∞–≤—Ç—Ä–∞—à–Ω—è—è tday/tnight + –æ–ø–∏—Å–∞–Ω–∏–µ + SST)
    temps_sea_per_city: Dict[str, Tuple[float, float, int, Optional[float]]] = {}
    for city, (lat, lon) in sea_cities:
        # 2.1 –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ t_max, t_min
        tday, tnight = fetch_tomorrow_temps(lat, lon, tz=tz.name)
        if tday is None:
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–æ—Ä–æ–¥
            continue

        # 2.2 –í—ã—è—Å–Ω—è–µ–º –∫–æ–¥ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        wdata = get_weather(lat, lon)
        if wdata:
            wc_list = wdata.get("daily", {}).get("weathercode", [])
            if len(wc_list) > 1:
                wcode = wc_list[1]
            elif wc_list:
                wcode = wc_list[0]
            else:
                wcode = 0
        else:
            wcode = 0

        # 2.3 –ü–æ–ª—É—á–∞–µ–º SST ‚Äú—É –±–µ—Ä–µ–≥–∞‚Äù –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        try:
            sst_city = get_sst(lat, lon)
        except Exception as e:
            logging.warning("–û—à–∏–±–∫–∞ get_sst –¥–ª—è %s: %s", city, e)
            sst_city = None

        temps_sea_per_city[city] = (tday, tnight or tday, wcode, sst_city)

    if temps_sea_per_city:
        P.append(f"üéñÔ∏è <b>{sea_label}</b>")
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω–µ–≤–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, —É–±—ã–≤–∞–Ω–∏–µ
        sorted_sea = sorted(
            temps_sea_per_city.items(),
            key=lambda kv: kv[1][0],
            reverse=True
        )[:5]

        for i, (city, (tday, tnight, wcode, sst_city)) in enumerate(sorted_sea):
            desc = code_desc(wcode)
            if sst_city is not None:
                P.append(
                    f"{medals[i]} {city}: {tday:.1f}/{tnight:.1f} ¬∞C, {desc}, –º–æ—Ä–µ: {sst_city:.1f} ¬∞C"
                )
            else:
                P.append(
                    f"{medals[i]} {city}: {tday:.1f}/{tnight:.1f} ¬∞C, {desc}, –º–æ—Ä–µ: –Ω/–¥"
                )
        P.append("‚Äî‚Äî‚Äî")

    # 3) –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è ¬´–≥–ª–∞–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞¬ª (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥)
    main_city_name, (m_lat, m_lon) = "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", (KLD_LAT, KLD_LON)

    day_max, night_min = fetch_tomorrow_temps(m_lat, m_lon, tz=tz.name)
    w_main = get_weather(m_lat, m_lon) or {}
    cur = w_main.get("current", {})

    if day_max is not None and night_min is not None:
        avg_temp = (day_max + night_min) / 2
    else:
        avg_temp = cur.get("temperature", 0)

    wind_kmh   = cur.get("windspeed", 0.0)
    wind_deg   = cur.get("winddirection", 0.0)
    press_main = cur.get("pressure", 1013)
    clouds_main= cur.get("clouds", 0)

    P.append(
        f"üèôÔ∏è {main_city_name}: –°—Ä. —Ç–µ–º–ø: {avg_temp:.0f} ¬∞C ‚Ä¢ {clouds_word(clouds_main)} "
        f"‚Ä¢ üí® {wind_kmh:.1f} –∫–º/—á ({compass(wind_deg)}) "
        f"‚Ä¢ üíß {press_main:.0f} –≥–ü–∞ {pressure_arrow(w_main.get('hourly', {}))}"
    )
    P.append("‚Äî‚Äî‚Äî")

    # 4) –†–µ–π—Ç–∏–Ω–≥ ¬´—Ç–µ–ø–ª—ã—Ö / —Ö–æ–ª–æ–¥–Ω—ã—Ö¬ª (–Ω–µ-–º–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞)
    temps_other: Dict[str, Tuple[float, float]] = {}
    for city, (lat, lon) in other_cities:
        tmax2, tmin2 = fetch_tomorrow_temps(lat, lon, tz=tz.name)
        if tmax2 is None:
            continue
        temps_other[city] = (tmax2, tmin2 or tmax2)

    if temps_other:
        P.append(f"üî• <b>–¢—ë–ø–ª—ã–µ –≥–æ—Ä–æ–¥–∞</b>")
        top_warm = sorted(temps_other.items(), key=lambda kv: kv[1][0], reverse=True)[:3]
        for city, (d, n) in top_warm:
            P.append(f"   ‚Ä¢ {city}: {d:.1f}/{n:.1f} ¬∞C")

        P.append(f"‚ùÑÔ∏è <b>–•–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞</b>")
        top_cold = sorted(temps_other.items(), key=lambda kv: kv[1][0])[:3]
        for city, (d, n) in top_cold:
            P.append(f"   ‚Ä¢ {city}: {d:.1f}/{n:.1f} ¬∞C")
        P.append("‚Äî‚Äî‚Äî")

    # 5) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ø—ã–ª—å—Ü–∞
    air = get_air() or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(
        f"{AIR_EMOJI.get(lvl, '‚ö™')} {lvl} (AQI {air.get('aqi', '–Ω/–¥')}) | "
        f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}"
    )
    if (pollen := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(
            f"–î–µ—Ä–µ–≤—å—è: {pollen['tree']} | –¢—Ä–∞–≤—ã: {pollen['grass']} | "
            f"–°–æ—Ä–Ω—è–∫–∏: {pollen['weed']} ‚Äî —Ä–∏—Å–∫ {pollen['risk']}"
        )
    P.append("‚Äî‚Äî‚Äî")

    # 6) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω
    kp, kp_state = get_kp()
    if kp is not None:
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({kp_state})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # 7) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (offset_days=1: –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å, show_all_voc=True ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º VoC –¥–∞–∂–µ <15 –º–∏–Ω)
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    astro_lines = astro_events(offset_days=1, show_all_voc=True)
    if astro_lines:
        P.extend(astro_lines)
    else:
        P.append("‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî")
    P.append("‚Äî‚Äî‚Äî")

    # 8) GPT-–±–ª–æ–∫: ¬´–í—ã–≤–æ–¥¬ª –∏ ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª
    summary, tips = gpt_blurb("–ø–æ–≥–æ–¥–∞")
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ¬´–≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥–∞¬ª ‚Üí ¬´–≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥—É¬ª
    summary = summary.replace("–≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥–∞", "–≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥—É")

    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    for t in tips:
        P.append(f"‚Ä¢ {t}")
    P.append("‚Äî‚Äî‚Äî")

    # 9) –§–∞–∫—Ç (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω)
    P.append(f"üìö {get_fact(TOMORROW, region_name)}")

    return "\n".join(P)


async def send_common_post(
    bot: Bot,
    chat_id: int,
    region_name: str,
    sea_label: str,
    sea_cities: List[Tuple[str, Tuple[float, float]]],
    other_label: str,
    other_cities: List[Tuple[str, Tuple[float, float]]],
    tz: pendulum.Timezone
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
    """
    text = build_message(
        region_name=region_name,
        chat_id=chat_id,
        sea_label=sea_label,
        sea_cities=sea_cities,
        other_label=other_label,
        other_cities=other_cities,
        tz=tz
    )
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode=constants.ParseMode.HTML,
            disable_web_page_preview=True
        )
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise


async def main_common(
    bot: Bot,
    chat_id: int,
    region_name: str,
    sea_label: str,
    sea_cities: List[Tuple[str, Tuple[float, float]]],
    other_label: str,
    other_cities: List[Tuple[str, Tuple[float, float]]],
    tz: pendulum.Timezone
) -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç send_common_post.
    """
    await send_common_post(
        bot=bot,
        chat_id=chat_id,
        region_name=region_name,
        sea_label=sea_label,
        sea_cities=sea_cities,
        other_label=other_label,
        other_cities=other_cities,
        tz=tz
    )