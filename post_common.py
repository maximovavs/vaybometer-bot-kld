#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_common.py ‚Äî VayboMeter (–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥).

‚Ä¢ –ú–æ—Ä–µ, –ø—Ä–æ–≥–Ω–æ–∑ –ö—ë–Ω–∏–≥–∞ (–¥–µ–Ω—å/–Ω–æ—á—å, –º/—Å, RH min‚Äìmax, –¥–∞–≤–ª–µ–Ω–∏–µ)
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –≥–æ—Ä–æ–¥–æ–≤ (d/n, –∫–æ–¥ –ø–æ–≥–æ–¥—ã —Å–ª–æ–≤–∞–º–∏ + üåä)
‚Ä¢ Air (+ üî• –ó–∞–¥—ã–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∏–∑–∫–æ–µ), –ø—ã–ª—å—Ü–∞, —Ä–∞–¥–∏–∞—Ü–∏—è
‚Ä¢ Kp, –®—É–º–∞–Ω (—Å 7-–π –≥–∞—Ä–º–æ–Ω–∏–∫–æ–π)
‚Ä¢ –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (–∑–Ω–∞–∫ –∫–∞–∫ ‚ôà ‚Ä¶ ‚ôì –∏ VOC –ø–æ —Ñ–ª–∞–≥—É)
‚Ä¢ ¬´–í–∏–Ω–∏—Ç–µ ‚Ä¶¬ª, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ñ–∞–∫—Ç –¥–Ω—è
"""

from __future__ import annotations
import asyncio
import json
import logging
from pathlib import Path
from typing import Any, Dict, List, Tuple, Optional, Union

import pendulum
from telegram import Bot, constants

from utils import (
    compass, get_fact, AIR_EMOJI, pm_color, kp_emoji,
    kmh_to_ms, smoke_index, pressure_trend, _get,
)
from weather     import get_weather, fetch_tomorrow_temps, day_night_stats
import air as airmod
from pollen      import get_pollen
from schumann    import get_schumann
from astro       import astro_events
from gpt         import gpt_blurb
from radiation   import get_radiation
from settings_klg import SEA_SST_COORD            # —Ç–æ—á–∫–∞ –≤ –∑–∞–ª–∏–≤–µ

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
KLD_LAT, KLD_LON = 54.710426, 20.452214

# –ú—ç–ø–ø–∏–Ω–≥ WMO-–∫–æ–¥–æ–≤ –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç+—ç–º–æ–¥–∑–∏ (–º–∏–Ω–∏–º–∞–ª–∏–∑–º, –±–µ–∑ –º—É—Ç–Ω–æ–π "—Å–ª–æ–≤–µ—Å–∫–∏")
WMO_DESC = {
    0:"‚òÄÔ∏è —è—Å–Ω–æ", 1:"‚õÖ —á.–æ–±–ª", 2:"‚òÅÔ∏è –æ–±–ª", 3:"üå• –ø–∞—Å–º",
    45:"üå´ —Ç—É–º–∞–Ω", 48:"üå´ –∏–∑–º–æ—Ä–æ–∑—å", 51:"üå¶ –º–æ—Ä–æ—Å—å",
    61:"üåß –¥–æ–∂–¥—å", 71:"‚ùÑÔ∏è —Å–Ω–µ–≥", 95:"‚õà –≥—Ä–æ–∑–∞",
}
def code_desc(c: Any) -> Optional[str]:
    return WMO_DESC.get(int(c)) if isinstance(c, (int, float)) and int(c) in WMO_DESC else None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –Ω–∞–¥ air.* + –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _nearest_hour_val(times: List[str], vals: List[Any]) -> Optional[float]:
    if not times or not vals or len(times) != len(vals):
        return None
    try:
        import time as _t
        now_iso = _t.strftime("%Y-%m-%dT%H:00", _t.gmtime())
        idxs = [i for i, t in enumerate(times) if isinstance(t, str) and t <= now_iso]
        idx = max(idxs) if idxs else 0
        v = vals[idx]
        return float(v) if isinstance(v, (int, float)) else None
    except Exception:
        return None

def _get_sst_safe(lat: float, lon: float) -> Optional[float]:
    try:
        if hasattr(airmod, "get_sst"):
            return airmod.get_sst(lat, lon)  # type: ignore[attr-defined]
    except Exception as e:
        logging.warning("air.get_sst error: %s", e)
    # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫ (Open‚ÄëMeteo Marine)
    try:
        j = _get(
            "https://marine-api.open-meteo.com/v1/marine",
            latitude=lat, longitude=lon,
            hourly="sea_surface_temperature", timezone="UTC",
        )
        if not j or "hourly" not in j:
            return None
        h = j["hourly"]
        return _nearest_hour_val(h.get("time", []) or [], h.get("sea_surface_temperature", []) or [])
    except Exception as e:
        logging.warning("local SST fallback error: %s", e)
        return None

def _get_air_fallback_openmeteo(lat: float, lon: float) -> Dict[str, Any]:
    try:
        j = _get(
            "https://air-quality-api.open-meteo.com/v1/air-quality",
            latitude=lat, longitude=lon,
            hourly="pm10,pm2_5,us_aqi", timezone="UTC",
        )
        if not j or "hourly" not in j:
            return {}
        h = j["hourly"]
        t = h.get("time", []) or []
        aqi  = _nearest_hour_val(t, h.get("us_aqi", []) or [])
        pm25 = _nearest_hour_val(t, h.get("pm2_5", []) or [])
        pm10 = _nearest_hour_val(t, h.get("pm10", []) or [])
        aqi_norm: Union[float,str] = float(aqi) if isinstance(aqi,(int,float)) and aqi >= 0 else "–Ω/–¥"
        return {
            "lvl": ("–Ω/–¥" if aqi_norm == "–Ω/–¥" else ("—Ö–æ—Ä–æ—à–∏–π" if aqi_norm <= 50 else "—É–º–µ—Ä–µ–Ω–Ω—ã–π" if aqi_norm <= 100 else "–≤—Ä–µ–¥–Ω—ã–π" if aqi_norm <= 150 else "–æ—á. –≤—Ä–µ–¥–Ω—ã–π" if aqi_norm <= 200 else "–æ–ø–∞—Å–Ω—ã–π")),
            "aqi": aqi_norm,
            "pm25": float(pm25) if isinstance(pm25,(int,float)) and pm25 >= 0 else None,
            "pm10": float(pm10) if isinstance(pm10,(int,float)) and pm10 >= 0 else None,
        }
    except Exception as e:
        logging.warning("Open-Meteo AQ fallback error: %s", e)
        return {}

def _air_is_empty(d: Dict[str, Any]) -> bool:
    return not d or (str(d.get("aqi","–Ω/–¥")) == "–Ω/–¥" and d.get("pm25") in (None,"–Ω/–¥") and d.get("pm10") in (None,"–Ω/–¥"))

def _get_air_safe(lat: float, lon: float) -> Dict[str, Any]:
    res: Dict[str, Any] = {}
    try:
        if hasattr(airmod, "get_air"):
            res = airmod.get_air(lat, lon)  # type: ignore[attr-defined]
    except Exception as e:
        logging.warning("air.get_air error: %s", e)
    if _air_is_empty(res):
        res = _get_air_fallback_openmeteo(lat, lon)
    if _air_is_empty(res):  # —Å–æ–≤—Å–µ–º –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞–ø–æ–ª–Ω–∏–º –¥–µ—Ñ–æ–ª—Ç–æ–º
        res = {"lvl": "–Ω/–¥", "aqi": "–Ω/–¥", "pm25": None, "pm10": None}
    return res

def _parse_kp_from_table(data: Any) -> Optional[float]:
    if not isinstance(data, list) or not data or not isinstance(data[0], list):
        return None
    for row in reversed(data[1:]):
        try:
            return float(str(row[-1]).rstrip("Z").replace(",", "."))
        except Exception:
            continue
    return None

def _parse_kp_from_dicts(data: Any) -> Optional[float]:
    if not isinstance(data, list) or not data or not isinstance(data[0], dict):
        return None
    for item in reversed(data):
        raw = item.get("kp_index") or item.get("estimated_kp") or item.get("kp")
        if raw is None:
            continue
        try:
            return float(str(raw).rstrip("Z").replace(",", "."))
        except Exception:
            continue
    return None

def _get_kp_fallback() -> Tuple[Optional[float], str]:
    urls = [
        "https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json",
        "https://services.swpc.noaa.gov/json/planetary_k_index_1m.json",
    ]
    for u in urls:
        try:
            d = _get(u)
            if not d: 
                continue
            kp = _parse_kp_from_table(d) if isinstance(d, list) and d and isinstance(d[0], list) else _parse_kp_from_dicts(d)
            if kp is not None:
                state = "—Å–ø–æ–∫–æ–π–Ω–æ" if kp < 3 else ("–Ω–µ—Å–ø–æ–∫–æ–π–Ω–æ" if kp < 5 else "–±—É—Ä—è")
                return kp, state
        except Exception as e:
            logging.warning("Kp fallback error: %s", e)
            continue
    return None, "–Ω/–¥"

def _get_kp_safe() -> Tuple[Optional[float], str]:
    try:
        if hasattr(airmod, "get_kp"):
            return airmod.get_kp()  # type: ignore[attr-defined]
    except Exception as e:
        logging.warning("air.get_kp error: %s", e)
    return _get_kp_fallback()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®—É–º–∞–Ω: live + —Ñ–æ–ª–ª–±—ç–∫, –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫—ç—à–∞, 7‚Äë—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_schumann_with_fallback() -> Dict[str, Any]:
    """
    1) –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å live —á–µ—Ä–µ–∑ schumann.get_schumann()
    2) –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π schumann_hourly.json
       –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –î–í–ê —Ñ–æ—Ä–º–∞—Ç–∞:
         ‚Ä¢ —Å–ø–∏—Å–æ–∫: [{"ts", "freq", "amp", "h7_amp"}...]
         ‚Ä¢ —Å–ª–æ–≤–∞—Ä—å: {"YYYY-MM-DDTHH": {"freq","amp","h7_amp"}, ...}
    3) —Å—á–∏—Ç–∞–µ–º —Ç—Ä–µ–Ω–¥ –ø–æ freq (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24), –∏ h7_spike –ø–æ –º–µ–¥–∏–∞–Ω–µ+MAD.
    """
    # live
    try:
        sch = get_schumann()
    except Exception:
        sch = {}
    if isinstance(sch, dict) and sch.get("freq") is not None:
        sch["cached"] = False
        return sch

    # cache
    cache = Path(__file__).parent / "schumann_hourly.json"
    if not cache.exists():
        return {"freq": None, "amp": None, "trend": "‚Üí"}

    try:
        raw = json.loads(cache.read_text("utf-8"))
        freqs: List[float] = []
        amps:  List[float] = []
        h7s:   List[Optional[float]] = []

        if isinstance(raw, list):
            try:
                raw = sorted(raw, key=lambda x: x.get("ts", 0))
            except Exception:
                pass
            for it in raw:
                if not isinstance(it, dict):
                    continue
                f, a = it.get("freq"), it.get("amp")
                h7 = it.get("h7_amp")
                if isinstance(f,(int,float)) and isinstance(a,(int,float)):
                    freqs.append(float(f)); amps.append(float(a))
                    h7s.append(float(h7) if isinstance(h7,(int,float)) else None)

        elif isinstance(raw, dict):
            items = sorted(raw.items(), key=lambda kv: kv[0])
            for _, v in items:
                if not isinstance(v, dict):
                    continue
                f, a = v.get("freq"), v.get("amp")
                h7 = v.get("h7_amp")
                if isinstance(f,(int,float)) and isinstance(a,(int,float)):
                    freqs.append(float(f)); amps.append(float(a))
                    h7s.append(float(h7) if isinstance(h7,(int,float)) else None)

        if not freqs:
            return {"freq": None, "amp": None, "trend": "‚Üí"}

        # —Ç—Ä–µ–Ω–¥ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 24
        window_f = freqs[-24:] if len(freqs) > 24 else freqs
        trend = "‚Üí"
        if len(window_f) > 1:
            avg = sum(window_f[:-1]) / (len(window_f) - 1)
            d = window_f[-1] - avg
            trend = "‚Üë" if d >= 0.1 else "‚Üì" if d <= -0.1 else "‚Üí"

        out: Dict[str, Any] = {
            "freq": round(freqs[-1], 2),
            "amp":  round(amps[-1], 1) if amps else None,
            "trend": trend,
            "cached": True,
        }

        # 7-—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞: –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–Ω—É–ª–µ–≤–∞—è –∏ –≤—Å–ø–ª–µ—Å–∫ (median + 3*MAD, –∏ >0.2 pT)
        h7_clean = [x for x in h7s if isinstance(x,(int,float))]
        if h7_clean:
            h7_last = h7_clean[-1]
            out["h7_amp"] = round(h7_last, 3)
            import statistics
            hist = h7_clean[-48:-1] if len(h7_clean) > 1 else []
            if hist:
                med = statistics.median(hist)
                mad = statistics.median([abs(x - med) for x in hist]) or 0.01
                out["h7_spike"] = bool(h7_last > med + 3*mad and h7_last > 0.2)

        return out
    except Exception as e:
        logging.warning("Schumann cache err: %s", e)
        return {"freq": None, "amp": None, "trend": "‚Üí"}

def schumann_line(s: Dict[str, Any]) -> str:
    if s.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f, amp = s["freq"], s["amp"]
    e = "üî¥" if f < 7.6 else "üü£" if f > 8.1 else "üü¢"
    text = f"{e} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {s.get('trend','')}"
    if isinstance(s.get("h7_amp"), (int, float)):
        mark = "‚ö°" if s.get("h7_spike") else "¬∑"
        text += f"  ‚Ä¢ 7-—è: {s['h7_amp']:.3f} pT {mark}"
    return text

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∞–¥–∏–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def radiation_line(lat: float, lon: float) -> str | None:
    data = get_radiation(lat, lon) or {}
    dose = data.get("dose")
    if dose is None:
        return None
    if dose <= 0.15:
        emoji, lvl = "üü¢", "–Ω–∏–∑–∫–∏–π"
    elif dose <= 0.30:
        emoji, lvl = "üü°", "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π"
    else:
        emoji, lvl = "üî¥", "–≤—ã—Å–æ–∫–∏–π"
    return f"{emoji} –†–∞–¥–∏–∞—Ü–∏—è: {dose:.3f} ŒºSv/h ({lvl})"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–æ–¥–∏–∞–∫–∏ ‚Üí —Å–∏–º–≤–æ–ª—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ZODIAC = {
    "–û–≤–µ–Ω":"‚ôà","–¢–µ–ª–µ—Ü":"‚ôâ","–ë–ª–∏–∑–Ω–µ—Ü—ã":"‚ôä","–†–∞–∫":"‚ôã","–õ–µ–≤":"‚ôå",
    "–î–µ–≤–∞":"‚ôç","–í–µ—Å—ã":"‚ôé","–°–∫–æ—Ä–ø–∏–æ–Ω":"‚ôè","–°—Ç—Ä–µ–ª–µ—Ü":"‚ôê",
    "–ö–æ–∑–µ—Ä–æ–≥":"‚ôë","–í–æ–¥–æ–ª–µ–π":"‚ôí","–†—ã–±—ã":"‚ôì",
}
def zsym(s: str) -> str:
    for name, sym in ZODIAC.items():
        s = s.replace(name, sym)
    return s

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message(region_name: str,
                  sea_label: str, sea_cities, other_label: str,
                  other_cities, tz: pendulum.Timezone) -> str:

    P: List[str] = []
    today = pendulum.now(tz).date()
    tom   = today.add(days=1)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ {region_name}: –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tom.format('DD.MM.YYYY')})</b>")

    # –ú–æ—Ä–µ (—Å—Ä–µ–¥–Ω—è—è SST –≤ —Ç–æ—á–∫–µ)
    sst = _get_sst_safe(*SEA_SST_COORD)
    P.append(f"üåä –¢–µ–º–ø. –º–æ—Ä—è (—Ü–µ–Ω—Ç—Ä –∑–∞–ª–∏–≤–∞): {sst:.1f} ¬∞C" if sst is not None
             else "üåä –¢–µ–º–ø. –º–æ—Ä—è (—Ü–µ–Ω—Ç—Ä –∑–∞–ª–∏–≤–∞): –Ω/–¥")

    # –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ ‚Äî –¥–µ–Ω—å/–Ω–æ—á—å, –∫–æ–¥ —Å–ª–æ–≤–∞–º–∏ (–µ—Å–ª–∏ –Ω–∞–¥—ë–∂–µ–Ω), –≤–µ—Ç–µ—Ä –º/—Å, RH min‚Äìmax, –¥–∞–≤–ª–µ–Ω–∏–µ
    stats = day_night_stats(KLD_LAT, KLD_LON, tz=tz.name)
    wm    = get_weather(KLD_LAT, KLD_LON) or {}
    cur   = wm.get("current", {}) or {}
    wcarr = (wm.get("daily", {}) or {}).get("weathercode", [])
    wc    = wcarr[1] if isinstance(wcarr, list) and len(wcarr) > 1 else cur.get("weathercode")
    wind_ms = kmh_to_ms(cur.get("windspeed"))
    rh_min = stats.get("rh_min"); rh_max = stats.get("rh_max")
    t_day_max = stats.get("t_day_max"); t_night_min = stats.get("t_night_min")

    # –¥–∞–≤–ª–µ–Ω–∏–µ: –±–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–µ (–∏–∑ current –∏–ª–∏ –∏–∑ hourly), –ø–ª—é—Å —Ç—Ä–µ–Ω–¥
    pressure_val = cur.get("pressure")
    if pressure_val is None:
        hp = (wm.get("hourly", {}) or {}).get("surface_pressure", [])
        if isinstance(hp, list) and hp:
            pressure_val = hp[-1]
    press_part = f"{int(round(pressure_val))} –≥–ü–∞ {pressure_trend(wm)}" if isinstance(pressure_val, (int, float)) else "–Ω/–¥"

    desc = code_desc(wc)  # –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å None ‚Äî —Ç–æ–≥–¥–∞ –Ω–µ –≤—ã–≤–æ–¥–∏–º
    kal_parts = [
        f"üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å {t_day_max:.0f}/{t_night_min:.0f} ¬∞C" if (t_day_max is not None and t_night_min is not None)
        else "üèôÔ∏è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥: –¥–Ω/–Ω–æ—á—å –Ω/–¥",
        desc or None,
        f"üí® {wind_ms:.1f} –º/—Å ({compass(cur.get('winddirection', 0))})" if wind_ms is not None else f"üí® –Ω/–¥ ({compass(cur.get('winddirection', 0))})",
        (f"üíß RH {rh_min:.0f}‚Äì{rh_max:.0f}%" if rh_min is not None and rh_max is not None else None),
        f"üîπ {press_part}",
    ]
    P.append(" ‚Ä¢ ".join([x for x in kal_parts if x]))
    P.append("‚Äî‚Äî‚Äî")

    # –ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ø‚Äë5)
    temps_sea: Dict[str, Tuple[float, float, int, float | None]] = {}
    for city, (la, lo) in sea_cities:
        tmax, tmin = fetch_tomorrow_temps(la, lo, tz=tz.name)
        if tmax is None:
            continue
        wcx = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wcx = wcx[1] if isinstance(wcx, list) and len(wcx) > 1 else 0
        temps_sea[city] = (tmax, tmin or tmax, wcx, _get_sst_safe(la, lo))
    if temps_sea:
        P.append(f"üéñÔ∏è <b>{sea_label}</b>")
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        for i, (city, (d, n, wcx, sst_c)) in enumerate(sorted(temps_sea.items(),
                                                              key=lambda kv: kv[1][0], reverse=True)[:5]):
            line = f"{medals[i]} {city}: {d:.1f}/{n:.1f}"
            descx = code_desc(wcx)
            if descx:
                line += f", {descx}"
            if sst_c is not None:
                line += f" üåä {sst_c:.1f}"
            P.append(line)
        P.append("‚Äî‚Äî‚Äî")

    # –¢—ë–ø–ª—ã–µ/—Ö–æ–ª–æ–¥–Ω—ã–µ (—Ç–æ–ø‚Äë3 / —Ç–æ–ø‚Äë3)
    temps_oth: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in other_cities:
        tmax, tmin = fetch_tomorrow_temps(la, lo, tz=tz.name)
        if tmax is None:
            continue
        wcx = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wcx = wcx[1] if isinstance(wcx, list) and len(wcx) > 1 else 0
        temps_oth[city] = (tmax, tmin or tmax, wcx)
    if temps_oth:
        P.append("üî• <b>–¢—ë–ø–ª—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0], reverse=True)[:3]:
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d:.1f}/{n:.1f}" + (f" {descx}" if descx else ""))
        P.append("‚ùÑÔ∏è <b>–•–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, ¬∞C</b>")
        for city, (d, n, wcx) in sorted(temps_oth.items(), key=lambda kv: kv[1][0])[:3]:
            descx = code_desc(wcx)
            P.append(f"   ‚Ä¢ {city}: {d:.1f}/{n:.1f}" + (f" {descx}" if descx else ""))
        P.append("‚Äî‚Äî‚Äî")

    # Air + –ø—ã–ª—å—Ü–∞ + —Ä–∞–¥–∏–∞—Ü–∏—è
    air = _get_air_safe(KLD_LAT, KLD_LON) or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | "
             f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")
    em, lbl = smoke_index(air.get("pm25"), air.get("pm10"))
    if lbl != "–Ω–∏–∑–∫–æ–µ":
        P.append(f"üî• –ó–∞–¥—ã–º–ª–µ–Ω–∏–µ: {em} {lbl}")
    if (p := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {p['tree']} | –¢—Ä–∞–≤—ã: {p['grass']} | –°–æ—Ä–Ω—è–∫–∏: {p['weed']} ‚Äî —Ä–∏—Å–∫ {p['risk']}")
    if (rl := radiation_line(KLD_LAT, KLD_LON)):
        P.append(rl)
    P.append("‚Äî‚Äî‚Äî")

    # Kp + –®—É–º–∞–Ω
    kp, ks = _get_kp_safe()
    P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({ks})" if kp is not None else "üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")
    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (VOC –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ astro_events –ø—Ä–∏ show_all_voc=True)
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    astro = astro_events(offset_days=1, show_all_voc=True, tz=tz)
    if astro:
        P.extend([zsym(line) for line in astro])
    else:
        P.append("‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî")
    P.append("‚Äî‚Äî‚Äî")

    # –í—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã
    culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if kp is not None and ks and ks.lower() == "–±—É—Ä—è" else "–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"
    P.append("üìú <b>–í—ã–≤–æ–¥</b>")
    P.append(f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    try:
        _, tips = gpt_blurb(culprit)
        for t in tips[:3]:
            P.append(t.strip())
    except Exception:
        P.append("‚Äî –±–æ–ª—å—à–µ –≤–æ–¥—ã, –º–µ–Ω—å—à–µ —Å—Ç—Ä–µ—Å—Å–∞, –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–æ–Ω")

    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(tom, region_name)}")
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_common_post(bot: Bot, chat_id: int, region_name: str,
                           sea_label: str, sea_cities, other_label: str,
                           other_cities, tz):
    msg = build_message(region_name, sea_label, sea_cities,
                        other_label, other_cities, tz)
    await bot.send_message(chat_id=chat_id, text=msg,
                           parse_mode=constants.ParseMode.HTML,
                           disable_web_page_preview=True)

async def main_common(bot: Bot, chat_id: int, region_name: str,
                      sea_label: str, sea_cities, other_label: str,
                      other_cities, tz):
    await send_common_post(bot, chat_id, region_name, sea_label,
                           sea_cities, other_label, other_cities, tz)
